# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: encrypted_app_ticket.proto, enums.proto, service_cloudconfigstore.proto, steammessages_auth.proto, steammessages_base.proto, steammessages_chat.proto, steammessages_client_objects.proto, steammessages_clientserver.proto, steammessages_clientserver_2.proto, steammessages_clientserver_appinfo.proto, steammessages_clientserver_friends.proto, steammessages_clientserver_login.proto, steammessages_clientserver_userstats.proto, steammessages_player.proto, steammessages_unified_base.proto, steammessages_webui_friends.proto
# plugin: python-betterproto
import builtins
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class EBanContentCheckResult(betterproto.Enum):
    k_EBanContentCheckResult_NotScanned = 0
    k_EBanContentCheckResult_Reset = 1
    k_EBanContentCheckResult_NeedsChecking = 2
    k_EBanContentCheckResult_VeryUnlikely = 5
    k_EBanContentCheckResult_Unlikely = 30
    k_EBanContentCheckResult_Possible = 50
    k_EBanContentCheckResult_Likely = 75
    k_EBanContentCheckResult_VeryLikely = 100


class EProtoClanEventType(betterproto.Enum):
    k_EClanOtherEvent = 1
    k_EClanGameEvent = 2
    k_EClanPartyEvent = 3
    k_EClanMeetingEvent = 4
    k_EClanSpecialCauseEvent = 5
    k_EClanMusicAndArtsEvent = 6
    k_EClanSportsEvent = 7
    k_EClanTripEvent = 8
    k_EClanChatEvent = 9
    k_EClanGameReleaseEvent = 10
    k_EClanBroadcastEvent = 11
    k_EClanSmallUpdateEvent = 12
    k_EClanPreAnnounceMajorUpdateEvent = 13
    k_EClanMajorUpdateEvent = 14
    k_EClanDLCReleaseEvent = 15
    k_EClanFutureReleaseEvent = 16
    k_EClanESportTournamentStreamEvent = 17
    k_EClanDevStreamEvent = 18
    k_EClanFamousStreamEvent = 19
    k_EClanGameSalesEvent = 20
    k_EClanGameItemSalesEvent = 21
    k_EClanInGameBonusXPEvent = 22
    k_EClanInGameLootEvent = 23
    k_EClanInGamePerksEvent = 24
    k_EClanInGameChallengeEvent = 25
    k_EClanInGameContestEvent = 26
    k_EClanIRLEvent = 27
    k_EClanNewsEvent = 28
    k_EClanBetaReleaseEvent = 29
    k_EClanInGameContentReleaseEvent = 30
    k_EClanFreeTrial = 31
    k_EClanSeasonRelease = 32
    k_EClanSeasonUpdate = 33
    k_EClanCrosspostEvent = 34
    k_EClanInGameEventGeneral = 35


class PartnerEventNotificationType(betterproto.Enum):
    k_EEventStart = 0
    k_EEventBroadcastStart = 1
    k_EEventMatchStart = 2
    k_EEventPartnerMaxType = 3


class CMsgProtoBufHeaderESessionDisposition(betterproto.Enum):
    k_ESessionDispositionNormal = 0
    k_ESessionDispositionDisconnect = 1


class EPublishedFileQueryType(betterproto.Enum):
    k_PublishedFileQueryType_RankedByVote = 0
    k_PublishedFileQueryType_RankedByPublicationDate = 1
    k_PublishedFileQueryType_AcceptedForGameRankedByAcceptanceDate = 2
    k_PublishedFileQueryType_RankedByTrend = 3
    k_PublishedFileQueryType_FavoritedByFriendsRankedByPublicationDate = 4
    k_PublishedFileQueryType_CreatedByFriendsRankedByPublicationDate = 5
    k_PublishedFileQueryType_RankedByNumTimesReported = 6
    k_PublishedFileQueryType_CreatedByFollowedUsersRankedByPublicationDate = 7
    k_PublishedFileQueryType_NotYetRated = 8
    k_PublishedFileQueryType_RankedByTotalUniqueSubscriptions = 9
    k_PublishedFileQueryType_RankedByTotalVotesAsc = 10
    k_PublishedFileQueryType_RankedByVotesUp = 11
    k_PublishedFileQueryType_RankedByTextSearch = 12
    k_PublishedFileQueryType_RankedByPlaytimeTrend = 13
    k_PublishedFileQueryType_RankedByTotalPlaytime = 14
    k_PublishedFileQueryType_RankedByAveragePlaytimeTrend = 15
    k_PublishedFileQueryType_RankedByLifetimeAveragePlaytime = 16
    k_PublishedFileQueryType_RankedByPlaytimeSessionsTrend = 17
    k_PublishedFileQueryType_RankedByLifetimePlaytimeSessions = 18
    k_PublishedFileQueryType_RankedByInappropriateContentRating = 19
    k_PublishedFileQueryType_RankedByBanContentCheck = 20
    k_PublishedFileQueryType_RankedByLastUpdatedDate = 21


class EPublishedFileInappropriateProvider(betterproto.Enum):
    k_EPublishedFileInappropriateProvider_Invalid = 0
    k_EPublishedFileInappropriateProvider_Google = 1
    k_EPublishedFileInappropriateProvider_Amazon = 2


class EPublishedFileInappropriateResult(betterproto.Enum):
    k_EPublishedFileInappropriateResult_NotScanned = 0
    k_EPublishedFileInappropriateResult_VeryUnlikely = 1
    k_EPublishedFileInappropriateResult_Unlikely = 30
    k_EPublishedFileInappropriateResult_Possible = 50
    k_EPublishedFileInappropriateResult_Likely = 75
    k_EPublishedFileInappropriateResult_VeryLikely = 100


class EPersonaStateFlag(betterproto.Enum):
    k_EPersonaStateFlag_HasRichPresence = 1
    k_EPersonaStateFlag_InJoinableGame = 2
    k_EPersonaStateFlag_Golden = 4
    k_EPersonaStateFlag_RemotePlayTogether = 8
    k_EPersonaStateFlag_ClientTypeWeb = 256
    k_EPersonaStateFlag_ClientTypeMobile = 512
    k_EPersonaStateFlag_ClientTypeTenfoot = 1024
    k_EPersonaStateFlag_ClientTypeVR = 2048
    k_EPersonaStateFlag_LaunchTypeGamepad = 4096
    k_EPersonaStateFlag_LaunchTypeCompatTool = 8192


class EContentCheckProvider(betterproto.Enum):
    k_EContentCheckProvider_Invalid = 0
    k_EContentCheckProvider_Google = 1
    k_EContentCheckProvider_Amazon = 2
    k_EContentCheckProvider_Local = 3


class EProfileCustomizationType(betterproto.Enum):
    k_EProfileCustomizationTypeInvalid = 0
    k_EProfileCustomizationTypeRareAchievementShowcase = 1
    k_EProfileCustomizationTypeGameCollector = 2
    k_EProfileCustomizationTypeItemShowcase = 3
    k_EProfileCustomizationTypeTradeShowcase = 4
    k_EProfileCustomizationTypeBadges = 5
    k_EProfileCustomizationTypeFavoriteGame = 6
    k_EProfileCustomizationTypeScreenshotShowcase = 7
    k_EProfileCustomizationTypeCustomText = 8
    k_EProfileCustomizationTypeFavoriteGroup = 9
    k_EProfileCustomizationTypeRecommendation = 10
    k_EProfileCustomizationTypeWorkshopItem = 11
    k_EProfileCustomizationTypeMyWorkshop = 12
    k_EProfileCustomizationTypeArtworkShowcase = 13
    k_EProfileCustomizationTypeVideoShowcase = 14
    k_EProfileCustomizationTypeGuides = 15
    k_EProfileCustomizationTypeMyGuides = 16
    k_EProfileCustomizationTypeAchievements = 17
    k_EProfileCustomizationTypeGreenlight = 18
    k_EProfileCustomizationTypeMyGreenlight = 19
    k_EProfileCustomizationTypeSalien = 20
    k_EProfileCustomizationTypeLoyaltyRewardReactions = 21
    k_EProfileCustomizationTypeSingleArtworkShowcase = 22
    k_EProfileCustomizationTypeAchievementsCompletionist = 23
    k_EProfileCustomizationTypeReplay = 24


class EPublishedFileStorageSystem(betterproto.Enum):
    k_EPublishedFileStorageSystemInvalid = 0
    k_EPublishedFileStorageSystemLegacyCloud = 1
    k_EPublishedFileStorageSystemDepot = 2
    k_EPublishedFileStorageSystemUGCCloud = 3


class ECloudStoragePersistState(betterproto.Enum):
    k_ECloudStoragePersistStatePersisted = 0
    k_ECloudStoragePersistStateForgotten = 1
    k_ECloudStoragePersistStateDeleted = 2


class EsdCardFormatStage(betterproto.Enum):
    k_ESDCardFormatStage_Invalid = 0
    k_ESDCardFormatStage_Starting = 1
    k_ESDCardFormatStage_Testing = 2
    k_ESDCardFormatStage_Rescuing = 3
    k_ESDCardFormatStage_Formatting = 4
    k_ESDCardFormatStage_Finalizing = 5


class ESystemFanControlMode(betterproto.Enum):
    k_SystemFanControlMode_Invalid = 0
    k_SystemFanControlMode_Disabled = 1
    k_SystemFanControlMode_Default = 2


class EBluetoothDeviceType(betterproto.Enum):
    k_BluetoothDeviceType_Invalid = 0
    k_BluetoothDeviceType_Unknown = 1
    k_BluetoothDeviceType_Phone = 2
    k_BluetoothDeviceType_Computer = 3
    k_BluetoothDeviceType_Headset = 4
    k_BluetoothDeviceType_Headphones = 5
    k_BluetoothDeviceType_Speakers = 6
    k_BluetoothDeviceType_OtherAudio = 7
    k_BluetoothDeviceType_Mouse = 8
    k_BluetoothDeviceType_Joystick = 9
    k_BluetoothDeviceType_Gamepad = 10
    k_BluetoothDeviceType_Keyboard = 11


class ESystemAudioDirection(betterproto.Enum):
    k_SystemAudioDirection_Invalid = 0
    k_SystemAudioDirection_Input = 1
    k_SystemAudioDirection_Output = 2


class ESystemAudioChannel(betterproto.Enum):
    k_SystemAudioChannel_Invalid = 0
    k_SystemAudioChannel_Aggregated = 1
    k_SystemAudioChannel_FrontLeft = 2
    k_SystemAudioChannel_FrontRight = 3
    k_SystemAudioChannel_LFE = 4
    k_SystemAudioChannel_BackLeft = 5
    k_SystemAudioChannel_BackRight = 6
    k_SystemAudioChannel_FrontCenter = 7
    k_SystemAudioChannel_Unknown = 8
    k_SystemAudioChannel_Mono = 9


class ESystemAudioPortType(betterproto.Enum):
    k_SystemAudioPortType_Invalid = 0
    k_SystemAudioPortType_Unknown = 1
    k_SystemAudioPortType_Audio32f = 2
    k_SystemAudioPortType_Midi8b = 3
    k_SystemAudioPortType_Video32RGBA = 4


class ESystemAudioPortDirection(betterproto.Enum):
    k_SystemAudioPortDirection_Invalid = 0
    k_SystemAudioPortDirection_Input = 1
    k_SystemAudioPortDirection_Output = 2


class ESystemServiceState(betterproto.Enum):
    k_ESystemServiceState_Unavailable = 0
    k_ESystemServiceState_Disabled = 1
    k_ESystemServiceState_Enabled = 2


class EGraphicsPerfOverlayLevel(betterproto.Enum):
    k_EGraphicsPerfOverlayLevel_Hidden = 0
    k_EGraphicsPerfOverlayLevel_Basic = 1
    k_EGraphicsPerfOverlayLevel_Medium = 2
    k_EGraphicsPerfOverlayLevel_Full = 3
    k_EGraphicsPerfOverlayLevel_Minimal = 4


class EgpuPerformanceLevel(betterproto.Enum):
    k_EGPUPerformanceLevel_Invalid = 0
    k_EGPUPerformanceLevel_Auto = 1
    k_EGPUPerformanceLevel_Manual = 2
    k_EGPUPerformanceLevel_Low = 3
    k_EGPUPerformanceLevel_High = 4
    k_EGPUPerformanceLevel_Profiling = 5


class EScalingFilter(betterproto.Enum):
    k_EScalingFilter_Invalid = 0
    k_EScalingFilter_FSR = 1
    k_EScalingFilter_Nearest = 2
    k_EScalingFilter_Integer = 3
    k_EScalingFilter_Linear = 4
    k_EScalingFilter_NIS = 5


class ESplitScalingFilter(betterproto.Enum):
    k_ESplitScalingFilter_Invalid = 0
    k_ESplitScalingFilter_Linear = 1
    k_ESplitScalingFilter_Nearest = 2
    k_ESplitScalingFilter_FSR = 3
    k_ESplitScalingFilter_NIS = 4


class ESplitScalingScaler(betterproto.Enum):
    k_ESplitScalingScaler_Invalid = 0
    k_ESplitScalingScaler_Auto = 1
    k_ESplitScalingScaler_Integer = 2
    k_ESplitScalingScaler_Fit = 3
    k_ESplitScalingScaler_Fill = 4
    k_ESplitScalingScaler_Stretch = 5


class EhdrToneMapOperator(betterproto.Enum):
    k_EHDRToneMapOperator_Invalid = 0
    k_EHDRToneMapOperator_Uncharted = 1
    k_EHDRToneMapOperator_Reinhard = 2


class EcpuGovernor(betterproto.Enum):
    k_ECPUGovernor_Invalid = 0
    k_ECPUGovernor_Perf = 1
    k_ECPUGovernor_Powersave = 2
    k_ECPUGovernor_Manual = 3


class EUpdaterType(betterproto.Enum):
    k_EUpdaterType_Invalid = 0
    k_EUpdaterType_Client = 1
    k_EUpdaterType_OS = 2
    k_EUpdaterType_BIOS = 3
    k_EUpdaterType_Aggregated = 4
    k_EUpdaterType_Test1 = 5
    k_EUpdaterType_Test2 = 6
    k_EUpdaterType_Dummy = 7


class EUpdaterState(betterproto.Enum):
    k_EUpdaterState_Invalid = 0
    k_EUpdaterState_UpToDate = 2
    k_EUpdaterState_Checking = 3
    k_EUpdaterState_Available = 4
    k_EUpdaterState_Applying = 5
    k_EUpdaterState_ClientRestartPending = 6
    k_EUpdaterState_SystemRestartPending = 7


class EStorageBlockContentType(betterproto.Enum):
    k_EStorageBlockContentType_Invalid = 0
    k_EStorageBlockContentType_Unknown = 1
    k_EStorageBlockContentType_FileSystem = 2
    k_EStorageBlockContentType_Crypto = 3
    k_EStorageBlockContentType_Raid = 4


class EStorageBlockFileSystemType(betterproto.Enum):
    k_EStorageBlockFileSystemType_Invalid = 0
    k_EStorageBlockFileSystemType_Unknown = 1
    k_EStorageBlockFileSystemType_VFat = 2
    k_EStorageBlockFileSystemType_Ext4 = 3


class EStorageDriveMediaType(betterproto.Enum):
    k_EStorageDriveMediaType_Invalid = 0
    k_EStorageDriveMediaType_Unknown = 1
    k_EStorageDriveMediaType_HDD = 2
    k_EStorageDriveMediaType_SSD = 3
    k_EStorageDriveMediaType_Removable = 4


class ESystemDisplayCompatibilityMode(betterproto.Enum):
    k_ESystemDisplayCompatibilityMode_Invalid = 0
    k_ESystemDisplayCompatibilityMode_None = 1
    k_ESystemDisplayCompatibilityMode_MinimalBandwith = 2


class ESteamDeckCompatibilityCategory(betterproto.Enum):
    k_ESteamDeckCompatibilityCategory_Unknown = 0
    k_ESteamDeckCompatibilityCategory_Unsupported = 1
    k_ESteamDeckCompatibilityCategory_Playable = 2
    k_ESteamDeckCompatibilityCategory_Verified = 3


class ESteamDeckCompatibilityResultDisplayType(betterproto.Enum):
    k_ESteamDeckCompatibilityResultDisplayType_Invisible = 0
    k_ESteamDeckCompatibilityResultDisplayType_Informational = 1
    k_ESteamDeckCompatibilityResultDisplayType_Unsupported = 2
    k_ESteamDeckCompatibilityResultDisplayType_Playable = 3
    k_ESteamDeckCompatibilityResultDisplayType_Verified = 4


class EacState(betterproto.Enum):
    k_EACState_Unknown = 0
    k_EACState_Disconnected = 1
    k_EACState_Connected = 2
    k_EACState_ConnectedSlow = 3


class EBatteryState(betterproto.Enum):
    k_EBatteryState_Unknown = 0
    k_EBatteryState_Discharging = 1
    k_EBatteryState_Charging = 2
    k_EBatteryState_Full = 3


class EosBranch(betterproto.Enum):
    k_EOSBranch_Unknown = 0
    k_EOSBranch_Release = 1
    k_EOSBranch_ReleaseCandidate = 2
    k_EOSBranch_Beta = 3
    k_EOSBranch_BetaCandidate = 4
    k_EOSBranch_Main = 5
    k_EOSBranch_Staging = 6


class ECommunityItemClass(betterproto.Enum):
    k_ECommunityItemClass_Invalid = 0
    k_ECommunityItemClass_Badge = 1
    k_ECommunityItemClass_GameCard = 2
    k_ECommunityItemClass_ProfileBackground = 3
    k_ECommunityItemClass_Emoticon = 4
    k_ECommunityItemClass_BoosterPack = 5
    k_ECommunityItemClass_Consumable = 6
    k_ECommunityItemClass_GameGoo = 7
    k_ECommunityItemClass_ProfileModifier = 8
    k_ECommunityItemClass_Scene = 9
    k_ECommunityItemClass_SalienItem = 10
    k_ECommunityItemClass_Sticker = 11
    k_ECommunityItemClass_ChatEffect = 12
    k_ECommunityItemClass_MiniProfileBackground = 13
    k_ECommunityItemClass_AvatarFrame = 14
    k_ECommunityItemClass_AnimatedAvatar = 15
    k_ECommunityItemClass_SteamDeckKeyboardSkin = 16
    k_ECommunityItemClass_SteamDeckStartupMovie = 17


class ESteamDeckCompatibilityFeedback(betterproto.Enum):
    k_ESteamDeckCompatibilityFeedback_Unset = 0
    k_ESteamDeckCompatibilityFeedback_Agree = 1
    k_ESteamDeckCompatibilityFeedback_Disagree = 2
    k_ESteamDeckCompatibilityFeedback_Ignore = 3


class EProvideDeckFeedbackPreference(betterproto.Enum):
    k_EProvideDeckFeedbackPreference_Unset = 0
    k_EProvideDeckFeedbackPreference_Yes = 1
    k_EProvideDeckFeedbackPreference_No = 2


class ETouchGesture(betterproto.Enum):
    k_ETouchGestureNone = 0
    k_ETouchGestureTouch = 1
    k_ETouchGestureTap = 2
    k_ETouchGestureDoubleTap = 3
    k_ETouchGestureShortPress = 4
    k_ETouchGestureLongPress = 5
    k_ETouchGestureLongTap = 6
    k_ETouchGestureTwoFingerTap = 7
    k_ETouchGestureTapCancelled = 8
    k_ETouchGesturePinchBegin = 9
    k_ETouchGesturePinchUpdate = 10
    k_ETouchGesturePinchEnd = 11
    k_ETouchGestureFlingStart = 12
    k_ETouchGestureFlingCancelled = 13


class ESessionPersistence(betterproto.Enum):
    k_ESessionPersistence_Invalid = -1
    k_ESessionPersistence_Ephemeral = 0
    k_ESessionPersistence_Persistent = 1


class ENewSteamAnnouncementState(betterproto.Enum):
    k_ENewSteamAnnouncementState_Invalid = 0
    k_ENewSteamAnnouncementState_AllRead = 1
    k_ENewSteamAnnouncementState_NewAnnouncement = 2
    k_ENewSteamAnnouncementState_FeaturedAnnouncement = 3


class ECommentThreadType(betterproto.Enum):
    k_ECommentThreadTypeInvalid = 0
    k_ECommentThreadTypeScreenshot_Deprecated = 1
    k_ECommentThreadTypeWorkshopAccount_Developer = 2
    k_ECommentThreadTypeWorkshopAccount_Public = 3
    k_ECommentThreadTypePublishedFile_Developer = 4
    k_ECommentThreadTypePublishedFile_Public = 5
    k_ECommentThreadTypeTest = 6
    k_ECommentThreadTypeForumTopic = 7
    k_ECommentThreadTypeRecommendation = 8
    k_ECommentThreadTypeVideo_Deprecated = 9
    k_ECommentThreadTypeProfile = 10
    k_ECommentThreadTypeNewsPost = 11
    k_ECommentThreadTypeClan = 12
    k_ECommentThreadTypeClanAnnouncement = 13
    k_ECommentThreadTypeClanEvent = 14
    k_ECommentThreadTypeUserStatusPublished = 15
    k_ECommentThreadTypeUserReceivedNewGame = 16
    k_ECommentThreadTypePublishedFile_Announcement = 17
    k_ECommentThreadTypeModeratorMessage = 18
    k_ECommentThreadTypeClanCuratedApp = 19
    k_ECommentThreadTypeQAndASession = 20
    k_ECommentThreadTypeMax = 21


class EBroadcastPermission(betterproto.Enum):
    k_EBroadcastPermissionDisabled = 0
    k_EBroadcastPermissionFriendsApprove = 1
    k_EBroadcastPermissionFriendsAllowed = 2
    k_EBroadcastPermissionPublic = 3
    k_EBroadcastPermissionSubscribers = 4


class EBroadcastEncoderSetting(betterproto.Enum):
    k_EBroadcastEncoderBestQuality = 0
    k_EBroadcastEncoderBestPerformance = 1


class ECloudGamingPlatform(betterproto.Enum):
    k_ECloudGamingPlatformNone = 0
    k_ECloudGamingPlatformValve = 1
    k_ECloudGamingPlatformNVIDIA = 2


class EProtoExecutionSite(betterproto.Enum):
    k_EProtoExecutionSiteUnknown = 0
    k_EProtoExecutionSiteSteamClient = 2


class EAuthTokenPlatformType(betterproto.Enum):
    k_EAuthTokenPlatformType_Unknown = 0
    k_EAuthTokenPlatformType_SteamClient = 1
    k_EAuthTokenPlatformType_WebBrowser = 2
    k_EAuthTokenPlatformType_MobileApp = 3


class EAuthSessionGuardType(betterproto.Enum):
    k_EAuthSessionGuardType_Unknown = 0
    k_EAuthSessionGuardType_None = 1
    k_EAuthSessionGuardType_EmailCode = 2
    k_EAuthSessionGuardType_DeviceCode = 3
    k_EAuthSessionGuardType_DeviceConfirmation = 4
    k_EAuthSessionGuardType_EmailConfirmation = 5
    k_EAuthSessionGuardType_MachineToken = 6
    k_EAuthSessionGuardType_LegacyMachineAuth = 7


class EAuthSessionSecurityHistory(betterproto.Enum):
    k_EAuthSessionSecurityHistory_Invalid = 0
    k_EAuthSessionSecurityHistory_UsedPreviously = 1
    k_EAuthSessionSecurityHistory_NoPriorHistory = 2


class ETokenRenewalType(betterproto.Enum):
    k_ETokenRenewalType_None = 0
    k_ETokenRenewalType_Allow = 1


class EAuthTokenRevokeAction(betterproto.Enum):
    k_EAuthTokenRevokeLogout = 0
    k_EAuthTokenRevokePermanent = 1
    k_EAuthTokenRevokeReplaced = 2
    k_EAuthTokenRevokeSupport = 3
    k_EAuthTokenRevokeConsume = 4
    k_EAuthTokenRevokeNonRememberedLogout = 5
    k_EAuthTokenRevokeNonRememberedPermanent = 6
    k_EAuthTokenRevokeAutomatic = 7


class EAuthTokenState(betterproto.Enum):
    k_EAuthTokenState_Invalid = 0
    k_EAuthTokenState_New = 1
    k_EAuthTokenState_Confirmed = 2
    k_EAuthTokenState_Issued = 3
    k_EAuthTokenState_Denied = 4
    k_EAuthTokenState_LoggedOut = 5
    k_EAuthTokenState_Consumed = 6
    k_EAuthTokenState_Revoked = 99


class EChatRoomJoinState(betterproto.Enum):
    k_EChatRoomJoinState_Default = 0
    k_EChatRoomJoinState_None = 1
    k_EChatRoomJoinState_Joined = 2
    k_EChatRoomJoinState_TestInvalid = 99


class EChatRoomGroupRank(betterproto.Enum):
    k_EChatRoomGroupRank_Default = 0
    k_EChatRoomGroupRank_Viewer = 10
    k_EChatRoomGroupRank_Guest = 15
    k_EChatRoomGroupRank_Member = 20
    k_EChatRoomGroupRank_Moderator = 30
    k_EChatRoomGroupRank_Officer = 40
    k_EChatRoomGroupRank_Owner = 50
    k_EChatRoomGroupRank_TestInvalid = 99


class EChatRoomNotificationLevel(betterproto.Enum):
    k_EChatroomNotificationLevel_Invalid = 0
    k_EChatroomNotificationLevel_None = 1
    k_EChatroomNotificationLevel_MentionMe = 2
    k_EChatroomNotificationLevel_MentionAll = 3
    k_EChatroomNotificationLevel_AllMessages = 4


class EChatRoomServerMessage(betterproto.Enum):
    k_EChatRoomServerMsg_Invalid = 0
    k_EChatRoomServerMsg_RenameChatRoom = 1
    k_EChatRoomServerMsg_Joined = 2
    k_EChatRoomServerMsg_Parted = 3
    k_EChatRoomServerMsg_Kicked = 4
    k_EChatRoomServerMsg_Invited = 5
    k_EChatRoomServerMsg_InviteDismissed = 8
    k_EChatRoomServerMsg_ChatRoomTaglineChanged = 9
    k_EChatRoomServerMsg_ChatRoomAvatarChanged = 10
    k_EChatRoomServerMsg_AppCustom = 11


class EChatRoomMessageReactionType(betterproto.Enum):
    k_EChatRoomMessageReactionType_Invalid = 0
    k_EChatRoomMessageReactionType_Emoticon = 1
    k_EChatRoomMessageReactionType_Sticker = 2


class EChatRoomMemberStateChange(betterproto.Enum):
    k_EChatRoomMemberStateChange_Invalid = 0
    k_EChatRoomMemberStateChange_Joined = 1
    k_EChatRoomMemberStateChange_Parted = 2
    k_EChatRoomMemberStateChange_Kicked = 3
    k_EChatRoomMemberStateChange_Invited = 4
    k_EChatRoomMemberStateChange_RankChanged = 7
    k_EChatRoomMemberStateChange_InviteDismissed = 8
    k_EChatRoomMemberStateChange_Muted = 9
    k_EChatRoomMemberStateChange_Banned = 10
    k_EChatRoomMemberStateChange_RolesChanged = 12


class ECloudPendingRemoteOperation(betterproto.Enum):
    k_ECloudPendingRemoteOperationNone = 0
    k_ECloudPendingRemoteOperationAppSessionActive = 1
    k_ECloudPendingRemoteOperationUploadInProgress = 2
    k_ECloudPendingRemoteOperationUploadPending = 3
    k_ECloudPendingRemoteOperationAppSessionSuspended = 4


class ESteamDeckKeyboardLayout(betterproto.Enum):
    k_ESteamDeckKeyboardLayout_QWERTY = 0
    k_ESteamDeckKeyboardLayout_Bulgarian = 1
    k_ESteamDeckKeyboardLayout_Chinese_Simplified = 2
    k_ESteamDeckKeyboardLayout_Chinese_Traditional = 3
    k_ESteamDeckKeyboardLayout_Czech = 4
    k_ESteamDeckKeyboardLayout_Danish = 5
    k_ESteamDeckKeyboardLayout_Finnish = 6
    k_ESteamDeckKeyboardLayout_French = 7
    k_ESteamDeckKeyboardLayout_German = 8
    k_ESteamDeckKeyboardLayout_Greek = 9
    k_ESteamDeckKeyboardLayout_Hungarian = 10
    k_ESteamDeckKeyboardLayout_Italian = 11
    k_ESteamDeckKeyboardLayout_Japanese = 12
    k_ESteamDeckKeyboardLayout_Korean = 13
    k_ESteamDeckKeyboardLayout_Norwegian = 14
    k_ESteamDeckKeyboardLayout_Polish = 15
    k_ESteamDeckKeyboardLayout_Portuguese = 16
    k_ESteamDeckKeyboardLayout_Romanian = 17
    k_ESteamDeckKeyboardLayout_Russian = 18
    k_ESteamDeckKeyboardLayout_Spanish = 19
    k_ESteamDeckKeyboardLayout_Swedish = 20
    k_ESteamDeckKeyboardLayout_Thai = 21
    k_ESteamDeckKeyboardLayout_Turkish_F = 22
    k_ESteamDeckKeyboardLayout_Turkish_Q = 23
    k_ESteamDeckKeyboardLayout_Ukrainian = 24
    k_ESteamDeckKeyboardLayout_Vietnamese = 25
    k_ESteamDeckKeyboardLayout_QWERTY_International = 26
    k_ESteamDeckKeyboardLayout_Dvorak = 27
    k_ESteamDeckKeyboardLayout_Colemak = 28
    k_ESteamDeckKeyboardLayout_Bulgarian_Phonetic_Traditional = 29
    k_ESteamDeckKeyboardLayout_Bulgarian_Phonetic = 30
    k_ESteamDeckKeyboardLayout_Chinese_Traditional_Bopomofo = 31
    k_ESteamDeckKeyboardLayout_Chinese_Traditional_Cangjie = 32
    k_ESteamDeckKeyboardLayout_Japanese_Kana = 33
    k_ESteamDeckKeyboardLayout_Chinese_Traditional_Quick = 34


class EProfileCustomizationStyle(betterproto.Enum):
    k_EProfileCustomizationStyleDefault = 0
    k_EProfileCustomizationStyleSelected = 1
    k_EProfileCustomizationStyleRarest = 2
    k_EProfileCustomizationStyleMostRecent = 3
    k_EProfileCustomizationStyleRandom = 4
    k_EProfileCustomizationStyleHighestRated = 5


class EAgreementType(betterproto.Enum):
    k_EAgreementType_Invalid = -1
    k_EAgreementType_GlobalSSA = 0
    k_EAgreementType_ChinaSSA = 1


class ENotificationSetting(betterproto.Enum):
    k_ENotificationSettingNotifyUseDefault = 0
    k_ENotificationSettingAlways = 1
    k_ENotificationSettingNever = 2


class ETextFilterSetting(betterproto.Enum):
    k_ETextFilterSettingSteamLabOptedOut = 0
    k_ETextFilterSettingEnabled = 1
    k_ETextFilterSettingEnabledAllowProfanity = 2
    k_ETextFilterSettingDisabled = 3


@dataclass(eq=False, repr=False)
class EncryptedAppTicket(betterproto.Message):
    ticket_version_no: int = betterproto.uint32_field(1)
    crc_encryptedticket: int = betterproto.uint32_field(2)
    cb_encrypteduserdata: int = betterproto.uint32_field(3)
    cb_encrypted_appownershipticket: int = betterproto.uint32_field(4)
    encrypted_ticket: bytes = betterproto.bytes_field(5)


@dataclass(eq=False, repr=False)
class CMsgIpAddress(betterproto.Message):
    v4: int = betterproto.fixed32_field(1, group="ip")
    v6: bytes = betterproto.bytes_field(2, group="ip")


@dataclass(eq=False, repr=False)
class CMsgIpAddressBucket(betterproto.Message):
    original_ip_address: "CMsgIpAddress" = betterproto.message_field(1)
    bucket: int = betterproto.fixed64_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcRoutingProtoBufHeader(betterproto.Message):
    dst_gcid_queue: int = betterproto.uint64_field(1)
    dst_gc_dir_index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgProtoBufHeader(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    client_sessionid: int = betterproto.int32_field(2)
    routing_appid: int = betterproto.uint32_field(3)
    jobid_source: int = betterproto.fixed64_field(10)
    jobid_target: int = betterproto.fixed64_field(11)
    target_job_name: str = betterproto.string_field(12)
    seq_num: int = betterproto.int32_field(24)
    eresult: int = betterproto.int32_field(13)
    error_message: str = betterproto.string_field(14)
    auth_account_flags: int = betterproto.uint32_field(16)
    token_source: int = betterproto.uint32_field(22)
    admin_spoofing_user: bool = betterproto.bool_field(23)
    transport_error: int = betterproto.int32_field(17)
    messageid: int = betterproto.uint64_field(18)
    publisher_group_id: int = betterproto.uint32_field(19)
    sysid: int = betterproto.uint32_field(20)
    trace_tag: int = betterproto.uint64_field(21)
    webapi_key_id: int = betterproto.uint32_field(25)
    is_from_external_source: bool = betterproto.bool_field(26)
    forward_to_sysid: List[int] = betterproto.uint32_field(27)
    cm_sysid: int = betterproto.uint32_field(28)
    launcher_type: int = betterproto.uint32_field(31)
    realm: int = betterproto.uint32_field(32)
    timeout_ms: int = betterproto.int32_field(33)
    debug_source: str = betterproto.string_field(34)
    debug_source_string_index: int = betterproto.uint32_field(35)
    token_id: int = betterproto.uint64_field(36)
    routing_gc: "CMsgGcRoutingProtoBufHeader" = betterproto.message_field(37)
    session_disposition: "CMsgProtoBufHeaderESessionDisposition" = (
        betterproto.enum_field(38)
    )
    wg_token: str = betterproto.string_field(39)
    webui_auth_key: str = betterproto.string_field(40)
    ip: int = betterproto.uint32_field(15, group="ip_addr")
    ip_v6: bytes = betterproto.bytes_field(29, group="ip_addr")


@dataclass(eq=False, repr=False)
class CMsgMulti(betterproto.Message):
    size_unzipped: int = betterproto.uint32_field(1)
    message_body: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CMsgProtobufWrapped(betterproto.Message):
    message_body: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class CMsgAuthTicket(betterproto.Message):
    estate: int = betterproto.uint32_field(1)
    eresult: int = betterproto.uint32_field(2)
    steamid: int = betterproto.fixed64_field(3)
    gameid: int = betterproto.fixed64_field(4)
    h_steam_pipe: int = betterproto.uint32_field(5)
    ticket_crc: int = betterproto.uint32_field(6)
    ticket: bytes = betterproto.bytes_field(7)
    server_secret: bytes = betterproto.bytes_field(8)
    ticket_type: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class CcddbAppDetailCommon(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)
    icon: str = betterproto.string_field(3)
    tool: bool = betterproto.bool_field(6)
    demo: bool = betterproto.bool_field(7)
    media: bool = betterproto.bool_field(8)
    community_visible_stats: bool = betterproto.bool_field(9)
    friendly_name: str = betterproto.string_field(10)
    propagation: str = betterproto.string_field(11)
    has_adult_content: bool = betterproto.bool_field(12)
    is_visible_in_steam_china: bool = betterproto.bool_field(13)
    app_type: int = betterproto.uint32_field(14)
    has_adult_content_sex: bool = betterproto.bool_field(15)
    has_adult_content_violence: bool = betterproto.bool_field(16)
    content_descriptorids: List[int] = betterproto.uint32_field(17)


@dataclass(eq=False, repr=False)
class CMsgAppRights(betterproto.Message):
    edit_info: bool = betterproto.bool_field(1)
    publish: bool = betterproto.bool_field(2)
    view_error_data: bool = betterproto.bool_field(3)
    download: bool = betterproto.bool_field(4)
    upload_cdkeys: bool = betterproto.bool_field(5)
    generate_cdkeys: bool = betterproto.bool_field(6)
    view_financials: bool = betterproto.bool_field(7)
    manage_ceg: bool = betterproto.bool_field(8)
    manage_signing: bool = betterproto.bool_field(9)
    manage_cdkeys: bool = betterproto.bool_field(10)
    edit_marketing: bool = betterproto.bool_field(11)
    economy_support: bool = betterproto.bool_field(12)
    economy_support_supervisor: bool = betterproto.bool_field(13)
    manage_pricing: bool = betterproto.bool_field(14)
    broadcast_live: bool = betterproto.bool_field(15)
    view_marketing_traffic: bool = betterproto.bool_field(16)
    edit_store_display_content: bool = betterproto.bool_field(17)


@dataclass(eq=False, repr=False)
class CCuratorPreferences(betterproto.Message):
    supported_languages: int = betterproto.uint32_field(1)
    platform_windows: bool = betterproto.bool_field(2)
    platform_mac: bool = betterproto.bool_field(3)
    platform_linux: bool = betterproto.bool_field(4)
    vr_content: bool = betterproto.bool_field(5)
    adult_content_violence: bool = betterproto.bool_field(6)
    adult_content_sex: bool = betterproto.bool_field(7)
    timestamp_updated: int = betterproto.uint32_field(8)
    tagids_curated: List[int] = betterproto.uint32_field(9)
    tagids_filtered: List[int] = betterproto.uint32_field(10)
    website_title: str = betterproto.string_field(11)
    website_url: str = betterproto.string_field(12)
    discussion_url: str = betterproto.string_field(13)
    show_broadcast: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class CLocalizationToken(betterproto.Message):
    language: int = betterproto.uint32_field(1)
    localized_string: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CClanEventUserNewsTuple(betterproto.Message):
    clanid: int = betterproto.uint32_field(1)
    event_gid: int = betterproto.fixed64_field(2)
    announcement_gid: int = betterproto.fixed64_field(3)
    rtime_start: int = betterproto.uint32_field(4)
    rtime_end: int = betterproto.uint32_field(5)
    priority_score: int = betterproto.uint32_field(6)
    type: int = betterproto.uint32_field(7)
    clamp_range_slot: int = betterproto.uint32_field(8)
    appid: int = betterproto.uint32_field(9)
    rtime32_last_modified: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class CClanMatchEventByRange(betterproto.Message):
    rtime_before: int = betterproto.uint32_field(1)
    rtime_after: int = betterproto.uint32_field(2)
    qualified: int = betterproto.uint32_field(3)
    events: List["CClanEventUserNewsTuple"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CCommunityClanAnnouncementInfo(betterproto.Message):
    gid: int = betterproto.uint64_field(1)
    clanid: int = betterproto.uint64_field(2)
    posterid: int = betterproto.uint64_field(3)
    headline: str = betterproto.string_field(4)
    posttime: int = betterproto.uint32_field(5)
    updatetime: int = betterproto.uint32_field(6)
    body: str = betterproto.string_field(7)
    commentcount: int = betterproto.int32_field(8)
    tags: List[str] = betterproto.string_field(9)
    language: int = betterproto.int32_field(10)
    hidden: bool = betterproto.bool_field(11)
    forum_topic_id: int = betterproto.fixed64_field(12)
    event_gid: int = betterproto.fixed64_field(13)
    voteupcount: int = betterproto.int32_field(14)
    votedowncount: int = betterproto.int32_field(15)
    ban_check_result: "EBanContentCheckResult" = betterproto.enum_field(16)
    banned: bool = betterproto.bool_field(17)


@dataclass(eq=False, repr=False)
class CClanEventData(betterproto.Message):
    gid: int = betterproto.fixed64_field(1)
    clan_steamid: int = betterproto.fixed64_field(2)
    event_name: str = betterproto.string_field(3)
    event_type: "EProtoClanEventType" = betterproto.enum_field(4)
    appid: int = betterproto.uint32_field(5)
    server_address: str = betterproto.string_field(6)
    server_password: str = betterproto.string_field(7)
    rtime32_start_time: int = betterproto.uint32_field(8)
    rtime32_end_time: int = betterproto.uint32_field(9)
    comment_count: int = betterproto.int32_field(10)
    creator_steamid: int = betterproto.fixed64_field(11)
    last_update_steamid: int = betterproto.fixed64_field(12)
    event_notes: str = betterproto.string_field(13)
    jsondata: str = betterproto.string_field(14)
    announcement_body: "CCommunityClanAnnouncementInfo" = betterproto.message_field(15)
    published: bool = betterproto.bool_field(16)
    hidden: bool = betterproto.bool_field(17)
    rtime32_visibility_start: int = betterproto.uint32_field(18)
    rtime32_visibility_end: int = betterproto.uint32_field(19)
    broadcaster_accountid: int = betterproto.uint32_field(20)
    follower_count: int = betterproto.uint32_field(21)
    ignore_count: int = betterproto.uint32_field(22)
    forum_topic_id: int = betterproto.fixed64_field(23)
    rtime32_last_modified: int = betterproto.uint32_field(24)
    news_post_gid: int = betterproto.fixed64_field(25)
    rtime_mod_reviewed: int = betterproto.uint32_field(26)
    featured_app_tagid: int = betterproto.uint32_field(27)
    referenced_appids: List[int] = betterproto.uint32_field(28)
    build_id: int = betterproto.uint32_field(29)
    build_branch: str = betterproto.string_field(30)


@dataclass(eq=False, repr=False)
class CBillingAddress(betterproto.Message):
    first_name: str = betterproto.string_field(1)
    last_name: str = betterproto.string_field(2)
    address1: str = betterproto.string_field(3)
    address2: str = betterproto.string_field(4)
    city: str = betterproto.string_field(5)
    us_state: str = betterproto.string_field(6)
    country_code: str = betterproto.string_field(7)
    postcode: str = betterproto.string_field(8)
    zip_plus4: int = betterproto.int32_field(9)
    phone: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class CPackageReservationStatus(betterproto.Message):
    packageid: int = betterproto.uint32_field(1)
    reservation_state: int = betterproto.int32_field(2)
    queue_position: int = betterproto.int32_field(3)
    total_queue_size: int = betterproto.int32_field(4)
    reservation_country_code: str = betterproto.string_field(5)
    expired: bool = betterproto.bool_field(6)
    time_expires: int = betterproto.uint32_field(7)
    time_reserved: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class CMsgKeyValuePair(betterproto.Message):
    name: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgKeyValueSet(betterproto.Message):
    pairs: List["CMsgKeyValuePair"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UserContentDescriptorPreferences(betterproto.Message):
    content_descriptors_to_exclude: List[
        "UserContentDescriptorPreferencesContentDescriptor"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UserContentDescriptorPreferencesContentDescriptor(betterproto.Message):
    content_descriptorid: int = betterproto.uint32_field(1)
    timestamp_added: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class NoResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CCloudConfigStoreChangeNotification(betterproto.Message):
    versions: List["CCloudConfigStoreNamespaceVersion"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CCloudConfigStoreDownloadRequest(betterproto.Message):
    versions: List["CCloudConfigStoreNamespaceVersion"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CCloudConfigStoreDownloadResponse(betterproto.Message):
    data: List["CCloudConfigStoreNamespaceData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CCloudConfigStoreEntry(betterproto.Message):
    key: str = betterproto.string_field(1)
    is_deleted: bool = betterproto.bool_field(2)
    value: str = betterproto.string_field(3)
    timestamp: int = betterproto.fixed32_field(4)
    version: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class CCloudConfigStoreNamespaceData(betterproto.Message):
    enamespace: int = betterproto.uint32_field(1)
    version: int = betterproto.uint64_field(2)
    entries: List["CCloudConfigStoreEntry"] = betterproto.message_field(3)
    horizon: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class CCloudConfigStoreNamespaceVersion(betterproto.Message):
    enamespace: int = betterproto.uint32_field(1)
    version: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CCloudConfigStoreUploadRequest(betterproto.Message):
    data: List["CCloudConfigStoreNamespaceData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CCloudConfigStoreUploadResponse(betterproto.Message):
    versions: List["CCloudConfigStoreNamespaceVersion"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CAuthenticationGetPasswordRsaPublicKeyRequest(betterproto.Message):
    account_name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CAuthenticationGetPasswordRsaPublicKeyResponse(betterproto.Message):
    publickey_mod: str = betterproto.string_field(1)
    publickey_exp: str = betterproto.string_field(2)
    timestamp: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CAuthenticationDeviceDetails(betterproto.Message):
    device_friendly_name: str = betterproto.string_field(1)
    platform_type: "EAuthTokenPlatformType" = betterproto.enum_field(2)
    os_type: int = betterproto.int32_field(3)
    gaming_device_type: int = betterproto.uint32_field(4)
    client_count: int = betterproto.uint32_field(5)
    machine_id: bytes = betterproto.bytes_field(6)


@dataclass(eq=False, repr=False)
class CAuthenticationBeginAuthSessionViaQrRequest(betterproto.Message):
    device_friendly_name: str = betterproto.string_field(1)
    platform_type: "EAuthTokenPlatformType" = betterproto.enum_field(2)
    device_details: "CAuthenticationDeviceDetails" = betterproto.message_field(3)
    website_id: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CAuthenticationAllowedConfirmation(betterproto.Message):
    confirmation_type: "EAuthSessionGuardType" = betterproto.enum_field(1)
    associated_message: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CAuthenticationBeginAuthSessionViaQrResponse(betterproto.Message):
    client_id: int = betterproto.uint64_field(1)
    challenge_url: str = betterproto.string_field(2)
    request_id: bytes = betterproto.bytes_field(3)
    interval: float = betterproto.float_field(4)
    allowed_confirmations: List[
        "CAuthenticationAllowedConfirmation"
    ] = betterproto.message_field(5)
    version: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class CAuthenticationBeginAuthSessionViaCredentialsRequest(betterproto.Message):
    device_friendly_name: str = betterproto.string_field(1)
    account_name: str = betterproto.string_field(2)
    encrypted_password: str = betterproto.string_field(3)
    encryption_timestamp: int = betterproto.uint64_field(4)
    remember_login: bool = betterproto.bool_field(5)
    platform_type: "EAuthTokenPlatformType" = betterproto.enum_field(6)
    persistence: "ESessionPersistence" = betterproto.enum_field(7)
    website_id: str = betterproto.string_field(8)
    device_details: "CAuthenticationDeviceDetails" = betterproto.message_field(9)
    guard_data: str = betterproto.string_field(10)
    language: int = betterproto.uint32_field(11)
    qos_level: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class CAuthenticationBeginAuthSessionViaCredentialsResponse(betterproto.Message):
    client_id: int = betterproto.uint64_field(1)
    request_id: bytes = betterproto.bytes_field(2)
    interval: float = betterproto.float_field(3)
    allowed_confirmations: List[
        "CAuthenticationAllowedConfirmation"
    ] = betterproto.message_field(4)
    steamid: int = betterproto.uint64_field(5)
    weak_token: str = betterproto.string_field(6)
    agreement_session_url: str = betterproto.string_field(7)
    extended_error_message: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class CAuthenticationPollAuthSessionStatusRequest(betterproto.Message):
    client_id: int = betterproto.uint64_field(1)
    request_id: bytes = betterproto.bytes_field(2)
    token_to_revoke: int = betterproto.fixed64_field(3)


@dataclass(eq=False, repr=False)
class CAuthenticationPollAuthSessionStatusResponse(betterproto.Message):
    new_client_id: int = betterproto.uint64_field(1)
    new_challenge_url: str = betterproto.string_field(2)
    refresh_token: str = betterproto.string_field(3)
    access_token: str = betterproto.string_field(4)
    had_remote_interaction: bool = betterproto.bool_field(5)
    account_name: str = betterproto.string_field(6)
    new_guard_data: str = betterproto.string_field(7)
    agreement_session_url: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class CAuthenticationGetAuthSessionInfoRequest(betterproto.Message):
    client_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CAuthenticationGetAuthSessionInfoResponse(betterproto.Message):
    ip: str = betterproto.string_field(1)
    geoloc: str = betterproto.string_field(2)
    city: str = betterproto.string_field(3)
    state: str = betterproto.string_field(4)
    country: str = betterproto.string_field(5)
    platform_type: "EAuthTokenPlatformType" = betterproto.enum_field(6)
    device_friendly_name: str = betterproto.string_field(7)
    version: int = betterproto.int32_field(8)
    login_history: "EAuthSessionSecurityHistory" = betterproto.enum_field(9)
    requestor_location_mismatch: bool = betterproto.bool_field(10)
    high_usage_login: bool = betterproto.bool_field(11)
    requested_persistence: "ESessionPersistence" = betterproto.enum_field(12)


@dataclass(eq=False, repr=False)
class CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest(
    betterproto.Message
):
    version: int = betterproto.int32_field(1)
    client_id: int = betterproto.uint64_field(2)
    steamid: int = betterproto.fixed64_field(3)
    signature: bytes = betterproto.bytes_field(4)
    confirm: bool = betterproto.bool_field(5)
    persistence: "ESessionPersistence" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class CAuthenticationUpdateAuthSessionWithMobileConfirmationResponse(
    betterproto.Message
):
    pass


@dataclass(eq=False, repr=False)
class CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest(betterproto.Message):
    client_id: int = betterproto.uint64_field(1)
    steamid: int = betterproto.fixed64_field(2)
    code: str = betterproto.string_field(3)
    code_type: "EAuthSessionGuardType" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse(betterproto.Message):
    agreement_session_url: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class CAuthenticationAccessTokenGenerateForAppRequest(betterproto.Message):
    refresh_token: str = betterproto.string_field(1)
    steamid: int = betterproto.fixed64_field(2)
    renewal_type: "ETokenRenewalType" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class CAuthenticationAccessTokenGenerateForAppResponse(betterproto.Message):
    access_token: str = betterproto.string_field(1)
    refresh_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CAuthenticationRefreshTokenEnumerateRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CAuthenticationRefreshTokenEnumerateResponse(betterproto.Message):
    refresh_tokens: List[
        "CAuthenticationRefreshTokenEnumerateResponseRefreshTokenDescription"
    ] = betterproto.message_field(1)
    requesting_token: int = betterproto.fixed64_field(2)


@dataclass(eq=False, repr=False)
class CAuthenticationRefreshTokenEnumerateResponseTokenUsageEvent(betterproto.Message):
    time: int = betterproto.uint32_field(1)
    ip: "CMsgIpAddress" = betterproto.message_field(2)
    locale: str = betterproto.string_field(3)
    country: str = betterproto.string_field(4)
    state: str = betterproto.string_field(5)
    city: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class CAuthenticationRefreshTokenEnumerateResponseRefreshTokenDescription(
    betterproto.Message
):
    token_id: int = betterproto.fixed64_field(1)
    token_description: str = betterproto.string_field(2)
    time_updated: int = betterproto.uint32_field(3)
    platform_type: "EAuthTokenPlatformType" = betterproto.enum_field(4)
    logged_in: bool = betterproto.bool_field(5)
    os_platform: int = betterproto.uint32_field(6)
    auth_type: int = betterproto.uint32_field(7)
    gaming_device_type: int = betterproto.uint32_field(8)
    first_seen: "CAuthenticationRefreshTokenEnumerateResponseTokenUsageEvent" = (
        betterproto.message_field(9)
    )
    last_seen: "CAuthenticationRefreshTokenEnumerateResponseTokenUsageEvent" = (
        betterproto.message_field(10)
    )
    os_type: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class CAuthenticationGetAuthSessionsForAccountRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CAuthenticationGetAuthSessionsForAccountResponse(betterproto.Message):
    client_ids: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CAuthenticationMigrateMobileSessionRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    token: str = betterproto.string_field(2)
    signature: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CAuthenticationMigrateMobileSessionResponse(betterproto.Message):
    refresh_token: str = betterproto.string_field(1)
    access_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CAuthenticationTokenRevokeRequest(betterproto.Message):
    token: str = betterproto.string_field(1)
    revoke_action: "EAuthTokenRevokeAction" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class CAuthenticationTokenRevokeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CAuthenticationRefreshTokenRevokeRequest(betterproto.Message):
    token_id: int = betterproto.fixed64_field(1)
    steamid: int = betterproto.fixed64_field(2)
    revoke_action: "EAuthTokenRevokeAction" = betterproto.enum_field(3)
    signature: bytes = betterproto.bytes_field(4)


@dataclass(eq=False, repr=False)
class CAuthenticationRefreshTokenRevokeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CAuthenticationSupportQueryRefreshTokensByAccountRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    include_revoked_tokens: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CSupportRefreshTokenDescription(betterproto.Message):
    token_id: int = betterproto.fixed64_field(1)
    token_description: str = betterproto.string_field(2)
    time_updated: int = betterproto.uint32_field(3)
    platform_type: "EAuthTokenPlatformType" = betterproto.enum_field(4)
    token_state: "EAuthTokenState" = betterproto.enum_field(5)
    owner_steamid: int = betterproto.fixed64_field(6)
    os_platform: int = betterproto.uint32_field(7)
    os_type: int = betterproto.int32_field(8)
    auth_type: int = betterproto.uint32_field(9)
    gaming_device_type: int = betterproto.uint32_field(10)
    first_seen: "CSupportRefreshTokenDescriptionTokenUsageEvent" = (
        betterproto.message_field(11)
    )
    last_seen: "CSupportRefreshTokenDescriptionTokenUsageEvent" = (
        betterproto.message_field(12)
    )


@dataclass(eq=False, repr=False)
class CSupportRefreshTokenDescriptionTokenUsageEvent(betterproto.Message):
    time: int = betterproto.uint32_field(1)
    ip: "CMsgIpAddress" = betterproto.message_field(2)
    country: str = betterproto.string_field(3)
    state: str = betterproto.string_field(4)
    city: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class CAuthenticationSupportQueryRefreshTokensByAccountResponse(betterproto.Message):
    refresh_tokens: List["CSupportRefreshTokenDescription"] = betterproto.message_field(
        1
    )
    last_token_reset: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CAuthenticationSupportQueryRefreshTokenByIdRequest(betterproto.Message):
    token_id: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CAuthenticationSupportQueryRefreshTokenByIdResponse(betterproto.Message):
    refresh_tokens: List["CSupportRefreshTokenDescription"] = betterproto.message_field(
        1
    )


@dataclass(eq=False, repr=False)
class CAuthenticationSupportRevokeTokenRequest(betterproto.Message):
    token_id: int = betterproto.fixed64_field(1)
    steamid: int = betterproto.fixed64_field(2)


@dataclass(eq=False, repr=False)
class CAuthenticationSupportRevokeTokenResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CAuthenticationSupportGetTokenHistoryRequest(betterproto.Message):
    token_id: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CSupportRefreshTokenAudit(betterproto.Message):
    action: int = betterproto.int32_field(1)
    time: int = betterproto.uint32_field(2)
    ip: "CMsgIpAddress" = betterproto.message_field(3)
    actor: int = betterproto.fixed64_field(4)


@dataclass(eq=False, repr=False)
class CAuthenticationSupportGetTokenHistoryResponse(betterproto.Message):
    history: List["CSupportRefreshTokenAudit"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CCloudGamingCreateNonceRequest(betterproto.Message):
    platform: str = betterproto.string_field(1)
    appid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CCloudGamingCreateNonceResponse(betterproto.Message):
    nonce: str = betterproto.string_field(1)
    expiry: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CCloudGamingGetTimeRemainingRequest(betterproto.Message):
    platform: str = betterproto.string_field(1)
    appid_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CCloudGamingTimeRemaining(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    minutes_remaining: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CCloudGamingGetTimeRemainingResponse(betterproto.Message):
    entries: List["CCloudGamingTimeRemaining"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientFriendMsg(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    chat_entry_type: int = betterproto.int32_field(2)
    message: bytes = betterproto.bytes_field(3)
    rtime32_server_timestamp: int = betterproto.fixed32_field(4)
    echo_to_sender: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class CMsgClientFriendMsgIncoming(betterproto.Message):
    steamid_from: int = betterproto.fixed64_field(1)
    chat_entry_type: int = betterproto.int32_field(2)
    from_limited_account: bool = betterproto.bool_field(3)
    message: bytes = betterproto.bytes_field(4)
    rtime32_server_timestamp: int = betterproto.fixed32_field(5)


@dataclass(eq=False, repr=False)
class CMsgClientAddFriend(betterproto.Message):
    steamid_to_add: int = betterproto.fixed64_field(1)
    accountname_or_email_to_add: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientAddFriendResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    steam_id_added: int = betterproto.fixed64_field(2)
    persona_name_added: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientRemoveFriend(betterproto.Message):
    friendid: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientHideFriend(betterproto.Message):
    friendid: int = betterproto.fixed64_field(1)
    hide: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientFriendsList(betterproto.Message):
    bincremental: bool = betterproto.bool_field(1)
    friends: List["CMsgClientFriendsListFriend"] = betterproto.message_field(2)
    max_friend_count: int = betterproto.uint32_field(3)
    active_friend_count: int = betterproto.uint32_field(4)
    friends_limit_hit: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class CMsgClientFriendsListFriend(betterproto.Message):
    ulfriendid: int = betterproto.fixed64_field(1)
    efriendrelationship: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientFriendsGroupsList(betterproto.Message):
    bremoval: bool = betterproto.bool_field(1)
    bincremental: bool = betterproto.bool_field(2)
    friend_groups: List[
        "CMsgClientFriendsGroupsListFriendGroup"
    ] = betterproto.message_field(3)
    memberships: List[
        "CMsgClientFriendsGroupsListFriendGroupsMembership"
    ] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientFriendsGroupsListFriendGroup(betterproto.Message):
    n_group_id: int = betterproto.int32_field(1)
    str_group_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientFriendsGroupsListFriendGroupsMembership(betterproto.Message):
    ul_steam_id: int = betterproto.fixed64_field(1)
    n_group_id: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientPlayerNicknameList(betterproto.Message):
    removal: bool = betterproto.bool_field(1)
    incremental: bool = betterproto.bool_field(2)
    nicknames: List[
        "CMsgClientPlayerNicknameListPlayerNickname"
    ] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientPlayerNicknameListPlayerNickname(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    nickname: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientSetPlayerNickname(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    nickname: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientSetPlayerNicknameResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientRequestFriendData(betterproto.Message):
    persona_state_requested: int = betterproto.uint32_field(1)
    friends: List[int] = betterproto.fixed64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientChangeStatus(betterproto.Message):
    persona_state: int = betterproto.uint32_field(1)
    player_name: str = betterproto.string_field(2)
    is_auto_generated_name: bool = betterproto.bool_field(3)
    high_priority: bool = betterproto.bool_field(4)
    persona_set_by_user: bool = betterproto.bool_field(5)
    persona_state_flags: int = betterproto.uint32_field(6)
    need_persona_response: bool = betterproto.bool_field(7)
    is_client_idle: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class CMsgPersonaChangeResponse(betterproto.Message):
    result: int = betterproto.uint32_field(1)
    player_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientPersonaState(betterproto.Message):
    status_flags: int = betterproto.uint32_field(1)
    friends: List["CMsgClientPersonaStateFriend"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientPersonaStateFriend(betterproto.Message):
    friendid: int = betterproto.fixed64_field(1)
    persona_state: int = betterproto.uint32_field(2)
    game_played_app_id: int = betterproto.uint32_field(3)
    game_server_ip: int = betterproto.uint32_field(4)
    game_server_port: int = betterproto.uint32_field(5)
    persona_state_flags: int = betterproto.uint32_field(6)
    online_session_instances: int = betterproto.uint32_field(7)
    persona_set_by_user: bool = betterproto.bool_field(10)
    player_name: str = betterproto.string_field(15)
    query_port: int = betterproto.uint32_field(20)
    steamid_source: int = betterproto.fixed64_field(25)
    avatar_hash: bytes = betterproto.bytes_field(31)
    last_logoff: int = betterproto.uint32_field(45)
    last_logon: int = betterproto.uint32_field(46)
    last_seen_online: int = betterproto.uint32_field(47)
    clan_rank: int = betterproto.uint32_field(50)
    game_name: str = betterproto.string_field(55)
    gameid: int = betterproto.fixed64_field(56)
    game_data_blob: bytes = betterproto.bytes_field(60)
    clan_data: "CMsgClientPersonaStateFriendClanData" = betterproto.message_field(64)
    clan_tag: str = betterproto.string_field(65)
    rich_presence: List["CMsgClientPersonaStateFriendKv"] = betterproto.message_field(
        71
    )
    broadcast_id: int = betterproto.fixed64_field(72)
    game_lobby_id: int = betterproto.fixed64_field(73)
    watching_broadcast_accountid: int = betterproto.uint32_field(74)
    watching_broadcast_appid: int = betterproto.uint32_field(75)
    watching_broadcast_viewers: int = betterproto.uint32_field(76)
    watching_broadcast_title: str = betterproto.string_field(77)
    is_community_banned: bool = betterproto.bool_field(78)
    player_name_pending_review: bool = betterproto.bool_field(79)
    avatar_pending_review: bool = betterproto.bool_field(80)


@dataclass(eq=False, repr=False)
class CMsgClientPersonaStateFriendClanData(betterproto.Message):
    ogg_app_id: int = betterproto.uint32_field(1)
    chat_group_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientPersonaStateFriendKv(betterproto.Message):
    key: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientFriendProfileInfo(betterproto.Message):
    steamid_friend: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientFriendProfileInfoResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    steamid_friend: int = betterproto.fixed64_field(2)
    time_created: int = betterproto.uint32_field(3)
    real_name: str = betterproto.string_field(4)
    city_name: str = betterproto.string_field(5)
    state_name: str = betterproto.string_field(6)
    country_name: str = betterproto.string_field(7)
    headline: str = betterproto.string_field(8)
    summary: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class CMsgClientCreateFriendsGroup(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    groupname: str = betterproto.string_field(2)
    steamid_friends: List[int] = betterproto.fixed64_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientCreateFriendsGroupResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)
    groupid: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientDeleteFriendsGroup(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    groupid: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientDeleteFriendsGroupResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientManageFriendsGroup(betterproto.Message):
    groupid: int = betterproto.int32_field(1)
    groupname: str = betterproto.string_field(2)
    steamid_friends_added: List[int] = betterproto.fixed64_field(3)
    steamid_friends_removed: List[int] = betterproto.fixed64_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientManageFriendsGroupResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientAddFriendToGroup(betterproto.Message):
    groupid: int = betterproto.int32_field(1)
    steamiduser: int = betterproto.fixed64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientAddFriendToGroupResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientRemoveFriendFromGroup(betterproto.Message):
    groupid: int = betterproto.int32_field(1)
    steamiduser: int = betterproto.fixed64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientRemoveFriendFromGroupResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientGetEmoticonList(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientEmoticonList(betterproto.Message):
    emoticons: List["CMsgClientEmoticonListEmoticon"] = betterproto.message_field(1)
    stickers: List["CMsgClientEmoticonListSticker"] = betterproto.message_field(2)
    effects: List["CMsgClientEmoticonListEffect"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientEmoticonListEmoticon(betterproto.Message):
    name: str = betterproto.string_field(1)
    count: int = betterproto.int32_field(2)
    time_last_used: int = betterproto.uint32_field(3)
    use_count: int = betterproto.uint32_field(4)
    time_received: int = betterproto.uint32_field(5)
    appid: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CMsgClientEmoticonListSticker(betterproto.Message):
    name: str = betterproto.string_field(1)
    count: int = betterproto.int32_field(2)
    time_received: int = betterproto.uint32_field(3)
    appid: int = betterproto.uint32_field(4)
    time_last_used: int = betterproto.uint32_field(5)
    use_count: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CMsgClientEmoticonListEffect(betterproto.Message):
    name: str = betterproto.string_field(1)
    count: int = betterproto.int32_field(2)
    time_received: int = betterproto.uint32_field(3)
    infinite_use: bool = betterproto.bool_field(4)
    appid: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CChatRequestFriendPersonaStatesRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRequestFriendPersonaStatesResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomCreateChatRoomGroupRequest(betterproto.Message):
    steamid_partner: int = betterproto.fixed64_field(1)
    steamid_invited: int = betterproto.fixed64_field(2)
    name: str = betterproto.string_field(3)
    steamid_invitees: List[int] = betterproto.fixed64_field(4)
    watching_broadcast_accountid: int = betterproto.uint32_field(6)
    watching_broadcast_channel_id: int = betterproto.uint64_field(7)


@dataclass(eq=False, repr=False)
class CChatRole(betterproto.Message):
    role_id: int = betterproto.uint64_field(1)
    name: str = betterproto.string_field(2)
    ordinal: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CChatRoleActions(betterproto.Message):
    role_id: int = betterproto.uint64_field(1)
    can_create_rename_delete_channel: bool = betterproto.bool_field(2)
    can_kick: bool = betterproto.bool_field(3)
    can_ban: bool = betterproto.bool_field(4)
    can_invite: bool = betterproto.bool_field(5)
    can_change_tagline_avatar_name: bool = betterproto.bool_field(6)
    can_chat: bool = betterproto.bool_field(7)
    can_view_history: bool = betterproto.bool_field(8)
    can_change_group_roles: bool = betterproto.bool_field(9)
    can_change_user_roles: bool = betterproto.bool_field(10)
    can_mention_all: bool = betterproto.bool_field(11)
    can_set_watching_broadcast: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class CChatPartyBeacon(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)
    steamid_owner: int = betterproto.fixed64_field(2)
    beacon_id: int = betterproto.fixed64_field(3)
    game_metadata: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CChatRoomGroupHeaderState(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_name: str = betterproto.string_field(2)
    clanid: int = betterproto.uint32_field(13)
    accountid_owner: int = betterproto.uint32_field(14)
    appid: int = betterproto.uint32_field(21)
    tagline: str = betterproto.string_field(15)
    avatar_sha: bytes = betterproto.bytes_field(16)
    default_role_id: int = betterproto.uint64_field(17)
    roles: List["CChatRole"] = betterproto.message_field(18)
    role_actions: List["CChatRoleActions"] = betterproto.message_field(19)
    watching_broadcast_accountid: int = betterproto.uint32_field(20)
    party_beacons: List["CChatPartyBeacon"] = betterproto.message_field(22)
    watching_broadcast_channel_id: int = betterproto.uint64_field(23)
    active_minigame_id: int = betterproto.uint64_field(24)
    avatar_ugc_url: str = betterproto.string_field(25)
    disabled: bool = betterproto.bool_field(26)


@dataclass(eq=False, repr=False)
class CChatRoomMember(betterproto.Message):
    accountid: int = betterproto.uint32_field(1)
    state: "EChatRoomJoinState" = betterproto.enum_field(3)
    rank: "EChatRoomGroupRank" = betterproto.enum_field(4)
    time_kick_expire: int = betterproto.uint32_field(6)
    role_ids: List[int] = betterproto.uint64_field(7)


@dataclass(eq=False, repr=False)
class CChatRoomState(betterproto.Message):
    chat_id: int = betterproto.uint64_field(1)
    chat_name: str = betterproto.string_field(2)
    voice_allowed: bool = betterproto.bool_field(3)
    members_in_voice: List[int] = betterproto.uint32_field(4)
    time_last_message: int = betterproto.uint32_field(5)
    sort_order: int = betterproto.uint32_field(6)
    last_message: str = betterproto.string_field(7)
    accountid_last_message: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class CChatRoomGroupState(betterproto.Message):
    header_state: "CChatRoomGroupHeaderState" = betterproto.message_field(1)
    members: List["CChatRoomMember"] = betterproto.message_field(2)
    default_chat_id: int = betterproto.uint64_field(4)
    chat_rooms: List["CChatRoomState"] = betterproto.message_field(5)
    kicked: List["CChatRoomMember"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class CUserChatRoomState(betterproto.Message):
    chat_id: int = betterproto.uint64_field(1)
    time_joined: int = betterproto.uint32_field(2)
    time_last_ack: int = betterproto.uint32_field(3)
    desktop_notification_level: "EChatRoomNotificationLevel" = betterproto.enum_field(4)
    mobile_notification_level: "EChatRoomNotificationLevel" = betterproto.enum_field(5)
    time_last_mention: int = betterproto.uint32_field(6)
    unread_indicator_muted: bool = betterproto.bool_field(7)
    time_first_unread: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class CUserChatRoomGroupState(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    time_joined: int = betterproto.uint32_field(2)
    user_chat_room_state: List["CUserChatRoomState"] = betterproto.message_field(3)
    desktop_notification_level: "EChatRoomNotificationLevel" = betterproto.enum_field(4)
    mobile_notification_level: "EChatRoomNotificationLevel" = betterproto.enum_field(5)
    time_last_group_ack: int = betterproto.uint32_field(6)
    unread_indicator_muted: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class CChatRoomCreateChatRoomGroupResponse(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    state: "CChatRoomGroupState" = betterproto.message_field(2)
    user_chat_state: "CUserChatRoomGroupState" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomSaveChatRoomGroupRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomSaveChatRoomGroupResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomRenameChatRoomGroupRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomRenameChatRoomGroupResponse(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomSetChatRoomGroupTaglineRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    tagline: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomSetChatRoomGroupTaglineResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomSetChatRoomGroupAvatarRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    avatar_sha: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomSetChatRoomGroupAvatarResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomSetChatRoomGroupWatchingBroadcastRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    watching_broadcast_accountid: int = betterproto.uint32_field(2)
    watching_broadcast_channel_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomSetChatRoomGroupWatchingBroadcastResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomJoinMiniGameForChatRoomGroupRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomJoinMiniGameForChatRoomGroupResponse(betterproto.Message):
    minigame_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomEndMiniGameForChatRoomGroupRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    minigame_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomEndMiniGameForChatRoomGroupResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomMuteUserRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    steamid: int = betterproto.fixed64_field(2)
    expiration: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomMuteUserResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomKickUserRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    steamid: int = betterproto.fixed64_field(2)
    expiration: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomKickUserResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomSetUserBanStateRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    steamid: int = betterproto.fixed64_field(2)
    ban_state: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomSetUserBanStateResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomRevokeInviteRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    steamid: int = betterproto.fixed64_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomRevokeInviteResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomCreateRoleRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomCreateRoleResponse(betterproto.Message):
    actions: "CChatRoleActions" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomGetRolesRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomGetRolesResponse(betterproto.Message):
    roles: List["CChatRole"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomRenameRoleRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    role_id: int = betterproto.uint64_field(2)
    name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomRenameRoleResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomReorderRoleRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    role_id: int = betterproto.uint64_field(2)
    ordinal: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomReorderRoleResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomDeleteRoleRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    role_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomDeleteRoleResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomGetRoleActionsRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    role_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomGetRoleActionsResponse(betterproto.Message):
    actions: List["CChatRoleActions"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomReplaceRoleActionsRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    role_id: int = betterproto.uint64_field(2)
    actions: "CChatRoleActions" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CChatRoomReplaceRoleActionsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomAddRoleToUserRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    role_id: int = betterproto.uint64_field(3)
    steamid: int = betterproto.fixed64_field(4)


@dataclass(eq=False, repr=False)
class CChatRoomAddRoleToUserResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomGetRolesForUserRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    steamid: int = betterproto.fixed64_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomGetRolesForUserResponse(betterproto.Message):
    role_ids: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomDeleteRoleFromUserRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    role_id: int = betterproto.uint64_field(3)
    steamid: int = betterproto.fixed64_field(4)


@dataclass(eq=False, repr=False)
class CChatRoomDeleteRoleFromUserResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomJoinChatRoomGroupRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    invite_code: str = betterproto.string_field(2)
    chat_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomJoinChatRoomGroupResponse(betterproto.Message):
    state: "CChatRoomGroupState" = betterproto.message_field(1)
    user_chat_state: "CUserChatRoomGroupState" = betterproto.message_field(3)
    join_chat_id: int = betterproto.uint64_field(4)
    time_expire: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CChatRoomInviteFriendToChatRoomGroupRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    steamid: int = betterproto.fixed64_field(2)
    chat_id: int = betterproto.uint64_field(3)
    skip_friendsui_check: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CChatRoomInviteFriendToChatRoomGroupResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomLeaveChatRoomGroupRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomLeaveChatRoomGroupResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomCreateChatRoomRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    name: str = betterproto.string_field(2)
    allow_voice: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomCreateChatRoomResponse(betterproto.Message):
    chat_room: "CChatRoomState" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomDeleteChatRoomRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomDeleteChatRoomResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomRenameChatRoomRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomRenameChatRoomResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomReorderChatRoomRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    move_after_chat_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomReorderChatRoomResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomSendChatMessageRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    message: str = betterproto.string_field(3)
    echo_to_sender: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CChatRoomSendChatMessageResponse(betterproto.Message):
    modified_message: str = betterproto.string_field(1)
    server_timestamp: int = betterproto.uint32_field(2)
    ordinal: int = betterproto.uint32_field(3)
    message_without_bb_code: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CChatRoomJoinVoiceChatRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomJoinVoiceChatResponse(betterproto.Message):
    voice_chatid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomLeaveVoiceChatRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomLeaveVoiceChatResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomGetMessageHistoryRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    last_time: int = betterproto.uint32_field(3)
    last_ordinal: int = betterproto.uint32_field(4)
    start_time: int = betterproto.uint32_field(5)
    start_ordinal: int = betterproto.uint32_field(6)
    max_count: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ServerMessage(betterproto.Message):
    message: "EChatRoomServerMessage" = betterproto.enum_field(1)
    string_param: str = betterproto.string_field(2)
    accountid_param: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomGetMessageHistoryResponse(betterproto.Message):
    messages: List[
        "CChatRoomGetMessageHistoryResponseChatMessage"
    ] = betterproto.message_field(1)
    more_available: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CChatRoomGetMessageHistoryResponseChatMessage(betterproto.Message):
    sender: int = betterproto.uint32_field(1)
    server_timestamp: int = betterproto.uint32_field(2)
    message: str = betterproto.string_field(3)
    ordinal: int = betterproto.uint32_field(4)
    server_message: "ServerMessage" = betterproto.message_field(5)
    deleted: bool = betterproto.bool_field(6)
    reactions: List[
        "CChatRoomGetMessageHistoryResponseChatMessageMessageReaction"
    ] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class CChatRoomGetMessageHistoryResponseChatMessageMessageReaction(betterproto.Message):
    reaction_type: "EChatRoomMessageReactionType" = betterproto.enum_field(1)
    reaction: str = betterproto.string_field(2)
    num_reactors: int = betterproto.uint32_field(3)
    has_user_reacted: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CChatRoomGetMyChatRoomGroupsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomGetChatRoomGroupSummaryResponse(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_group_name: str = betterproto.string_field(2)
    active_member_count: int = betterproto.uint32_field(3)
    active_voice_member_count: int = betterproto.uint32_field(4)
    default_chat_id: int = betterproto.uint64_field(5)
    chat_rooms: List["CChatRoomState"] = betterproto.message_field(6)
    clanid: int = betterproto.uint32_field(7)
    chat_group_tagline: str = betterproto.string_field(8)
    accountid_owner: int = betterproto.uint32_field(9)
    top_members: List[int] = betterproto.uint32_field(10)
    chat_group_avatar_sha: bytes = betterproto.bytes_field(11)
    rank: "EChatRoomGroupRank" = betterproto.enum_field(12)
    default_role_id: int = betterproto.uint64_field(13)
    role_ids: List[int] = betterproto.uint64_field(14)
    role_actions: List["CChatRoleActions"] = betterproto.message_field(15)
    watching_broadcast_accountid: int = betterproto.uint32_field(16)
    appid: int = betterproto.uint32_field(17)
    party_beacons: List["CChatPartyBeacon"] = betterproto.message_field(18)
    watching_broadcast_channel_id: int = betterproto.uint64_field(19)
    active_minigame_id: int = betterproto.uint64_field(20)
    avatar_ugc_url: str = betterproto.string_field(21)
    disabled: bool = betterproto.bool_field(22)


@dataclass(eq=False, repr=False)
class CChatRoomSummaryPair(betterproto.Message):
    user_chat_group_state: "CUserChatRoomGroupState" = betterproto.message_field(1)
    group_summary: "CChatRoomGetChatRoomGroupSummaryResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class CChatRoomGetMyChatRoomGroupsResponse(betterproto.Message):
    chat_room_groups: List["CChatRoomSummaryPair"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomGetChatRoomGroupStateRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomGetChatRoomGroupStateResponse(betterproto.Message):
    state: "CChatRoomGroupState" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomGetChatRoomGroupSummaryRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomSetAppChatRoomGroupForceActiveRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    requesting_app_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomSetAppChatRoomGroupForceActiveResponse(betterproto.Message):
    result: int = betterproto.uint32_field(1)
    accounts_in_channel: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomSetAppChatRoomGroupStopForceActiveNotification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    requesting_app_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomAckChatMessageNotification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    timestamp: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomCreateInviteLinkRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    seconds_valid: int = betterproto.uint32_field(2)
    chat_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomCreateInviteLinkResponse(betterproto.Message):
    invite_code: str = betterproto.string_field(1)
    seconds_valid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomGetInviteLinkInfoRequest(betterproto.Message):
    invite_code: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomGetInviteLinkInfoResponse(betterproto.Message):
    steamid_sender: int = betterproto.fixed64_field(3)
    time_expires: int = betterproto.uint32_field(4)
    chat_id: int = betterproto.uint64_field(6)
    group_summary: "CChatRoomGetChatRoomGroupSummaryResponse" = (
        betterproto.message_field(8)
    )
    user_chat_group_state: "CUserChatRoomGroupState" = betterproto.message_field(9)
    time_kick_expire: int = betterproto.uint32_field(10)
    banned: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class CChatRoomGetInviteInfoRequest(betterproto.Message):
    steamid_invitee: int = betterproto.fixed64_field(1)
    chat_group_id: int = betterproto.uint64_field(2)
    chat_id: int = betterproto.uint64_field(3)
    invite_code: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CChatRoomGetInviteInfoResponse(betterproto.Message):
    group_summary: "CChatRoomGetChatRoomGroupSummaryResponse" = (
        betterproto.message_field(1)
    )
    time_kick_expire: int = betterproto.uint32_field(2)
    banned: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomGetInviteLinksForGroupRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomGetInviteLinksForGroupResponse(betterproto.Message):
    invite_links: List[
        "CChatRoomGetInviteLinksForGroupResponseLinkInfo"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomGetInviteLinksForGroupResponseLinkInfo(betterproto.Message):
    invite_code: str = betterproto.string_field(1)
    steamid_creator: int = betterproto.fixed64_field(2)
    time_expires: int = betterproto.uint32_field(3)
    chat_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class CChatRoomGetBanListRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomGetBanListResponse(betterproto.Message):
    bans: List["CChatRoomGetBanListResponseBanInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomGetBanListResponseBanInfo(betterproto.Message):
    accountid: int = betterproto.uint32_field(1)
    accountid_actor: int = betterproto.uint32_field(2)
    time_banned: int = betterproto.uint32_field(3)
    ban_reason: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CChatRoomGetInviteListRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomGroupInvite(betterproto.Message):
    accountid: int = betterproto.uint32_field(1)
    accountid_actor: int = betterproto.uint32_field(2)
    time_invited: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomGetInviteListResponse(betterproto.Message):
    invites: List["CChatRoomGroupInvite"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomDeleteInviteLinkRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    invite_code: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomDeleteInviteLinkResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomSetSessionActiveChatRoomGroupsRequest(betterproto.Message):
    chat_group_ids: List[int] = betterproto.uint64_field(1)
    chat_groups_data_requested: List[int] = betterproto.uint64_field(2)
    virtualize_members_threshold: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomSetSessionActiveChatRoomGroupsResponse(betterproto.Message):
    chat_states: List["CChatRoomGroupState"] = betterproto.message_field(1)
    virtualize_members_chat_group_ids: List[int] = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomSetUserChatGroupPreferencesRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_group_preferences: "CChatRoomSetUserChatGroupPreferencesRequestChatGroupPreferences" = betterproto.message_field(
        2
    )
    chat_room_preferences: List[
        "CChatRoomSetUserChatGroupPreferencesRequestChatRoomPreferences"
    ] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomSetUserChatGroupPreferencesRequestChatGroupPreferences(
    betterproto.Message
):
    desktop_notification_level: "EChatRoomNotificationLevel" = betterproto.enum_field(1)
    mobile_notification_level: "EChatRoomNotificationLevel" = betterproto.enum_field(2)
    unread_indicator_muted: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomSetUserChatGroupPreferencesRequestChatRoomPreferences(
    betterproto.Message
):
    chat_id: int = betterproto.uint64_field(1)
    desktop_notification_level: "EChatRoomNotificationLevel" = betterproto.enum_field(2)
    mobile_notification_level: "EChatRoomNotificationLevel" = betterproto.enum_field(3)
    unread_indicator_muted: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CChatRoomSetUserChatGroupPreferencesResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomDeleteChatMessagesRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    messages: List[
        "CChatRoomDeleteChatMessagesRequestMessage"
    ] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomDeleteChatMessagesRequestMessage(betterproto.Message):
    server_timestamp: int = betterproto.uint32_field(1)
    ordinal: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomDeleteChatMessagesResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CChatRoomUpdateMemberListViewNotification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    view_id: int = betterproto.uint64_field(2)
    start: int = betterproto.int32_field(3)
    end: int = betterproto.int32_field(4)
    client_changenumber: int = betterproto.int32_field(5)
    delete_view: bool = betterproto.bool_field(6)
    persona_subscribe_accountids: List[int] = betterproto.int32_field(7)
    persona_unsubscribe_accountids: List[int] = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class CChatRoomSearchMembersRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    search_id: int = betterproto.uint64_field(2)
    search_text: str = betterproto.string_field(3)
    max_results: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class CChatRoomSearchMembersResponse(betterproto.Message):
    matching_members: List[
        "CChatRoomSearchMembersResponseMemberMatch"
    ] = betterproto.message_field(1)
    status_flags: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomSearchMembersResponseMemberMatch(betterproto.Message):
    accountid: int = betterproto.int32_field(1)
    persona: "CMsgClientPersonaStateFriend" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CChatRoomUpdateMessageReactionRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    server_timestamp: int = betterproto.uint32_field(3)
    ordinal: int = betterproto.uint32_field(4)
    reaction_type: "EChatRoomMessageReactionType" = betterproto.enum_field(5)
    reaction: str = betterproto.string_field(6)
    is_add: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class CChatRoomUpdateMessageReactionResponse(betterproto.Message):
    num_reactors: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomGetMessageReactionReactorsRequest(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    server_timestamp: int = betterproto.uint32_field(3)
    ordinal: int = betterproto.uint32_field(4)
    reaction_type: "EChatRoomMessageReactionType" = betterproto.enum_field(5)
    reaction: str = betterproto.string_field(6)
    limit: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class CChatRoomGetMessageReactionReactorsResponse(betterproto.Message):
    reactors: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CClanChatRoomsGetClanChatRoomInfoRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    autocreate: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CClanChatRoomsGetClanChatRoomInfoResponse(betterproto.Message):
    chat_group_summary: "CChatRoomGetChatRoomGroupSummaryResponse" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class CClanChatRoomsSetClanChatRoomPrivateRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    chat_room_private: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CClanChatRoomsSetClanChatRoomPrivateResponse(betterproto.Message):
    chat_room_private: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CChatMentions(betterproto.Message):
    mention_all: bool = betterproto.bool_field(1)
    mention_here: bool = betterproto.bool_field(2)
    mention_accountids: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomIncomingChatMessageNotification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    steamid_sender: int = betterproto.fixed64_field(3)
    message: str = betterproto.string_field(4)
    timestamp: int = betterproto.uint32_field(5)
    mentions: "CChatMentions" = betterproto.message_field(6)
    ordinal: int = betterproto.uint32_field(7)
    server_message: "ServerMessage" = betterproto.message_field(8)
    message_no_bbcode: str = betterproto.string_field(9)
    chat_name: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class CChatRoomChatMessageModifiedNotification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    messages: List[
        "CChatRoomChatMessageModifiedNotificationChatMessage"
    ] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomChatMessageModifiedNotificationChatMessage(betterproto.Message):
    server_timestamp: int = betterproto.uint32_field(1)
    ordinal: int = betterproto.uint32_field(2)
    deleted: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomMemberStateChangeNotification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    member: "CChatRoomMember" = betterproto.message_field(2)
    change: "EChatRoomMemberStateChange" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomChatRoomHeaderStateNotification(betterproto.Message):
    header_state: "CChatRoomGroupHeaderState" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomChatRoomGroupRoomsChangeNotification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    default_chat_id: int = betterproto.uint64_field(2)
    chat_rooms: List["CChatRoomState"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification(betterproto.Message):
    chat_id: int = betterproto.uint64_field(1)
    chat_group_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class ChatRoomClientNotifyChatGroupUserStateChangedNotification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    user_chat_group_state: "CUserChatRoomGroupState" = betterproto.message_field(2)
    group_summary: "CChatRoomGetChatRoomGroupSummaryResponse" = (
        betterproto.message_field(3)
    )
    user_action: "EChatRoomMemberStateChange" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class ChatRoomClientNotifyChatRoomDisconnectNotification(betterproto.Message):
    chat_group_ids: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CChatRoomMemberListView(betterproto.Message):
    start: int = betterproto.int32_field(3)
    end: int = betterproto.int32_field(4)
    total_count: int = betterproto.int32_field(5)
    client_changenumber: int = betterproto.int32_field(6)
    server_changenumber: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class CChatRoomMemberSummaryCounts(betterproto.Message):
    ingame: int = betterproto.int32_field(1)
    online: int = betterproto.int32_field(2)
    offline: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomClientMemberListViewUpdatedNotification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    view_id: int = betterproto.uint64_field(2)
    view: "CChatRoomMemberListView" = betterproto.message_field(3)
    members: List[
        "CChatRoomClientMemberListViewUpdatedNotificationMemberListViewEntry"
    ] = betterproto.message_field(4)
    status_flags: int = betterproto.uint32_field(5)
    member_summary: "CChatRoomMemberSummaryCounts" = betterproto.message_field(6)
    subscribed_personas: List[
        "CMsgClientPersonaStateFriend"
    ] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class CChatRoomClientMemberListViewUpdatedNotificationMemberListViewEntry(
    betterproto.Message
):
    rank: int = betterproto.int32_field(1)
    accountid: int = betterproto.uint32_field(2)
    persona: "CMsgClientPersonaStateFriend" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CChatRoomMessageReactionNotification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    server_timestamp: int = betterproto.uint32_field(3)
    ordinal: int = betterproto.uint32_field(4)
    reactor: int = betterproto.fixed64_field(5)
    reaction_type: "EChatRoomMessageReactionType" = betterproto.enum_field(6)
    reaction: str = betterproto.string_field(7)
    is_add: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class CChatUsabilityClientUsabilityMetricsNotification(betterproto.Message):
    metrics_run_id: int = betterproto.uint32_field(1)
    client_build: int = betterproto.uint32_field(2)
    metrics_version: int = betterproto.uint32_field(3)
    in_web: bool = betterproto.bool_field(4)
    settings: "CChatUsabilityClientUsabilityMetricsNotificationSettings" = (
        betterproto.message_field(10)
    )
    voice_settings: "CChatUsabilityClientUsabilityMetricsNotificationVoiceSettings" = (
        betterproto.message_field(11)
    )
    ui_state: "CChatUsabilityClientUsabilityMetricsNotificationUiState" = (
        betterproto.message_field(12)
    )
    metrics: "CChatUsabilityClientUsabilityMetricsNotificationMetrics" = (
        betterproto.message_field(13)
    )


@dataclass(eq=False, repr=False)
class CChatUsabilityClientUsabilityMetricsNotificationSettings(betterproto.Message):
    notifications_show_ingame: bool = betterproto.bool_field(1)
    notifications_show_online: bool = betterproto.bool_field(2)
    notifications_show_message: bool = betterproto.bool_field(3)
    notifications_events_and_announcements: bool = betterproto.bool_field(4)
    sounds_play_ingame: bool = betterproto.bool_field(5)
    sounds_play_online: bool = betterproto.bool_field(6)
    sounds_play_message: bool = betterproto.bool_field(7)
    sounds_events_and_announcements: bool = betterproto.bool_field(8)
    always_new_chat_window: bool = betterproto.bool_field(9)
    force_alphabetic_friend_sorting: bool = betterproto.bool_field(10)
    chat_flash_mode: int = betterproto.int32_field(11)
    remember_open_chats: bool = betterproto.bool_field(12)
    compact_quick_access: bool = betterproto.bool_field(13)
    compact_friends_list: bool = betterproto.bool_field(14)
    notifications_show_chat_room_notification: bool = betterproto.bool_field(15)
    sounds_play_chat_room_notification: bool = betterproto.bool_field(16)
    hide_offline_friends_in_tag_groups: bool = betterproto.bool_field(17)
    hide_categorized_friends: bool = betterproto.bool_field(18)
    categorize_in_game_friends_by_game: bool = betterproto.bool_field(19)
    chat_font_size: int = betterproto.int32_field(20)
    use24_hour_clock: bool = betterproto.bool_field(21)
    do_not_disturb_mode: bool = betterproto.bool_field(22)
    disable_embed_inlining: bool = betterproto.bool_field(23)
    sign_into_friends: bool = betterproto.bool_field(24)
    animated_avatars: bool = betterproto.bool_field(25)


@dataclass(eq=False, repr=False)
class CChatUsabilityClientUsabilityMetricsNotificationVoiceSettings(
    betterproto.Message
):
    voice_input_gain: float = betterproto.float_field(1)
    voice_output_gain: float = betterproto.float_field(2)
    noise_gate_level: int = betterproto.int32_field(3)
    voice_use_echo_cancellation: bool = betterproto.bool_field(4)
    voice_use_noise_cancellation: bool = betterproto.bool_field(5)
    voice_use_auto_gain_control: bool = betterproto.bool_field(6)
    selected_non_default_mic: bool = betterproto.bool_field(7)
    selected_non_default_output: bool = betterproto.bool_field(8)
    push_to_talk_enabled: bool = betterproto.bool_field(9)
    push_to_mute_enabled: bool = betterproto.bool_field(10)
    play_ptt_sounds: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class CChatUsabilityClientUsabilityMetricsNotificationUiState(betterproto.Message):
    friends_list_height: int = betterproto.int32_field(1)
    friends_list_width: int = betterproto.int32_field(2)
    friends_list_docked: bool = betterproto.bool_field(3)
    friends_list_collapsed: bool = betterproto.bool_field(4)
    friends_list_group_chats_height: int = betterproto.int32_field(5)
    friends_list_visible: bool = betterproto.bool_field(6)
    chat_popups_opened: int = betterproto.int32_field(7)
    group_chat_tabs_opened: int = betterproto.int32_field(8)
    friend_chat_tabs_opened: int = betterproto.int32_field(9)
    chat_window_width: int = betterproto.int32_field(10)
    chat_window_height: int = betterproto.int32_field(11)
    category_collapse: "CChatUsabilityClientUsabilityMetricsNotificationUiStateCategoryCollapseState" = betterproto.message_field(
        12
    )
    group_chat_left_col_collapsed: int = betterproto.int32_field(13)
    group_chat_right_col_collapsed: int = betterproto.int32_field(14)
    in_one_on_one_voice_chat: bool = betterproto.bool_field(15)
    in_group_voice_chat: bool = betterproto.bool_field(16)


@dataclass(eq=False, repr=False)
class CChatUsabilityClientUsabilityMetricsNotificationUiStateCategoryCollapseState(
    betterproto.Message
):
    in_game_collapsed: bool = betterproto.bool_field(1)
    online_collapsed: bool = betterproto.bool_field(2)
    offline_collapsed: bool = betterproto.bool_field(3)
    game_groups_collapsed: int = betterproto.int32_field(4)
    categories_collapsed: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class CChatUsabilityClientUsabilityMetricsNotificationMetrics(betterproto.Message):
    friends_count: int = betterproto.int32_field(1)
    friends_category_count: int = betterproto.int32_field(2)
    friends_categorized_count: int = betterproto.int32_field(3)
    friends_online_count: int = betterproto.int32_field(4)
    friends_in_game_count: int = betterproto.int32_field(5)
    friends_in_game_singleton_count: int = betterproto.int32_field(6)
    game_group_count: int = betterproto.int32_field(7)
    friends_favorite_count: int = betterproto.int32_field(8)
    group_chat_count: int = betterproto.int32_field(9)
    group_chat_favorite_count: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class CChatUsabilityRequestClientUsabilityMetricsNotification(betterproto.Message):
    metrics_run_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientRegisterAuthTicketWithCm(betterproto.Message):
    protocol_version: int = betterproto.uint32_field(1)
    ticket: bytes = betterproto.bytes_field(3)
    client_instance_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientTicketAuthComplete(betterproto.Message):
    steam_id: int = betterproto.fixed64_field(1)
    game_id: int = betterproto.fixed64_field(2)
    estate: int = betterproto.uint32_field(3)
    eauth_session_response: int = betterproto.uint32_field(4)
    deprecated_ticket: bytes = betterproto.bytes_field(5)
    ticket_crc: int = betterproto.uint32_field(6)
    ticket_sequence: int = betterproto.uint32_field(7)
    owner_steam_id: int = betterproto.fixed64_field(8)


@dataclass(eq=False, repr=False)
class CMsgClientCmList(betterproto.Message):
    cm_addresses: List[int] = betterproto.uint32_field(1)
    cm_ports: List[int] = betterproto.uint32_field(2)
    cm_websocket_addresses: List[str] = betterproto.string_field(3)
    percent_default_to_websocket: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientP2PConnectionInfo(betterproto.Message):
    steam_id_dest: int = betterproto.fixed64_field(1)
    steam_id_src: int = betterproto.fixed64_field(2)
    app_id: int = betterproto.uint32_field(3)
    candidate: bytes = betterproto.bytes_field(4)
    legacy_connection_id_src: int = betterproto.fixed64_field(5)
    rendezvous: bytes = betterproto.bytes_field(6)


@dataclass(eq=False, repr=False)
class CMsgClientP2PConnectionFailInfo(betterproto.Message):
    steam_id_dest: int = betterproto.fixed64_field(1)
    steam_id_src: int = betterproto.fixed64_field(2)
    app_id: int = betterproto.uint32_field(3)
    ep2_p_session_error: int = betterproto.uint32_field(4)
    connection_id_dest: int = betterproto.fixed64_field(5)
    close_reason: int = betterproto.uint32_field(7)
    close_message: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class CMsgClientNetworkingCertRequest(betterproto.Message):
    key_data: bytes = betterproto.bytes_field(2)
    app_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientNetworkingCertReply(betterproto.Message):
    cert: bytes = betterproto.bytes_field(4)
    ca_key_id: int = betterproto.fixed64_field(5)
    ca_signature: bytes = betterproto.bytes_field(6)


@dataclass(eq=False, repr=False)
class CMsgClientNetworkingMobileCertRequest(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientNetworkingMobileCertReply(betterproto.Message):
    encoded_cert: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientGetAppOwnershipTicket(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientGetAppOwnershipTicketResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)
    app_id: int = betterproto.uint32_field(2)
    ticket: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientSessionToken(betterproto.Message):
    token: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientGameConnectTokens(betterproto.Message):
    max_tokens_to_keep: int = betterproto.uint32_field(1)
    tokens: List[bytes] = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientGamesPlayed(betterproto.Message):
    games_played: List["CMsgClientGamesPlayedGamePlayed"] = betterproto.message_field(1)
    client_os_type: int = betterproto.uint32_field(2)
    cloud_gaming_platform: int = betterproto.uint32_field(3)
    recent_reauthentication: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientGamesPlayedProcessInfo(betterproto.Message):
    process_id: int = betterproto.uint32_field(1)
    process_id_parent: int = betterproto.uint32_field(2)
    parent_is_steam: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientGamesPlayedGamePlayed(betterproto.Message):
    steam_id_gs: int = betterproto.uint64_field(1)
    game_id: int = betterproto.fixed64_field(2)
    deprecated_game_ip_address: int = betterproto.uint32_field(3)
    game_port: int = betterproto.uint32_field(4)
    is_secure: bool = betterproto.bool_field(5)
    token: bytes = betterproto.bytes_field(6)
    game_extra_info: str = betterproto.string_field(7)
    game_data_blob: bytes = betterproto.bytes_field(8)
    process_id: int = betterproto.uint32_field(9)
    streaming_provider_id: int = betterproto.uint32_field(10)
    game_flags: int = betterproto.uint32_field(11)
    owner_id: int = betterproto.uint32_field(12)
    vr_hmd_vendor: str = betterproto.string_field(13)
    vr_hmd_model: str = betterproto.string_field(14)
    launch_option_type: int = betterproto.uint32_field(15)
    primary_controller_type: int = betterproto.int32_field(16)
    primary_steam_controller_serial: str = betterproto.string_field(17)
    total_steam_controller_count: int = betterproto.uint32_field(18)
    total_non_steam_controller_count: int = betterproto.uint32_field(19)
    controller_workshop_file_id: int = betterproto.uint64_field(20)
    launch_source: int = betterproto.uint32_field(21)
    vr_hmd_runtime: int = betterproto.uint32_field(22)
    game_ip_address: "CMsgIpAddress" = betterproto.message_field(23)
    controller_connection_type: int = betterproto.uint32_field(24)
    game_os_platform: int = betterproto.int32_field(25)
    game_build_id: int = betterproto.uint32_field(26)
    compat_tool_id: int = betterproto.uint32_field(27)
    compat_tool_cmd: str = betterproto.string_field(28)
    compat_tool_build_id: int = betterproto.uint32_field(29)
    beta_name: str = betterproto.string_field(30)
    dlc_context: int = betterproto.uint32_field(31)
    process_id_list: List[
        "CMsgClientGamesPlayedProcessInfo"
    ] = betterproto.message_field(32)


@dataclass(eq=False, repr=False)
class CMsgGsApprove(betterproto.Message):
    steam_id: int = betterproto.fixed64_field(1)
    owner_steam_id: int = betterproto.fixed64_field(2)


@dataclass(eq=False, repr=False)
class CMsgGsDeny(betterproto.Message):
    steam_id: int = betterproto.fixed64_field(1)
    edeny_reason: int = betterproto.int32_field(2)
    deny_string: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CMsgGsKick(betterproto.Message):
    steam_id: int = betterproto.fixed64_field(1)
    edeny_reason: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientAuthList(betterproto.Message):
    tokens_left: int = betterproto.uint32_field(1)
    last_request_seq: int = betterproto.uint32_field(2)
    last_request_seq_from_server: int = betterproto.uint32_field(3)
    tickets: List["CMsgAuthTicket"] = betterproto.message_field(4)
    app_ids: List[int] = betterproto.uint32_field(5)
    message_sequence: int = betterproto.uint32_field(6)
    filtered: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class CMsgClientAuthListAck(betterproto.Message):
    ticket_crc: List[int] = betterproto.uint32_field(1)
    app_ids: List[int] = betterproto.uint32_field(2)
    message_sequence: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientLicenseList(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    licenses: List["CMsgClientLicenseListLicense"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientLicenseListLicense(betterproto.Message):
    package_id: int = betterproto.uint32_field(1)
    time_created: int = betterproto.fixed32_field(2)
    time_next_process: int = betterproto.fixed32_field(3)
    minute_limit: int = betterproto.int32_field(4)
    minutes_used: int = betterproto.int32_field(5)
    payment_method: int = betterproto.uint32_field(6)
    flags: int = betterproto.uint32_field(7)
    purchase_country_code: str = betterproto.string_field(8)
    license_type: int = betterproto.uint32_field(9)
    territory_code: int = betterproto.int32_field(10)
    change_number: int = betterproto.int32_field(11)
    owner_id: int = betterproto.uint32_field(12)
    initial_period: int = betterproto.uint32_field(13)
    initial_time_unit: int = betterproto.uint32_field(14)
    renewal_period: int = betterproto.uint32_field(15)
    renewal_time_unit: int = betterproto.uint32_field(16)
    access_token: int = betterproto.uint64_field(17)
    master_package_id: int = betterproto.uint32_field(18)


@dataclass(eq=False, repr=False)
class CMsgClientIsLimitedAccount(betterproto.Message):
    bis_limited_account: bool = betterproto.bool_field(1)
    bis_community_banned: bool = betterproto.bool_field(2)
    bis_locked_account: bool = betterproto.bool_field(3)
    bis_limited_account_allowed_to_invite_friends: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientRequestedClientStats(betterproto.Message):
    stats_to_send: List[
        "CMsgClientRequestedClientStatsStatsToSend"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientRequestedClientStatsStatsToSend(betterproto.Message):
    client_stat: int = betterproto.uint32_field(1)
    stat_aggregate_method: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientStat2(betterproto.Message):
    stat_detail: List["CMsgClientStat2StatDetail"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientStat2StatDetail(betterproto.Message):
    client_stat: int = betterproto.uint32_field(1)
    ll_value: int = betterproto.int64_field(2)
    time_of_day: int = betterproto.uint32_field(3)
    cell_id: int = betterproto.uint32_field(4)
    depot_id: int = betterproto.uint32_field(5)
    app_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CMsgClientInviteToGame(betterproto.Message):
    steam_id_dest: int = betterproto.fixed64_field(1)
    steam_id_src: int = betterproto.fixed64_field(2)
    connect_string: str = betterproto.string_field(3)
    remote_play: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientChatInvite(betterproto.Message):
    steam_id_invited: int = betterproto.fixed64_field(1)
    steam_id_chat: int = betterproto.fixed64_field(2)
    steam_id_patron: int = betterproto.fixed64_field(3)
    chatroom_type: int = betterproto.int32_field(4)
    steam_id_friend_chat: int = betterproto.fixed64_field(5)
    chat_name: str = betterproto.string_field(6)
    game_id: int = betterproto.fixed64_field(7)


@dataclass(eq=False, repr=False)
class CMsgClientConnectionStats(betterproto.Message):
    stats_logon: "CMsgClientConnectionStatsStatsLogon" = betterproto.message_field(1)
    stats_vconn: "CMsgClientConnectionStatsStatsVConn" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientConnectionStatsStatsLogon(betterproto.Message):
    connect_attempts: int = betterproto.int32_field(1)
    connect_successes: int = betterproto.int32_field(2)
    connect_failures: int = betterproto.int32_field(3)
    connections_dropped: int = betterproto.int32_field(4)
    seconds_running: int = betterproto.uint32_field(5)
    msec_tologonthistime: int = betterproto.uint32_field(6)
    count_bad_cms: int = betterproto.uint32_field(7)
    no_udp_connectivity: bool = betterproto.bool_field(8)
    no_tcp_connectivity: bool = betterproto.bool_field(9)
    no_websocket_443_connectivity: bool = betterproto.bool_field(10)
    no_websocket_non_443_connectivity: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class CMsgClientConnectionStatsStatsUdp(betterproto.Message):
    pkts_sent: int = betterproto.uint64_field(1)
    bytes_sent: int = betterproto.uint64_field(2)
    pkts_recv: int = betterproto.uint64_field(3)
    pkts_processed: int = betterproto.uint64_field(4)
    bytes_recv: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class CMsgClientConnectionStatsStatsVConn(betterproto.Message):
    connections_udp: int = betterproto.uint32_field(1)
    connections_tcp: int = betterproto.uint32_field(2)
    stats_udp: "CMsgClientConnectionStatsStatsUdp" = betterproto.message_field(3)
    pkts_abandoned: int = betterproto.uint64_field(4)
    conn_req_received: int = betterproto.uint64_field(5)
    pkts_resent: int = betterproto.uint64_field(6)
    msgs_sent: int = betterproto.uint64_field(7)
    msgs_sent_failed: int = betterproto.uint64_field(8)
    msgs_recv: int = betterproto.uint64_field(9)
    datagrams_sent: int = betterproto.uint64_field(10)
    datagrams_recv: int = betterproto.uint64_field(11)
    bad_pkts_recv: int = betterproto.uint64_field(12)
    unknown_conn_pkts_recv: int = betterproto.uint64_field(13)
    missed_pkts_recv: int = betterproto.uint64_field(14)
    dup_pkts_recv: int = betterproto.uint64_field(15)
    failed_connect_challenges: int = betterproto.uint64_field(16)
    micro_sec_avg_latency: int = betterproto.uint32_field(17)
    micro_sec_min_latency: int = betterproto.uint32_field(18)
    micro_sec_max_latency: int = betterproto.uint32_field(19)


@dataclass(eq=False, repr=False)
class CMsgClientServersAvailable(betterproto.Message):
    server_types_available: List[
        "CMsgClientServersAvailableServerTypesAvailable"
    ] = betterproto.message_field(1)
    server_type_for_auth_services: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientServersAvailableServerTypesAvailable(betterproto.Message):
    server: int = betterproto.uint32_field(1)
    changed: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientReportOverlayDetourFailure(betterproto.Message):
    failure_strings: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientRequestEncryptedAppTicket(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)
    userdata: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientRequestEncryptedAppTicketResponse(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)
    eresult: int = betterproto.int32_field(2)
    encrypted_app_ticket: "EncryptedAppTicket" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientWalletInfoUpdate(betterproto.Message):
    has_wallet: bool = betterproto.bool_field(1)
    balance: int = betterproto.int32_field(2)
    currency: int = betterproto.int32_field(3)
    balance_delayed: int = betterproto.int32_field(4)
    balance64: int = betterproto.int64_field(5)
    balance64_delayed: int = betterproto.int64_field(6)
    realm: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class CMsgClientAmGetClanOfficers(betterproto.Message):
    steamid_clan: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientAmGetClanOfficersResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    steamid_clan: int = betterproto.fixed64_field(2)
    officer_count: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientAmGetPersonaNameHistory(betterproto.Message):
    id_count: int = betterproto.int32_field(1)
    ids: List[
        "CMsgClientAmGetPersonaNameHistoryIdInstance"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientAmGetPersonaNameHistoryIdInstance(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientAmGetPersonaNameHistoryResponse(betterproto.Message):
    responses: List[
        "CMsgClientAmGetPersonaNameHistoryResponseNameTableInstance"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientAmGetPersonaNameHistoryResponseNameTableInstance(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    steamid: int = betterproto.fixed64_field(2)
    names: List[
        "CMsgClientAmGetPersonaNameHistoryResponseNameTableInstanceNameInstance"
    ] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientAmGetPersonaNameHistoryResponseNameTableInstanceNameInstance(
    betterproto.Message
):
    name_since: int = betterproto.fixed32_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientDeregisterWithServer(betterproto.Message):
    eservertype: int = betterproto.uint32_field(1)
    app_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientClanState(betterproto.Message):
    steamid_clan: int = betterproto.fixed64_field(1)
    clan_account_flags: int = betterproto.uint32_field(3)
    name_info: "CMsgClientClanStateNameInfo" = betterproto.message_field(4)
    user_counts: "CMsgClientClanStateUserCounts" = betterproto.message_field(5)
    events: List["CMsgClientClanStateEvent"] = betterproto.message_field(6)
    announcements: List["CMsgClientClanStateEvent"] = betterproto.message_field(7)
    chat_room_private: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class CMsgClientClanStateNameInfo(betterproto.Message):
    clan_name: str = betterproto.string_field(1)
    sha_avatar: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientClanStateUserCounts(betterproto.Message):
    members: int = betterproto.uint32_field(1)
    online: int = betterproto.uint32_field(2)
    chatting: int = betterproto.uint32_field(3)
    in_game: int = betterproto.uint32_field(4)
    chat_room_members: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgClientClanStateEvent(betterproto.Message):
    gid: int = betterproto.fixed64_field(1)
    event_time: int = betterproto.uint32_field(2)
    headline: str = betterproto.string_field(3)
    game_id: int = betterproto.fixed64_field(4)
    just_posted: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class CMsgClientUpdateUserGameInfo(betterproto.Message):
    steamid_idgs: int = betterproto.fixed64_field(1)
    gameid: int = betterproto.fixed64_field(2)
    game_ip: int = betterproto.uint32_field(3)
    game_port: int = betterproto.uint32_field(4)
    token: bytes = betterproto.bytes_field(5)


@dataclass(eq=False, repr=False)
class CMsgClientRichPresenceUpload(betterproto.Message):
    rich_presence_kv: bytes = betterproto.bytes_field(1)
    steamid_broadcast: List[int] = betterproto.fixed64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientRichPresenceRequest(betterproto.Message):
    steamid_request: List[int] = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientRichPresenceInfo(betterproto.Message):
    rich_presence: List[
        "CMsgClientRichPresenceInfoRichPresence"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientRichPresenceInfoRichPresence(betterproto.Message):
    steamid_user: int = betterproto.fixed64_field(1)
    rich_presence_kv: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientCheckFileSignature(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientCheckFileSignatureResponse(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)
    pid: int = betterproto.uint32_field(2)
    eresult: int = betterproto.uint32_field(3)
    filename: str = betterproto.string_field(4)
    esignatureresult: int = betterproto.uint32_field(5)
    sha_file: bytes = betterproto.bytes_field(6)
    signatureheader: bytes = betterproto.bytes_field(7)
    filesize: int = betterproto.uint32_field(8)
    getlasterror: int = betterproto.uint32_field(9)
    evalvesignaturecheckdetail: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class CMsgClientReadMachineAuth(betterproto.Message):
    filename: str = betterproto.string_field(1)
    offset: int = betterproto.uint32_field(2)
    cubtoread: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientReadMachineAuthResponse(betterproto.Message):
    filename: str = betterproto.string_field(1)
    eresult: int = betterproto.uint32_field(2)
    filesize: int = betterproto.uint32_field(3)
    sha_file: bytes = betterproto.bytes_field(4)
    getlasterror: int = betterproto.uint32_field(5)
    offset: int = betterproto.uint32_field(6)
    cubread: int = betterproto.uint32_field(7)
    bytes_read: bytes = betterproto.bytes_field(8)
    filename_sentry: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class CMsgClientUpdateMachineAuth(betterproto.Message):
    filename: str = betterproto.string_field(1)
    offset: int = betterproto.uint32_field(2)
    cubtowrite: int = betterproto.uint32_field(3)
    bytes: builtins.bytes = betterproto.bytes_field(4)
    otp_type: int = betterproto.uint32_field(5)
    otp_identifier: str = betterproto.string_field(6)
    otp_sharedsecret: builtins.bytes = betterproto.bytes_field(7)
    otp_timedrift: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class CMsgClientUpdateMachineAuthResponse(betterproto.Message):
    filename: str = betterproto.string_field(1)
    eresult: int = betterproto.uint32_field(2)
    filesize: int = betterproto.uint32_field(3)
    sha_file: bytes = betterproto.bytes_field(4)
    getlasterror: int = betterproto.uint32_field(5)
    offset: int = betterproto.uint32_field(6)
    cubwrote: int = betterproto.uint32_field(7)
    otp_type: int = betterproto.int32_field(8)
    otp_value: int = betterproto.uint32_field(9)
    otp_identifier: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class CMsgClientRequestMachineAuth(betterproto.Message):
    filename: str = betterproto.string_field(1)
    eresult_sentryfile: int = betterproto.uint32_field(2)
    filesize: int = betterproto.uint32_field(3)
    sha_sentryfile: bytes = betterproto.bytes_field(4)
    lock_account_action: int = betterproto.int32_field(6)
    otp_type: int = betterproto.uint32_field(7)
    otp_identifier: str = betterproto.string_field(8)
    otp_sharedsecret: bytes = betterproto.bytes_field(9)
    otp_value: int = betterproto.uint32_field(10)
    machine_name: str = betterproto.string_field(11)
    machine_name_userchosen: str = betterproto.string_field(12)


@dataclass(eq=False, repr=False)
class CMsgClientRequestMachineAuthResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientRegisterKey(betterproto.Message):
    key: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientPurchaseResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    purchase_result_details: int = betterproto.int32_field(2)
    purchase_receipt_info: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientActivateOemLicense(betterproto.Message):
    bios_manufacturer: str = betterproto.string_field(1)
    bios_serialnumber: str = betterproto.string_field(2)
    license_file: bytes = betterproto.bytes_field(3)
    mainboard_manufacturer: str = betterproto.string_field(4)
    mainboard_product: str = betterproto.string_field(5)
    mainboard_serialnumber: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class CMsgClientRegisterOemMachine(betterproto.Message):
    oem_register_file: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientRegisterOemMachineResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientPurchaseWithMachineId(betterproto.Message):
    package_id: int = betterproto.uint32_field(1)
    machine_info: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CMsgTradingInitiateTradeRequest(betterproto.Message):
    trade_request_id: int = betterproto.uint32_field(1)
    other_steamid: int = betterproto.uint64_field(2)
    other_name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CMsgTradingInitiateTradeResponse(betterproto.Message):
    response: int = betterproto.uint32_field(1)
    trade_request_id: int = betterproto.uint32_field(2)
    other_steamid: int = betterproto.uint64_field(3)
    steamguard_required_days: int = betterproto.uint32_field(4)
    new_device_cooldown_days: int = betterproto.uint32_field(5)
    default_password_reset_probation_days: int = betterproto.uint32_field(6)
    password_reset_probation_days: int = betterproto.uint32_field(7)
    default_email_change_probation_days: int = betterproto.uint32_field(8)
    email_change_probation_days: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class CMsgTradingCancelTradeRequest(betterproto.Message):
    other_steamid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgTradingStartSession(betterproto.Message):
    other_steamid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientGetCdnAuthToken(betterproto.Message):
    depot_id: int = betterproto.uint32_field(1)
    host_name: str = betterproto.string_field(2)
    app_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientGetDepotDecryptionKey(betterproto.Message):
    depot_id: int = betterproto.uint32_field(1)
    app_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientGetDepotDecryptionKeyResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    depot_id: int = betterproto.uint32_field(2)
    depot_encryption_key: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientCheckAppBetaPassword(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)
    betapassword: str = betterproto.string_field(2)
    language: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientCheckAppBetaPasswordResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    betapasswords: List[
        "CMsgClientCheckAppBetaPasswordResponseBetaPassword"
    ] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientCheckAppBetaPasswordResponseBetaPassword(betterproto.Message):
    betaname: str = betterproto.string_field(1)
    betapassword: str = betterproto.string_field(2)
    betadescription: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientGetCdnAuthTokenResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)
    token: str = betterproto.string_field(2)
    expiration_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDownloadRateStatistics(betterproto.Message):
    cell_id: int = betterproto.uint32_field(1)
    stats: List["CMsgDownloadRateStatisticsStatsInfo"] = betterproto.message_field(2)
    throttling_kbps: int = betterproto.uint32_field(3)
    steam_realm: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgDownloadRateStatisticsStatsInfo(betterproto.Message):
    source_type: int = betterproto.uint32_field(1)
    source_id: int = betterproto.uint32_field(2)
    seconds: int = betterproto.uint32_field(3)
    bytes: int = betterproto.uint64_field(4)
    host_name: str = betterproto.string_field(5)
    microseconds: int = betterproto.uint64_field(6)
    used_ipv6: bool = betterproto.bool_field(7)
    proxied: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class CMsgClientRequestAccountData(betterproto.Message):
    account_or_email: str = betterproto.string_field(1)
    action: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientRequestAccountDataResponse(betterproto.Message):
    action: int = betterproto.uint32_field(1)
    eresult: int = betterproto.uint32_field(2)
    account_name: str = betterproto.string_field(3)
    ct_matches: int = betterproto.uint32_field(4)
    account_name_suggestion1: str = betterproto.string_field(5)
    account_name_suggestion2: str = betterproto.string_field(6)
    account_name_suggestion3: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class CMsgClientUgsGetGlobalStats(betterproto.Message):
    gameid: int = betterproto.uint64_field(1)
    history_days_requested: int = betterproto.uint32_field(2)
    time_last_requested: int = betterproto.fixed32_field(3)
    first_day_cached: int = betterproto.uint32_field(4)
    days_cached: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgClientUgsGetGlobalStatsResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    timestamp: int = betterproto.fixed32_field(2)
    day_current: int = betterproto.int32_field(3)
    days: List["CMsgClientUgsGetGlobalStatsResponseDay"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientUgsGetGlobalStatsResponseDay(betterproto.Message):
    day_id: int = betterproto.uint32_field(1)
    stats: List[
        "CMsgClientUgsGetGlobalStatsResponseDayStat"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientUgsGetGlobalStatsResponseDayStat(betterproto.Message):
    stat_id: int = betterproto.int32_field(1)
    data: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientRedeemGuestPass(betterproto.Message):
    guest_pass_id: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientRedeemGuestPassResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)
    package_id: int = betterproto.uint32_field(2)
    must_own_appid: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientGetClanActivityCounts(betterproto.Message):
    steamid_clans: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientGetClanActivityCountsResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientOgsReportString(betterproto.Message):
    accumulated: bool = betterproto.bool_field(1)
    sessionid: int = betterproto.uint64_field(2)
    severity: int = betterproto.int32_field(3)
    formatter: str = betterproto.string_field(4)
    varargs: bytes = betterproto.bytes_field(5)


@dataclass(eq=False, repr=False)
class CMsgClientOgsReportBug(betterproto.Message):
    sessionid: int = betterproto.uint64_field(1)
    bugtext: str = betterproto.string_field(2)
    screenshot: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientSentLogs(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgGcClient(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    msgtype: int = betterproto.uint32_field(2)
    payload: bytes = betterproto.bytes_field(3)
    steamid: int = betterproto.fixed64_field(4)
    gcname: str = betterproto.string_field(5)
    ip: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CMsgClientRequestFreeLicense(betterproto.Message):
    appids: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientRequestFreeLicenseResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)
    granted_packageids: List[int] = betterproto.uint32_field(2)
    granted_appids: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDrmDownloadRequestWithCrashData(betterproto.Message):
    download_flags: int = betterproto.uint32_field(1)
    download_types_known: int = betterproto.uint32_field(2)
    guid_drm: bytes = betterproto.bytes_field(3)
    guid_split: bytes = betterproto.bytes_field(4)
    guid_merge: bytes = betterproto.bytes_field(5)
    module_name: str = betterproto.string_field(6)
    module_path: str = betterproto.string_field(7)
    crash_data: bytes = betterproto.bytes_field(8)


@dataclass(eq=False, repr=False)
class CMsgDrmDownloadResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)
    app_id: int = betterproto.uint32_field(2)
    blob_download_type: int = betterproto.uint32_field(3)
    merge_guid: bytes = betterproto.bytes_field(4)
    download_file_dfs_ip: int = betterproto.uint32_field(5)
    download_file_dfs_port: int = betterproto.uint32_field(6)
    download_file_url: str = betterproto.string_field(7)
    module_path: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class CMsgDrmFinalResult(betterproto.Message):
    e_result: int = betterproto.uint32_field(1)
    app_id: int = betterproto.uint32_field(2)
    blob_download_type: int = betterproto.uint32_field(3)
    error_detail: int = betterproto.uint32_field(4)
    merge_guid: bytes = betterproto.bytes_field(5)
    download_file_dfs_ip: int = betterproto.uint32_field(6)
    download_file_dfs_port: int = betterproto.uint32_field(7)
    download_file_url: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class CMsgClientDpCheckSpecialSurvey(betterproto.Message):
    survey_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientDpCheckSpecialSurveyResponse(betterproto.Message):
    e_result: int = betterproto.uint32_field(1)
    state: int = betterproto.uint32_field(2)
    name: str = betterproto.string_field(3)
    custom_url: str = betterproto.string_field(4)
    include_software: bool = betterproto.bool_field(5)
    token: bytes = betterproto.bytes_field(6)


@dataclass(eq=False, repr=False)
class CMsgClientDpSendSpecialSurveyResponse(betterproto.Message):
    survey_id: int = betterproto.uint32_field(1)
    data: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientDpSendSpecialSurveyResponseReply(betterproto.Message):
    e_result: int = betterproto.uint32_field(1)
    token: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientRequestForgottenPasswordEmail(betterproto.Message):
    account_name: str = betterproto.string_field(1)
    password_tried: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientRequestForgottenPasswordEmailResponse(betterproto.Message):
    e_result: int = betterproto.uint32_field(1)
    use_secret_question: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientItemAnnouncements(betterproto.Message):
    count_new_items: int = betterproto.uint32_field(1)
    unseen_items: List[
        "CMsgClientItemAnnouncementsUnseenItem"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientItemAnnouncementsUnseenItem(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    context_id: int = betterproto.uint64_field(2)
    asset_id: int = betterproto.uint64_field(3)
    amount: int = betterproto.uint64_field(4)
    rtime32_gained: int = betterproto.fixed32_field(5)
    source_appid: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CMsgClientRequestItemAnnouncements(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientUserNotifications(betterproto.Message):
    notifications: List[
        "CMsgClientUserNotificationsNotification"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientUserNotificationsNotification(betterproto.Message):
    user_notification_type: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientCommentNotifications(betterproto.Message):
    count_new_comments: int = betterproto.uint32_field(1)
    count_new_comments_owner: int = betterproto.uint32_field(2)
    count_new_comments_subscriptions: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientRequestCommentNotifications(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientOfflineMessageNotification(betterproto.Message):
    offline_messages: int = betterproto.uint32_field(1)
    friends_with_offline_messages: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientRequestOfflineMessageCount(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientChatGetFriendMessageHistory(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientChatGetFriendMessageHistoryResponse(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    success: int = betterproto.uint32_field(2)
    messages: List[
        "CMsgClientChatGetFriendMessageHistoryResponseFriendMessage"
    ] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientChatGetFriendMessageHistoryResponseFriendMessage(betterproto.Message):
    accountid: int = betterproto.uint32_field(1)
    timestamp: int = betterproto.uint32_field(2)
    message: str = betterproto.string_field(3)
    unread: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientChatGetFriendMessageHistoryForOfflineMessages(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientFsGetFriendsSteamLevels(betterproto.Message):
    accountids: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientFsGetFriendsSteamLevelsResponse(betterproto.Message):
    friends: List[
        "CMsgClientFsGetFriendsSteamLevelsResponseFriend"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientFsGetFriendsSteamLevelsResponseFriend(betterproto.Message):
    accountid: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientEmailAddrInfo(betterproto.Message):
    email_address: str = betterproto.string_field(1)
    email_is_validated: bool = betterproto.bool_field(2)
    email_validation_changed: bool = betterproto.bool_field(3)
    credential_change_requires_code: bool = betterproto.bool_field(4)
    password_or_secretqa_change_requires_code: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class CMsgCreItemVoteSummary(betterproto.Message):
    published_file_ids: List[
        "CMsgCreItemVoteSummaryPublishedFileId"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgCreItemVoteSummaryPublishedFileId(betterproto.Message):
    published_file_id: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgCreItemVoteSummaryResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    item_vote_summaries: List[
        "CMsgCreItemVoteSummaryResponseItemVoteSummary"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgCreItemVoteSummaryResponseItemVoteSummary(betterproto.Message):
    published_file_id: int = betterproto.fixed64_field(1)
    votes_for: int = betterproto.int32_field(2)
    votes_against: int = betterproto.int32_field(3)
    reports: int = betterproto.int32_field(4)
    score: float = betterproto.float_field(5)


@dataclass(eq=False, repr=False)
class CMsgCreUpdateUserPublishedItemVote(betterproto.Message):
    published_file_id: int = betterproto.fixed64_field(1)
    vote_up: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgCreUpdateUserPublishedItemVoteResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class CMsgCreGetUserPublishedItemVoteDetails(betterproto.Message):
    published_file_ids: List[
        "CMsgCreGetUserPublishedItemVoteDetailsPublishedFileId"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgCreGetUserPublishedItemVoteDetailsPublishedFileId(betterproto.Message):
    published_file_id: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgCreGetUserPublishedItemVoteDetailsResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    user_item_vote_details: List[
        "CMsgCreGetUserPublishedItemVoteDetailsResponseUserItemVoteDetail"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgCreGetUserPublishedItemVoteDetailsResponseUserItemVoteDetail(
    betterproto.Message
):
    published_file_id: int = betterproto.fixed64_field(1)
    vote: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CMsgFsGetFollowerCount(betterproto.Message):
    steam_id: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgFsGetFollowerCountResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    count: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CMsgFsGetIsFollowing(betterproto.Message):
    steam_id: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgFsGetIsFollowingResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    is_following: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgFsEnumerateFollowingList(betterproto.Message):
    start_index: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgFsEnumerateFollowingListResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    total_results: int = betterproto.int32_field(2)
    steam_ids: List[int] = betterproto.fixed64_field(3)


@dataclass(eq=False, repr=False)
class CMsgDpGetNumberOfCurrentPlayers(betterproto.Message):
    appid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDpGetNumberOfCurrentPlayersResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    player_count: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientFriendUserStatusPublished(betterproto.Message):
    friend_steamid: int = betterproto.fixed64_field(1)
    appid: int = betterproto.uint32_field(2)
    status_text: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientServiceMethodLegacy(betterproto.Message):
    method_name: str = betterproto.string_field(1)
    serialized_method: bytes = betterproto.bytes_field(2)
    is_notification: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientServiceMethodLegacyResponse(betterproto.Message):
    method_name: str = betterproto.string_field(1)
    serialized_method_response: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientUiMode(betterproto.Message):
    uimode: int = betterproto.uint32_field(1)
    chat_mode: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientVanityUrlChangedNotification(betterproto.Message):
    vanity_url: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientAuthorizeLocalDeviceRequest(betterproto.Message):
    device_description: str = betterproto.string_field(1)
    owner_account_id: int = betterproto.uint32_field(2)
    local_device_token: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientAuthorizeLocalDevice(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    owner_account_id: int = betterproto.uint32_field(2)
    authed_device_token: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientAuthorizeLocalDeviceNotification(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    owner_account_id: int = betterproto.uint32_field(2)
    local_device_token: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientDeauthorizeDeviceRequest(betterproto.Message):
    deauthorization_account_id: int = betterproto.uint32_field(1)
    deauthorization_device_token: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientDeauthorizeDevice(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    deauthorization_account_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientUseLocalDeviceAuthorizations(betterproto.Message):
    authorization_account_id: List[int] = betterproto.uint32_field(1)
    device_tokens: List[
        "CMsgClientUseLocalDeviceAuthorizationsDeviceToken"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientUseLocalDeviceAuthorizationsDeviceToken(betterproto.Message):
    owner_account_id: int = betterproto.uint32_field(1)
    token_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientGetAuthorizedDevices(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientGetAuthorizedDevicesResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    authorized_device: List[
        "CMsgClientGetAuthorizedDevicesResponseAuthorizedDevice"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientGetAuthorizedDevicesResponseAuthorizedDevice(betterproto.Message):
    auth_device_token: int = betterproto.uint64_field(1)
    device_name: str = betterproto.string_field(2)
    last_access_time: int = betterproto.uint32_field(3)
    borrower_id: int = betterproto.uint32_field(4)
    is_pending: bool = betterproto.bool_field(5)
    app_played: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CMsgClientSharedLibraryLockStatus(betterproto.Message):
    locked_library: List[
        "CMsgClientSharedLibraryLockStatusLockedLibrary"
    ] = betterproto.message_field(1)
    own_library_locked_by: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientSharedLibraryLockStatusLockedLibrary(betterproto.Message):
    owner_id: int = betterproto.uint32_field(1)
    locked_by: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientSharedLibraryStopPlaying(betterproto.Message):
    seconds_left: int = betterproto.int32_field(1)
    stop_apps: List[
        "CMsgClientSharedLibraryStopPlayingStopApp"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientSharedLibraryStopPlayingStopApp(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)
    owner_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientServiceCall(betterproto.Message):
    sysid_routing: bytes = betterproto.bytes_field(1)
    call_handle: int = betterproto.uint32_field(2)
    module_crc: int = betterproto.uint32_field(3)
    module_hash: bytes = betterproto.bytes_field(4)
    function_id: int = betterproto.uint32_field(5)
    cub_output_max: int = betterproto.uint32_field(6)
    flags: int = betterproto.uint32_field(7)
    callparameter: bytes = betterproto.bytes_field(8)
    ping_only: bool = betterproto.bool_field(9)
    max_outstanding_calls: int = betterproto.uint32_field(10)
    app_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class CMsgClientServiceModule(betterproto.Message):
    module_crc: int = betterproto.uint32_field(1)
    module_hash: bytes = betterproto.bytes_field(2)
    module_content: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientServiceCallResponse(betterproto.Message):
    sysid_routing: bytes = betterproto.bytes_field(1)
    call_handle: int = betterproto.uint32_field(2)
    module_crc: int = betterproto.uint32_field(3)
    module_hash: bytes = betterproto.bytes_field(4)
    ecallresult: int = betterproto.uint32_field(5)
    result_content: bytes = betterproto.bytes_field(6)
    os_version_info: bytes = betterproto.bytes_field(7)
    system_info: bytes = betterproto.bytes_field(8)
    load_address: int = betterproto.fixed64_field(9)
    exception_record: bytes = betterproto.bytes_field(10)
    portable_os_version_info: bytes = betterproto.bytes_field(11)
    portable_system_info: bytes = betterproto.bytes_field(12)
    was_converted: bool = betterproto.bool_field(13)
    internal_result: int = betterproto.uint32_field(14)
    current_count: int = betterproto.uint32_field(15)
    last_call_handle: int = betterproto.uint32_field(16)
    last_call_module_crc: int = betterproto.uint32_field(17)
    last_call_sysid_routing: bytes = betterproto.bytes_field(18)
    last_ecallresult: int = betterproto.uint32_field(19)
    last_callissue_delta: int = betterproto.uint32_field(20)
    last_callcomplete_delta: int = betterproto.uint32_field(21)


@dataclass(eq=False, repr=False)
class CMsgAmUnlockH264(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    platform: int = betterproto.int32_field(2)
    reason: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class CMsgAmUnlockH264Response(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    encryption_key: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientPlayingSessionState(betterproto.Message):
    playing_blocked: bool = betterproto.bool_field(2)
    playing_app: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientKickPlayingSession(betterproto.Message):
    only_stop_game: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientVoiceCallPreAuthorize(betterproto.Message):
    caller_steamid: int = betterproto.fixed64_field(1)
    receiver_steamid: int = betterproto.fixed64_field(2)
    caller_id: int = betterproto.int32_field(3)
    hangup: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientVoiceCallPreAuthorizeResponse(betterproto.Message):
    caller_steamid: int = betterproto.fixed64_field(1)
    receiver_steamid: int = betterproto.fixed64_field(2)
    eresult: int = betterproto.int32_field(3)
    caller_id: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class CMsgBadgeCraftedNotification(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    badge_level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientStartPeerContentServer(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    client_remote_id: int = betterproto.fixed64_field(2)
    app_id: int = betterproto.uint32_field(3)
    current_build_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientStartPeerContentServerResponse(betterproto.Message):
    result: int = betterproto.uint32_field(1)
    server_port: int = betterproto.uint32_field(2)
    installed_depots: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientGetPeerContentInfo(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    client_remote_id: int = betterproto.fixed64_field(2)
    owned_games_visible: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientGetPeerContentInfoResponse(betterproto.Message):
    result: int = betterproto.uint32_field(1)
    apps: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientAppInfoUpdate(betterproto.Message):
    last_changenumber: int = betterproto.uint32_field(1)
    send_changelist: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientAppInfoChanges(betterproto.Message):
    current_change_number: int = betterproto.uint32_field(1)
    force_full_update: bool = betterproto.bool_field(2)
    app_i_ds: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientAppInfoRequest(betterproto.Message):
    apps: List["CMsgClientAppInfoRequestApp"] = betterproto.message_field(1)
    supports_batches: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientAppInfoRequestApp(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)
    section_flags: int = betterproto.uint32_field(2)
    section_crc: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientPicsChangesSinceRequest(betterproto.Message):
    since_change_number: int = betterproto.uint32_field(1)
    send_app_info_changes: bool = betterproto.bool_field(2)
    send_package_info_changes: bool = betterproto.bool_field(3)
    num_app_info_cached: int = betterproto.uint32_field(4)
    num_package_info_cached: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgClientPicsChangesSinceResponse(betterproto.Message):
    current_change_number: int = betterproto.uint32_field(1)
    since_change_number: int = betterproto.uint32_field(2)
    force_full_update: bool = betterproto.bool_field(3)
    package_changes: List[
        "CMsgClientPicsChangesSinceResponsePackageChange"
    ] = betterproto.message_field(4)
    app_changes: List[
        "CMsgClientPicsChangesSinceResponseAppChange"
    ] = betterproto.message_field(5)
    force_full_app_update: bool = betterproto.bool_field(6)
    force_full_package_update: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class CMsgClientPicsChangesSinceResponsePackageChange(betterproto.Message):
    packageid: int = betterproto.uint32_field(1)
    change_number: int = betterproto.uint32_field(2)
    needs_token: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientPicsChangesSinceResponseAppChange(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    change_number: int = betterproto.uint32_field(2)
    needs_token: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientPicsProductInfoRequest(betterproto.Message):
    packages: List[
        "CMsgClientPicsProductInfoRequestPackageInfo"
    ] = betterproto.message_field(1)
    apps: List["CMsgClientPicsProductInfoRequestAppInfo"] = betterproto.message_field(2)
    meta_data_only: bool = betterproto.bool_field(3)
    num_prev_failed: int = betterproto.uint32_field(4)
    obsolete_supports_package_tokens: int = betterproto.uint32_field(5)
    sequence_number: int = betterproto.uint32_field(6)
    single_response: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class CMsgClientPicsProductInfoRequestAppInfo(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    access_token: int = betterproto.uint64_field(2)
    only_public_obsolete: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientPicsProductInfoRequestPackageInfo(betterproto.Message):
    packageid: int = betterproto.uint32_field(1)
    access_token: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientPicsProductInfoResponse(betterproto.Message):
    apps: List["CMsgClientPicsProductInfoResponseAppInfo"] = betterproto.message_field(
        1
    )
    unknown_appids: List[int] = betterproto.uint32_field(2)
    packages: List[
        "CMsgClientPicsProductInfoResponsePackageInfo"
    ] = betterproto.message_field(3)
    unknown_packageids: List[int] = betterproto.uint32_field(4)
    meta_data_only: bool = betterproto.bool_field(5)
    response_pending: bool = betterproto.bool_field(6)
    http_min_size: int = betterproto.uint32_field(7)
    http_host: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class CMsgClientPicsProductInfoResponseAppInfo(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    change_number: int = betterproto.uint32_field(2)
    missing_token: bool = betterproto.bool_field(3)
    sha: bytes = betterproto.bytes_field(4)
    buffer: bytes = betterproto.bytes_field(5)
    only_public: bool = betterproto.bool_field(6)
    size: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class CMsgClientPicsProductInfoResponsePackageInfo(betterproto.Message):
    packageid: int = betterproto.uint32_field(1)
    change_number: int = betterproto.uint32_field(2)
    missing_token: bool = betterproto.bool_field(3)
    sha: bytes = betterproto.bytes_field(4)
    buffer: bytes = betterproto.bytes_field(5)
    size: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CMsgClientPicsAccessTokenRequest(betterproto.Message):
    packageids: List[int] = betterproto.uint32_field(1)
    appids: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientPicsAccessTokenResponse(betterproto.Message):
    package_access_tokens: List[
        "CMsgClientPicsAccessTokenResponsePackageToken"
    ] = betterproto.message_field(1)
    package_denied_tokens: List[int] = betterproto.uint32_field(2)
    app_access_tokens: List[
        "CMsgClientPicsAccessTokenResponseAppToken"
    ] = betterproto.message_field(3)
    app_denied_tokens: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientPicsAccessTokenResponsePackageToken(betterproto.Message):
    packageid: int = betterproto.uint32_field(1)
    access_token: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientPicsAccessTokenResponseAppToken(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    access_token: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientHeartBeat(betterproto.Message):
    send_reply: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientServerTimestampRequest(betterproto.Message):
    client_request_timestamp: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientServerTimestampResponse(betterproto.Message):
    client_request_timestamp: int = betterproto.uint64_field(1)
    server_timestamp_ms: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientSecret(betterproto.Message):
    version: int = betterproto.uint32_field(1)
    appid: int = betterproto.uint32_field(2)
    deviceid: int = betterproto.uint32_field(3)
    nonce: int = betterproto.fixed64_field(4)
    hmac: bytes = betterproto.bytes_field(5)


@dataclass(eq=False, repr=False)
class CMsgClientHello(betterproto.Message):
    protocol_version: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientLogon(betterproto.Message):
    protocol_version: int = betterproto.uint32_field(1)
    deprecated_obfustucated_private_ip: int = betterproto.uint32_field(2)
    cell_id: int = betterproto.uint32_field(3)
    last_session_id: int = betterproto.uint32_field(4)
    client_package_version: int = betterproto.uint32_field(5)
    client_language: str = betterproto.string_field(6)
    client_os_type: int = betterproto.uint32_field(7)
    should_remember_password: bool = betterproto.bool_field(8)
    wine_version: str = betterproto.string_field(9)
    deprecated_10: int = betterproto.uint32_field(10)
    obfuscated_private_ip: "CMsgIpAddress" = betterproto.message_field(11)
    deprecated_public_ip: int = betterproto.uint32_field(20)
    qos_level: int = betterproto.uint32_field(21)
    client_supplied_steam_id: int = betterproto.fixed64_field(22)
    public_ip: "CMsgIpAddress" = betterproto.message_field(23)
    machine_id: bytes = betterproto.bytes_field(30)
    launcher_type: int = betterproto.uint32_field(31)
    ui_mode: int = betterproto.uint32_field(32)
    chat_mode: int = betterproto.uint32_field(33)
    steam2_auth_ticket: bytes = betterproto.bytes_field(41)
    email_address: str = betterproto.string_field(42)
    rtime32_account_creation: int = betterproto.fixed32_field(43)
    account_name: str = betterproto.string_field(50)
    password: str = betterproto.string_field(51)
    game_server_token: str = betterproto.string_field(52)
    login_key: str = betterproto.string_field(60)
    was_converted_deprecated_msg: bool = betterproto.bool_field(70)
    anon_user_target_account_name: str = betterproto.string_field(80)
    resolved_user_steam_id: int = betterproto.fixed64_field(81)
    eresult_sentryfile: int = betterproto.int32_field(82)
    sha_sentryfile: bytes = betterproto.bytes_field(83)
    auth_code: str = betterproto.string_field(84)
    otp_type: int = betterproto.int32_field(85)
    otp_value: int = betterproto.uint32_field(86)
    otp_identifier: str = betterproto.string_field(87)
    steam2_ticket_request: bool = betterproto.bool_field(88)
    sony_psn_ticket: bytes = betterproto.bytes_field(90)
    sony_psn_service_id: str = betterproto.string_field(91)
    create_new_psn_linked_account_if_needed: bool = betterproto.bool_field(92)
    sony_psn_name: str = betterproto.string_field(93)
    game_server_app_id: int = betterproto.int32_field(94)
    steamguard_dont_remember_computer: bool = betterproto.bool_field(95)
    machine_name: str = betterproto.string_field(96)
    machine_name_userchosen: str = betterproto.string_field(97)
    country_override: str = betterproto.string_field(98)
    is_steam_box: bool = betterproto.bool_field(99)
    client_instance_id: int = betterproto.uint64_field(100)
    two_factor_code: str = betterproto.string_field(101)
    supports_rate_limit_response: bool = betterproto.bool_field(102)
    web_logon_nonce: str = betterproto.string_field(103)
    priority_reason: int = betterproto.int32_field(104)
    embedded_client_secret: "CMsgClientSecret" = betterproto.message_field(105)
    disable_partner_autogrants: bool = betterproto.bool_field(106)
    is_steam_deck: bool = betterproto.bool_field(107)
    access_token: str = betterproto.string_field(108)
    is_chrome_os: bool = betterproto.bool_field(109)
    is_tesla: bool = betterproto.bool_field(110)


@dataclass(eq=False, repr=False)
class CMsgClientLogonResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    legacy_out_of_game_heartbeat_seconds: int = betterproto.int32_field(2)
    heartbeat_seconds: int = betterproto.int32_field(3)
    deprecated_public_ip: int = betterproto.uint32_field(4)
    rtime32_server_time: int = betterproto.fixed32_field(5)
    account_flags: int = betterproto.uint32_field(6)
    cell_id: int = betterproto.uint32_field(7)
    email_domain: str = betterproto.string_field(8)
    steam2_ticket: bytes = betterproto.bytes_field(9)
    eresult_extended: int = betterproto.int32_field(10)
    webapi_authenticate_user_nonce: str = betterproto.string_field(11)
    cell_id_ping_threshold: int = betterproto.uint32_field(12)
    deprecated_use_pics: bool = betterproto.bool_field(13)
    vanity_url: str = betterproto.string_field(14)
    public_ip: "CMsgIpAddress" = betterproto.message_field(15)
    client_supplied_steamid: int = betterproto.fixed64_field(20)
    ip_country_code: str = betterproto.string_field(21)
    parental_settings: bytes = betterproto.bytes_field(22)
    parental_setting_signature: bytes = betterproto.bytes_field(23)
    count_loginfailures_to_migrate: int = betterproto.int32_field(24)
    count_disconnects_to_migrate: int = betterproto.int32_field(25)
    ogs_data_report_time_window: int = betterproto.int32_field(26)
    client_instance_id: int = betterproto.uint64_field(27)
    force_client_update_check: bool = betterproto.bool_field(28)
    agreement_session_url: str = betterproto.string_field(29)
    token_id: int = betterproto.uint64_field(30)


@dataclass(eq=False, repr=False)
class CMsgClientRequestWebApiAuthenticateUserNonce(betterproto.Message):
    token_type: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientRequestWebApiAuthenticateUserNonceResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    webapi_authenticate_user_nonce: str = betterproto.string_field(11)
    token_type: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientLogOff(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientLoggedOff(betterproto.Message):
    eresult: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientNewLoginKey(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    login_key: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientNewLoginKeyAccepted(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientAccountInfo(betterproto.Message):
    persona_name: str = betterproto.string_field(1)
    ip_country: str = betterproto.string_field(2)
    count_authed_computers: int = betterproto.int32_field(5)
    account_flags: int = betterproto.uint32_field(7)
    facebook_id: int = betterproto.uint64_field(8)
    facebook_name: str = betterproto.string_field(9)
    steamguard_machine_name_user_chosen: str = betterproto.string_field(15)
    is_phone_verified: bool = betterproto.bool_field(16)
    two_factor_state: int = betterproto.uint32_field(17)
    is_phone_identifying: bool = betterproto.bool_field(18)
    is_phone_needing_reverify: bool = betterproto.bool_field(19)


@dataclass(eq=False, repr=False)
class CMsgClientChallengeRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientChallengeResponse(betterproto.Message):
    challenge: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientGetUserStats(betterproto.Message):
    game_id: int = betterproto.fixed64_field(1)
    crc_stats: int = betterproto.uint32_field(2)
    schema_local_version: int = betterproto.int32_field(3)
    steam_id_for_user: int = betterproto.fixed64_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientGetUserStatsResponse(betterproto.Message):
    game_id: int = betterproto.fixed64_field(1)
    eresult: int = betterproto.int32_field(2)
    crc_stats: int = betterproto.uint32_field(3)
    schema: bytes = betterproto.bytes_field(4)
    stats: List["CMsgClientGetUserStatsResponseStats"] = betterproto.message_field(5)
    achievement_blocks: List[
        "CMsgClientGetUserStatsResponseAchievementBlocks"
    ] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class CMsgClientGetUserStatsResponseStats(betterproto.Message):
    stat_id: int = betterproto.uint32_field(1)
    stat_value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientGetUserStatsResponseAchievementBlocks(betterproto.Message):
    achievement_id: int = betterproto.uint32_field(1)
    unlock_time: List[int] = betterproto.fixed32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientStoreUserStatsResponse(betterproto.Message):
    game_id: int = betterproto.fixed64_field(1)
    eresult: int = betterproto.int32_field(2)
    crc_stats: int = betterproto.uint32_field(3)
    stats_failed_validation: List[
        "CMsgClientStoreUserStatsResponseStatsFailedValidation"
    ] = betterproto.message_field(4)
    stats_out_of_date: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class CMsgClientStoreUserStatsResponseStatsFailedValidation(betterproto.Message):
    stat_id: int = betterproto.uint32_field(1)
    reverted_stat_value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientStoreUserStats2(betterproto.Message):
    game_id: int = betterproto.fixed64_field(1)
    settor_steam_id: int = betterproto.fixed64_field(2)
    settee_steam_id: int = betterproto.fixed64_field(3)
    crc_stats: int = betterproto.uint32_field(4)
    explicit_reset: bool = betterproto.bool_field(5)
    stats: List["CMsgClientStoreUserStats2Stats"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class CMsgClientStoreUserStats2Stats(betterproto.Message):
    stat_id: int = betterproto.uint32_field(1)
    stat_value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientStatsUpdated(betterproto.Message):
    steam_id: int = betterproto.fixed64_field(1)
    game_id: int = betterproto.fixed64_field(2)
    crc_stats: int = betterproto.uint32_field(3)
    updated_stats: List[
        "CMsgClientStatsUpdatedUpdatedStats"
    ] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientStatsUpdatedUpdatedStats(betterproto.Message):
    stat_id: int = betterproto.uint32_field(1)
    stat_value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientStoreUserStats(betterproto.Message):
    game_id: int = betterproto.fixed64_field(1)
    explicit_reset: bool = betterproto.bool_field(2)
    stats_to_store: List[
        "CMsgClientStoreUserStatsStatsToStore"
    ] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientStoreUserStatsStatsToStore(betterproto.Message):
    stat_id: int = betterproto.uint32_field(1)
    stat_value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SteamMessagesClientIClientForcedEnumDependencies(betterproto.Message):
    a: "EBluetoothDeviceType" = betterproto.enum_field(1)
    b: "EStorageBlockContentType" = betterproto.enum_field(2)
    c: "EStorageBlockFileSystemType" = betterproto.enum_field(3)
    d: "EsdCardFormatStage" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class CMsgNetworkDeviceIp4Address(betterproto.Message):
    ip: int = betterproto.int32_field(1)
    netmask: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CMsgNetworkDeviceIp4Config(betterproto.Message):
    addresses: List["CMsgNetworkDeviceIp4Address"] = betterproto.message_field(1)
    dns_ip: List[int] = betterproto.int32_field(2)
    gateway_ip: int = betterproto.int32_field(3)
    is_dhcp_enabled: bool = betterproto.bool_field(4)
    is_default_route: bool = betterproto.bool_field(5)
    is_enabled: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class CMsgNetworkDeviceIp6Address(betterproto.Message):
    ip: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CMsgNetworkDeviceIp6Config(betterproto.Message):
    addresses: List["CMsgNetworkDeviceIp6Address"] = betterproto.message_field(1)
    dns_ip: List[str] = betterproto.string_field(2)
    gateway_ip: str = betterproto.string_field(3)
    is_dhcp_enabled: bool = betterproto.bool_field(4)
    is_default_route: bool = betterproto.bool_field(5)
    is_enabled: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class CMsgNetworkDevicesData(betterproto.Message):
    devices: List["CMsgNetworkDevicesDataDevice"] = betterproto.message_field(1)
    is_wifi_enabled: bool = betterproto.bool_field(2)
    is_wifi_scanning_enabled: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CMsgNetworkDevicesDataDevice(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    etype: int = betterproto.int32_field(2)
    estate: int = betterproto.int32_field(3)
    mac: str = betterproto.string_field(4)
    vendor: str = betterproto.string_field(5)
    product: str = betterproto.string_field(6)
    ip4: "CMsgNetworkDeviceIp4Config" = betterproto.message_field(7)
    ip6: "CMsgNetworkDeviceIp6Config" = betterproto.message_field(8)
    wired: "CMsgNetworkDevicesDataDeviceWired" = betterproto.message_field(9)
    wireless: "CMsgNetworkDevicesDataDeviceWireless" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class CMsgNetworkDevicesDataDeviceWired(betterproto.Message):
    is_cable_present: bool = betterproto.bool_field(1)
    speed_mbit: int = betterproto.uint32_field(2)
    friendly_name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CMsgNetworkDevicesDataDeviceWireless(betterproto.Message):
    aps: List["CMsgNetworkDevicesDataDeviceWirelessAp"] = betterproto.message_field(1)
    esecurity_supported: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CMsgNetworkDevicesDataDeviceWirelessAp(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    estrength: int = betterproto.int32_field(2)
    ssid: str = betterproto.string_field(3)
    is_active: bool = betterproto.bool_field(4)
    is_autoconnect: bool = betterproto.bool_field(5)
    esecurity: int = betterproto.int32_field(6)
    user_name: str = betterproto.string_field(7)
    password: str = betterproto.string_field(8)
    strength_raw: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class CMsgNetworkDeviceConnect(betterproto.Message):
    device_id: int = betterproto.uint32_field(1)
    credentials: "CMsgNetworkDeviceConnectCredentials" = betterproto.message_field(4)
    ip4: "CMsgNetworkDeviceIp4Config" = betterproto.message_field(5)
    ip6: "CMsgNetworkDeviceIp6Config" = betterproto.message_field(6)
    ap_known: "CMsgNetworkDeviceConnectKnownAp" = betterproto.message_field(
        2, group="ap_info"
    )
    ap_custom: "CMsgNetworkDeviceConnectCustomAp" = betterproto.message_field(
        3, group="ap_info"
    )


@dataclass(eq=False, repr=False)
class CMsgNetworkDeviceConnectKnownAp(betterproto.Message):
    ap_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgNetworkDeviceConnectCustomAp(betterproto.Message):
    ssid: str = betterproto.string_field(1)
    esecurity: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CMsgNetworkDeviceConnectCredentials(betterproto.Message):
    username: str = betterproto.string_field(1)
    password: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgStorageDevicesData(betterproto.Message):
    drives: List["CMsgStorageDevicesDataDrive"] = betterproto.message_field(1)
    block_devices: List[
        "CMsgStorageDevicesDataBlockDevice"
    ] = betterproto.message_field(2)
    is_unmount_supported: bool = betterproto.bool_field(3)
    is_trim_supported: bool = betterproto.bool_field(4)
    is_trim_running: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class CMsgStorageDevicesDataDrive(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    model: str = betterproto.string_field(2)
    vendor: str = betterproto.string_field(3)
    serial: str = betterproto.string_field(4)
    is_ejectable: bool = betterproto.bool_field(5)
    size_bytes: int = betterproto.uint64_field(6)
    media_type: "EStorageDriveMediaType" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class CMsgStorageDevicesDataBlockDevice(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    drive_id: int = betterproto.uint32_field(2)
    path: str = betterproto.string_field(3)
    friendly_path: str = betterproto.string_field(4)
    label: str = betterproto.string_field(5)
    size_bytes: int = betterproto.uint64_field(6)
    is_formattable: bool = betterproto.bool_field(7)
    is_read_only: bool = betterproto.bool_field(8)
    is_root_device: bool = betterproto.bool_field(9)
    content_type: "EStorageBlockContentType" = betterproto.enum_field(10)
    filesystem_type: "EStorageBlockFileSystemType" = betterproto.enum_field(11)
    mount_path: str = betterproto.string_field(12)


@dataclass(eq=False, repr=False)
class CCloudPendingRemoteOperation(betterproto.Message):
    operation: "ECloudPendingRemoteOperation" = betterproto.enum_field(1)
    machine_name: str = betterproto.string_field(2)
    client_id: int = betterproto.uint64_field(3)
    time_last_updated: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgCloudPendingRemoteOperations(betterproto.Message):
    operations: List["CCloudPendingRemoteOperation"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgBluetoothDevicesData(betterproto.Message):
    adapters: List["CMsgBluetoothDevicesDataAdapter"] = betterproto.message_field(1)
    devices: List["CMsgBluetoothDevicesDataDevice"] = betterproto.message_field(2)
    manager: "CMsgBluetoothDevicesDataManager" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgBluetoothDevicesDataAdapter(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    mac: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    is_enabled: bool = betterproto.bool_field(4)
    is_discovering: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class CMsgBluetoothDevicesDataDevice(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    adapter_id: int = betterproto.uint32_field(2)
    etype: "EBluetoothDeviceType" = betterproto.enum_field(3)
    mac: str = betterproto.string_field(4)
    name: str = betterproto.string_field(5)
    is_connected: bool = betterproto.bool_field(6)
    is_paired: bool = betterproto.bool_field(7)
    strength_raw: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class CMsgBluetoothDevicesDataManager(betterproto.Message):
    is_bluetooth_enabled: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CMsgSystemPerfDiagnosticEntry(betterproto.Message):
    name: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgSystemPerfNetworkInterface(betterproto.Message):
    name: str = betterproto.string_field(1)
    timestamp: float = betterproto.double_field(2)
    tx_bytes_total: int = betterproto.int64_field(3)
    rx_bytes_total: int = betterproto.int64_field(4)
    tx_bytes_per_sec: int = betterproto.int32_field(5)
    rx_bytes_per_sec: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class CMsgSystemPerfDiagnosticInfo(betterproto.Message):
    entries: List["CMsgSystemPerfDiagnosticEntry"] = betterproto.message_field(1)
    interfaces: List["CMsgSystemPerfNetworkInterface"] = betterproto.message_field(2)
    battery_temp_c: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class CMsgSystemPerfLimits(betterproto.Message):
    cpu_governor_manual_min_mhz: int = betterproto.int32_field(1)
    cpu_governor_manual_max_mhz: int = betterproto.int32_field(2)
    fsr_sharpness_min: int = betterproto.int32_field(3)
    fsr_sharpness_max: int = betterproto.int32_field(4)
    gpu_performance_manual_min_mhz: int = betterproto.int32_field(5)
    gpu_performance_manual_max_mhz: int = betterproto.int32_field(6)
    perf_overlay_is_standalone: bool = betterproto.bool_field(7)
    is_dynamic_vrs_available: bool = betterproto.bool_field(8)
    is_manual_display_refresh_rate_available: bool = betterproto.bool_field(9)
    gpu_performance_levels_available: List[
        "EgpuPerformanceLevel"
    ] = betterproto.enum_field(10)
    display_refresh_manual_hz_min: int = betterproto.int32_field(11)
    display_refresh_manual_hz_max: int = betterproto.int32_field(12)
    fps_limit_options: List[int] = betterproto.int32_field(13)
    tdp_limit_min: int = betterproto.int32_field(14)
    tdp_limit_max: int = betterproto.int32_field(15)
    is_nis_supported: bool = betterproto.bool_field(16)
    nis_sharpness_min: int = betterproto.int32_field(17)
    nis_sharpness_max: int = betterproto.int32_field(18)
    display_external_refresh_manual_hz_min: int = betterproto.int32_field(19)
    display_external_refresh_manual_hz_max: int = betterproto.int32_field(20)
    fps_limit_options_external: List[int] = betterproto.int32_field(21)
    is_tearing_supported: bool = betterproto.bool_field(22)
    is_vrr_supported: bool = betterproto.bool_field(23)
    is_dynamic_refresh_rate_in_steam_supported: bool = betterproto.bool_field(24)
    is_split_scaling_and_filtering_supported: bool = betterproto.bool_field(25)
    split_scaling_filters_available: List[
        "ESplitScalingFilter"
    ] = betterproto.enum_field(26)
    split_scaling_scalers_available: List[
        "ESplitScalingScaler"
    ] = betterproto.enum_field(27)
    is_hdr_supported: bool = betterproto.bool_field(28)
    display_refresh_manual_hz_oc_max: int = betterproto.int32_field(29)


@dataclass(eq=False, repr=False)
class CMsgSystemPerfSettingsGlobal(betterproto.Message):
    diagnostic_update_rate: float = betterproto.float_field(1)
    system_trace_service_state: "ESystemServiceState" = betterproto.enum_field(2)
    graphics_profiling_service_state: "ESystemServiceState" = betterproto.enum_field(3)
    perf_overlay_service_state: "ESystemServiceState" = betterproto.enum_field(4)
    perf_overlay_level: "EGraphicsPerfOverlayLevel" = betterproto.enum_field(5)
    is_show_perf_overlay_over_steam_enabled: bool = betterproto.bool_field(6)
    is_advanced_settings_enabled: bool = betterproto.bool_field(7)
    allow_external_display_refresh_control: bool = betterproto.bool_field(8)
    is_hdr_enabled: bool = betterproto.bool_field(9)
    hdr_on_sdr_tonemap_operator: "EhdrToneMapOperator" = betterproto.enum_field(12)
    is_hdr_debug_heatmap_enabled: bool = betterproto.bool_field(13)
    force_hdr_wide_gammut_for_sdr: bool = betterproto.bool_field(15)
    allow_experimental_hdr: bool = betterproto.bool_field(16)
    sdr_to_hdr_brightness: float = betterproto.float_field(17)
    debug_force_hdr_support: bool = betterproto.bool_field(18)
    force_hdr_10_pq_output_debug: bool = betterproto.bool_field(19)
    is_display_oc_enabled: bool = betterproto.bool_field(20)
    is_color_management_enabled: bool = betterproto.bool_field(21)


@dataclass(eq=False, repr=False)
class CMsgSystemPerfSettingsPerApp(betterproto.Message):
    gpu_performance_manual_mhz: int = betterproto.int32_field(1)
    fps_limit: int = betterproto.int32_field(2)
    is_variable_resolution_enabled: bool = betterproto.bool_field(3)
    is_dynamic_refresh_rate_enabled: bool = betterproto.bool_field(4)
    tdp_limit: int = betterproto.int32_field(5)
    cpu_governor: "EcpuGovernor" = betterproto.enum_field(6)
    cpu_governor_manual_mhz: int = betterproto.int32_field(7)
    scaling_filter: int = betterproto.int32_field(8)
    fsr_sharpness: int = betterproto.int32_field(9)
    is_fps_limit_enabled: bool = betterproto.bool_field(10)
    is_tdp_limit_enabled: bool = betterproto.bool_field(11)
    is_low_latency_mode_enabled: bool = betterproto.bool_field(12)
    display_refresh_manual_hz: int = betterproto.int32_field(13)
    is_game_perf_profile_enabled: bool = betterproto.bool_field(14)
    gpu_performance_level: "EgpuPerformanceLevel" = betterproto.enum_field(15)
    nis_sharpness: int = betterproto.int32_field(16)
    display_external_refresh_manual_hz: int = betterproto.int32_field(17)
    fps_limit_external: int = betterproto.int32_field(18)
    is_tearing_enabled: bool = betterproto.bool_field(19)
    is_vrr_enabled: bool = betterproto.bool_field(20)
    is_composite_debug_enabled: bool = betterproto.bool_field(21)
    force_composite: bool = betterproto.bool_field(22)
    use_dynamic_refresh_rate_in_steam: bool = betterproto.bool_field(23)
    split_scaling_filter: "ESplitScalingFilter" = betterproto.enum_field(24)
    split_scaling_scaler: "ESplitScalingScaler" = betterproto.enum_field(25)


@dataclass(eq=False, repr=False)
class CMsgSystemPerfSettings(betterproto.Message):
    global_: "CMsgSystemPerfSettingsGlobal" = betterproto.message_field(1)
    per_app: "CMsgSystemPerfSettingsPerApp" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgSystemPerfSettingsV1(betterproto.Message):
    diagnostic_update_rate: float = betterproto.float_field(1)
    system_trace_service_state: "ESystemServiceState" = betterproto.enum_field(2)
    graphics_profiling_service_state: "ESystemServiceState" = betterproto.enum_field(3)
    perf_overlay_service_state: "ESystemServiceState" = betterproto.enum_field(4)
    perf_overlay_level: "EGraphicsPerfOverlayLevel" = betterproto.enum_field(5)
    gpu_performance_level: "EgpuPerformanceLevel" = betterproto.enum_field(6)
    gpu_performance_manual_mhz: int = betterproto.int32_field(7)
    fps_limit: int = betterproto.int32_field(8)
    is_variable_resolution_enabled: bool = betterproto.bool_field(9)
    is_dynamic_refresh_rate_enabled: bool = betterproto.bool_field(10)
    tdp_limit: int = betterproto.int32_field(11)
    cpu_governor: "EcpuGovernor" = betterproto.enum_field(12)
    cpu_governor_manual_mhz: int = betterproto.int32_field(13)
    scaling_filter: int = betterproto.int32_field(14)
    fsr_sharpness: int = betterproto.int32_field(15)
    is_fps_limit_enabled: bool = betterproto.bool_field(16)
    is_tdp_limit_enabled: bool = betterproto.bool_field(17)
    is_show_perf_overlay_over_steam_enabled: bool = betterproto.bool_field(18)
    is_low_latency_mode_enabled: bool = betterproto.bool_field(19)
    display_refresh_manual_hz: int = betterproto.int32_field(20)
    is_game_perf_profile_enabled: bool = betterproto.bool_field(21)


@dataclass(eq=False, repr=False)
class CMsgSystemPerfState(betterproto.Message):
    limits: "CMsgSystemPerfLimits" = betterproto.message_field(1)
    settings: "CMsgSystemPerfSettings" = betterproto.message_field(2)
    current_game_id: int = betterproto.uint64_field(3)
    active_profile_game_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class CMsgSystemPerfUpdateSettings(betterproto.Message):
    gameid: int = betterproto.uint64_field(1)
    skip_storage_update: bool = betterproto.bool_field(4)
    reset_to_default: bool = betterproto.bool_field(2, group="update")
    settings_delta: "CMsgSystemPerfSettings" = betterproto.message_field(
        3, group="update"
    )


@dataclass(eq=False, repr=False)
class CMsgSystemDockUpdateState(betterproto.Message):
    state: "EUpdaterState" = betterproto.enum_field(1)
    rtime_last_checked: int = betterproto.fixed32_field(2)
    version_current: str = betterproto.string_field(3)
    version_available: str = betterproto.string_field(4)
    stage_progress: float = betterproto.float_field(5)
    rtime_estimated_completion: int = betterproto.fixed32_field(6)
    old_fw_workaround: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class CMsgSystemDockState(betterproto.Message):
    update_state: "CMsgSystemDockUpdateState" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgSystemDockUpdateFirmware(betterproto.Message):
    check_only: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CMsgSystemAudioVolume(betterproto.Message):
    entries: List["CMsgSystemAudioVolumeChannelEntry"] = betterproto.message_field(1)
    is_muted: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgSystemAudioVolumeChannelEntry(betterproto.Message):
    echannel: "ESystemAudioChannel" = betterproto.enum_field(1)
    volume: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class CMsgSystemAudioManagerObject(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    rtime_last_update: int = betterproto.fixed32_field(2)


@dataclass(eq=False, repr=False)
class CMsgSystemAudioManagerDevice(betterproto.Message):
    base: "CMsgSystemAudioManagerObject" = betterproto.message_field(1)
    name: str = betterproto.string_field(2)
    nick: str = betterproto.string_field(3)
    description: str = betterproto.string_field(4)
    api: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class CMsgSystemAudioManagerNode(betterproto.Message):
    base: "CMsgSystemAudioManagerObject" = betterproto.message_field(1)
    device_id: int = betterproto.uint32_field(2)
    name: str = betterproto.string_field(3)
    nick: str = betterproto.string_field(4)
    description: str = betterproto.string_field(5)
    edirection: "ESystemAudioDirection" = betterproto.enum_field(6)
    volume: "CMsgSystemAudioVolume" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class CMsgSystemAudioManagerPort(betterproto.Message):
    base: "CMsgSystemAudioManagerObject" = betterproto.message_field(1)
    node_id: int = betterproto.uint32_field(3)
    name: str = betterproto.string_field(4)
    alias: str = betterproto.string_field(5)
    etype: "ESystemAudioPortType" = betterproto.enum_field(6)
    edirection: "ESystemAudioPortDirection" = betterproto.enum_field(7)
    is_physical: bool = betterproto.bool_field(8)
    is_terminal: bool = betterproto.bool_field(9)
    is_control: bool = betterproto.bool_field(10)
    is_monitor: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class CMsgSystemAudioManagerLink(betterproto.Message):
    base: "CMsgSystemAudioManagerObject" = betterproto.message_field(1)
    output_node_id: int = betterproto.uint32_field(2)
    output_port_id: int = betterproto.uint32_field(3)
    input_node_id: int = betterproto.uint32_field(4)
    input_port_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgSystemAudioManagerStateHw(betterproto.Message):
    devices: List["CMsgSystemAudioManagerDevice"] = betterproto.message_field(1)
    nodes: List["CMsgSystemAudioManagerNode"] = betterproto.message_field(2)
    ports: List["CMsgSystemAudioManagerPort"] = betterproto.message_field(3)
    links: List["CMsgSystemAudioManagerLink"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CMsgSystemAudioManagerState(betterproto.Message):
    rtime_filter: int = betterproto.fixed32_field(1)
    counter: int = betterproto.int32_field(2)
    hw: "CMsgSystemAudioManagerStateHw" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgSystemAudioManagerUpdateSomething(betterproto.Message):
    counter: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class CMsgSystemDisplayMode(betterproto.Message):
    id: int = betterproto.int32_field(1)
    width: int = betterproto.int32_field(2)
    height: int = betterproto.int32_field(3)
    refresh_hz: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class CMsgSystemDisplay(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)
    is_primary: bool = betterproto.bool_field(4)
    is_enabled: bool = betterproto.bool_field(5)
    is_internal: bool = betterproto.bool_field(6)
    has_mode_override: bool = betterproto.bool_field(7)
    width_mm: int = betterproto.int32_field(8)
    height_mm: int = betterproto.int32_field(9)
    current_mode_id: int = betterproto.int32_field(10)
    modes: List["CMsgSystemDisplayMode"] = betterproto.message_field(11)
    refresh_rate_min: int = betterproto.int32_field(12)
    refresh_rate_max: int = betterproto.int32_field(13)
    is_vrr_capable: bool = betterproto.bool_field(14)
    is_vrr_enabled: bool = betterproto.bool_field(15)
    is_hdr_capable: bool = betterproto.bool_field(16)
    is_hdr_enabled: bool = betterproto.bool_field(17)


@dataclass(eq=False, repr=False)
class CMsgSystemDisplayManagerState(betterproto.Message):
    displays: List["CMsgSystemDisplay"] = betterproto.message_field(1)
    is_mode_switching_supported: bool = betterproto.bool_field(2)
    compatibility_mode: "ESystemDisplayCompatibilityMode" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class CMsgSystemDisplayManagerSetMode(betterproto.Message):
    display_id: int = betterproto.int32_field(1)
    mode_id: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CMsgSystemManagerSettings(betterproto.Message):
    idle_backlight_dim_battery_seconds: float = betterproto.float_field(1)
    idle_backlight_dim_ac_seconds: float = betterproto.float_field(2)
    idle_suspend_battery_seconds: float = betterproto.float_field(3)
    idle_suspend_ac_seconds: float = betterproto.float_field(4)
    idle_suspend_supressed: bool = betterproto.bool_field(5)
    is_adaptive_brightness_available: bool = betterproto.bool_field(6)
    display_adaptive_brightness_enabled: bool = betterproto.bool_field(7)
    display_nightmode_enabled: bool = betterproto.bool_field(10)
    display_nightmode_tintstrength: float = betterproto.float_field(11)
    display_nightmode_maxhue: float = betterproto.float_field(12)
    display_nightmode_maxsat: float = betterproto.float_field(13)
    display_nightmode_uiexp: float = betterproto.float_field(14)
    display_nightmode_blend: float = betterproto.float_field(15)
    display_nightmode_reset: bool = betterproto.bool_field(16)
    display_nightmode_schedule_enabled: bool = betterproto.bool_field(17)
    display_nightmode_schedule_starttime: float = betterproto.float_field(18)
    display_nightmode_schedule_endtime: float = betterproto.float_field(19)
    display_diagnostics_enabled: bool = betterproto.bool_field(20)
    als_lux_latest: float = betterproto.float_field(21)
    als_lux_median: float = betterproto.float_field(22)
    display_backlight_raw: float = betterproto.float_field(23)
    display_brightness_adaptivemin: float = betterproto.float_field(24)
    display_brightness_adaptivemax: float = betterproto.float_field(25)
    is_wifi_powersave_enabled: bool = betterproto.bool_field(26)
    is_fan_control_available: bool = betterproto.bool_field(27)
    fan_control_mode: "ESystemFanControlMode" = betterproto.enum_field(28)
    is_display_brightness_available: bool = betterproto.bool_field(29)
    is_display_colormanagement_available: bool = betterproto.bool_field(31)
    display_colorgamut: float = betterproto.float_field(32)


@dataclass(eq=False, repr=False)
class CMsgSelectOsBranchParams(betterproto.Message):
    branch: "EosBranch" = betterproto.enum_field(1)
    custom_branch: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgSystemUpdateProgress(betterproto.Message):
    stage_progress: float = betterproto.float_field(1)
    stage_size_bytes: int = betterproto.int64_field(2)
    rtime_estimated_completion: int = betterproto.fixed32_field(3)


@dataclass(eq=False, repr=False)
class CMsgSystemUpdateCheckResult(betterproto.Message):
    type: "EUpdaterType" = betterproto.enum_field(1)
    eresult: int = betterproto.uint32_field(2)
    rtime_checked: int = betterproto.fixed32_field(3)
    available: bool = betterproto.bool_field(4)
    version: str = betterproto.string_field(5)
    auto_message: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class CMsgSystemUpdateApplyParams(betterproto.Message):
    apply_types: List["EUpdaterType"] = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgSystemUpdateApplyResult(betterproto.Message):
    type: "EUpdaterType" = betterproto.enum_field(1)
    eresult: int = betterproto.uint32_field(2)
    requires_client_restart: bool = betterproto.bool_field(3)
    requires_system_restart: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CMsgSystemUpdateState(betterproto.Message):
    state: "EUpdaterState" = betterproto.enum_field(1)
    progress: "CMsgSystemUpdateProgress" = betterproto.message_field(2)
    update_check_results: List[
        "CMsgSystemUpdateCheckResult"
    ] = betterproto.message_field(3)
    update_apply_results: List[
        "CMsgSystemUpdateApplyResult"
    ] = betterproto.message_field(4)
    supports_os_updates: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class CMsgAchievementChange(betterproto.Message):
    appid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgCellList(betterproto.Message):
    cells: List["CMsgCellListCell"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgCellListCell(betterproto.Message):
    cell_id: int = betterproto.uint32_field(1)
    loc_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgShortcutInfo(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    exe: str = betterproto.string_field(2)
    start_dir: str = betterproto.string_field(3)
    icon: str = betterproto.string_field(4)
    path: str = betterproto.string_field(5)
    args: str = betterproto.string_field(6)
    app_name: str = betterproto.string_field(7)
    override_appid: int = betterproto.uint32_field(8)
    flatpak_appid: str = betterproto.string_field(9)
    tags: List[str] = betterproto.string_field(10)
    is_remote: bool = betterproto.bool_field(11)
    is_hidden: bool = betterproto.bool_field(12)
    is_temporary: bool = betterproto.bool_field(13)
    is_openvr: bool = betterproto.bool_field(14)
    allow_desktop_config: bool = betterproto.bool_field(15)
    allow_overlay: bool = betterproto.bool_field(16)
    rt_last_played_time: int = betterproto.uint32_field(17)
    is_devkit_shortcut: bool = betterproto.bool_field(18)
    devkit_gameid: str = betterproto.string_field(19)


@dataclass(eq=False, repr=False)
class CMsgShortcutAppIds(betterproto.Message):
    appids: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgMonitorInfo(betterproto.Message):
    selected_display_name: str = betterproto.string_field(1)
    monitors: List["CMsgMonitorInfoMonitorInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgMonitorInfoMonitorInfo(betterproto.Message):
    monitor_device_name: str = betterproto.string_field(1)
    monitor_display_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgGenerateSystemReportReply(betterproto.Message):
    report_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CMsgWebUiTransportInfo(betterproto.Message):
    port: int = betterproto.uint32_field(1)
    auth_key: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetMutualFriendsForIncomingInvitesRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerIncomingInviteMutualFriendList(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    mutual_friend_account_ids: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetMutualFriendsForIncomingInvitesResponse(betterproto.Message):
    incoming_invite_mutual_friends_lists: List[
        "CPlayerIncomingInviteMutualFriendList"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetOwnedGamesRequest(betterproto.Message):
    steamid: int = betterproto.uint64_field(1)
    include_appinfo: bool = betterproto.bool_field(2)
    include_played_free_games: bool = betterproto.bool_field(3)
    appids_filter: List[int] = betterproto.uint32_field(4)
    include_free_sub: bool = betterproto.bool_field(5)
    skip_unvetted_apps: bool = betterproto.bool_field(6)
    language: str = betterproto.string_field(7)
    include_extended_appinfo: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class CPlayerGetOwnedGamesResponse(betterproto.Message):
    game_count: int = betterproto.uint32_field(1)
    games: List["CPlayerGetOwnedGamesResponseGame"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetOwnedGamesResponseGame(betterproto.Message):
    appid: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    playtime_2_weeks: int = betterproto.int32_field(3)
    playtime_forever: int = betterproto.int32_field(4)
    img_icon_url: str = betterproto.string_field(5)
    has_community_visible_stats: bool = betterproto.bool_field(7)
    playtime_windows_forever: int = betterproto.int32_field(8)
    playtime_mac_forever: int = betterproto.int32_field(9)
    playtime_linux_forever: int = betterproto.int32_field(10)
    rtime_last_played: int = betterproto.uint32_field(11)
    capsule_filename: str = betterproto.string_field(12)
    sort_as: str = betterproto.string_field(13)
    has_workshop: bool = betterproto.bool_field(14)
    has_market: bool = betterproto.bool_field(15)
    has_dlc: bool = betterproto.bool_field(16)
    has_leaderboards: bool = betterproto.bool_field(17)
    content_descriptorids: List[int] = betterproto.uint32_field(18)


@dataclass(eq=False, repr=False)
class CPlayerGetPlayNextRequest(betterproto.Message):
    max_age_seconds: int = betterproto.uint32_field(1)
    ignore_appids: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetPlayNextResponse(betterproto.Message):
    last_update_time: int = betterproto.uint32_field(1)
    appids: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetFriendsGameplayInfoRequest(betterproto.Message):
    appid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetFriendsGameplayInfoResponse(betterproto.Message):
    your_info: "CPlayerGetFriendsGameplayInfoResponseOwnGameplayInfo" = (
        betterproto.message_field(1)
    )
    in_game: List[
        "CPlayerGetFriendsGameplayInfoResponseFriendsGameplayInfo"
    ] = betterproto.message_field(2)
    played_recently: List[
        "CPlayerGetFriendsGameplayInfoResponseFriendsGameplayInfo"
    ] = betterproto.message_field(3)
    played_ever: List[
        "CPlayerGetFriendsGameplayInfoResponseFriendsGameplayInfo"
    ] = betterproto.message_field(4)
    owns: List[
        "CPlayerGetFriendsGameplayInfoResponseFriendsGameplayInfo"
    ] = betterproto.message_field(5)
    in_wishlist: List[
        "CPlayerGetFriendsGameplayInfoResponseFriendsGameplayInfo"
    ] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class CPlayerGetFriendsGameplayInfoResponseFriendsGameplayInfo(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    minutes_played: int = betterproto.uint32_field(2)
    minutes_played_forever: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CPlayerGetFriendsGameplayInfoResponseOwnGameplayInfo(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    minutes_played: int = betterproto.uint32_field(2)
    minutes_played_forever: int = betterproto.uint32_field(3)
    in_wishlist: bool = betterproto.bool_field(4)
    owned: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class CPlayerGetGameBadgeLevelsRequest(betterproto.Message):
    appid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetGameBadgeLevelsResponse(betterproto.Message):
    player_level: int = betterproto.uint32_field(1)
    badges: List["CPlayerGetGameBadgeLevelsResponseBadge"] = betterproto.message_field(
        2
    )


@dataclass(eq=False, repr=False)
class CPlayerGetGameBadgeLevelsResponseBadge(betterproto.Message):
    level: int = betterproto.int32_field(1)
    series: int = betterproto.int32_field(2)
    border_color: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CPlayerGetProfileBackgroundRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    language: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ProfileItem(betterproto.Message):
    communityitemid: int = betterproto.uint64_field(1)
    image_small: str = betterproto.string_field(2)
    image_large: str = betterproto.string_field(3)
    name: str = betterproto.string_field(4)
    item_title: str = betterproto.string_field(5)
    item_description: str = betterproto.string_field(6)
    appid: int = betterproto.uint32_field(7)
    item_type: int = betterproto.uint32_field(8)
    item_class: int = betterproto.uint32_field(9)
    movie_webm: str = betterproto.string_field(10)
    movie_mp4: str = betterproto.string_field(11)
    movie_webm_small: str = betterproto.string_field(13)
    movie_mp4_small: str = betterproto.string_field(14)
    equipped_flags: int = betterproto.uint32_field(12)
    profile_colors: List["ProfileItemProfileColor"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class ProfileItemProfileColor(betterproto.Message):
    style_name: str = betterproto.string_field(1)
    color: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetProfileBackgroundResponse(betterproto.Message):
    profile_background: "ProfileItem" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerSetProfileBackgroundRequest(betterproto.Message):
    communityitemid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CPlayerSetProfileBackgroundResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerGetMiniProfileBackgroundRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    language: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetMiniProfileBackgroundResponse(betterproto.Message):
    profile_background: "ProfileItem" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerSetMiniProfileBackgroundRequest(betterproto.Message):
    communityitemid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CPlayerSetMiniProfileBackgroundResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerGetAvatarFrameRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    language: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetAvatarFrameResponse(betterproto.Message):
    avatar_frame: "ProfileItem" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerSetAvatarFrameRequest(betterproto.Message):
    communityitemid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CPlayerSetAvatarFrameResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerGetAnimatedAvatarRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    language: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetAnimatedAvatarResponse(betterproto.Message):
    avatar: "ProfileItem" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerSetAnimatedAvatarRequest(betterproto.Message):
    communityitemid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CPlayerSetAnimatedAvatarResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerGetSteamDeckKeyboardSkinRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    language: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetSteamDeckKeyboardSkinResponse(betterproto.Message):
    steam_deck_keyboard_skin: "ProfileItem" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerSetSteamDeckKeyboardSkinRequest(betterproto.Message):
    communityitemid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CPlayerSetSteamDeckKeyboardSkinResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerGetProfileItemsOwnedRequest(betterproto.Message):
    language: str = betterproto.string_field(1)
    filters: List["ECommunityItemClass"] = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetProfileItemsOwnedResponse(betterproto.Message):
    profile_backgrounds: List["ProfileItem"] = betterproto.message_field(1)
    mini_profile_backgrounds: List["ProfileItem"] = betterproto.message_field(2)
    avatar_frames: List["ProfileItem"] = betterproto.message_field(3)
    animated_avatars: List["ProfileItem"] = betterproto.message_field(4)
    profile_modifiers: List["ProfileItem"] = betterproto.message_field(5)
    steam_deck_keyboard_skins: List["ProfileItem"] = betterproto.message_field(6)
    steam_deck_startup_movies: List["ProfileItem"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class CPlayerGetProfileItemsEquippedRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    language: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetProfileItemsEquippedResponse(betterproto.Message):
    profile_background: "ProfileItem" = betterproto.message_field(1)
    mini_profile_background: "ProfileItem" = betterproto.message_field(2)
    avatar_frame: "ProfileItem" = betterproto.message_field(3)
    animated_avatar: "ProfileItem" = betterproto.message_field(4)
    profile_modifier: "ProfileItem" = betterproto.message_field(5)
    steam_deck_keyboard_skin: "ProfileItem" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class CPlayerSetEquippedProfileItemFlagsRequest(betterproto.Message):
    communityitemid: int = betterproto.uint64_field(1)
    flags: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CPlayerSetEquippedProfileItemFlagsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerGetEmoticonListRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerGetEmoticonListResponse(betterproto.Message):
    emoticons: List[
        "CPlayerGetEmoticonListResponseEmoticon"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetEmoticonListResponseEmoticon(betterproto.Message):
    name: str = betterproto.string_field(1)
    count: int = betterproto.int32_field(2)
    time_last_used: int = betterproto.uint32_field(3)
    use_count: int = betterproto.uint32_field(4)
    time_received: int = betterproto.uint32_field(5)
    appid: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CPlayerGetTopAchievementsForGamesRequest(betterproto.Message):
    steamid: int = betterproto.uint64_field(1)
    language: str = betterproto.string_field(2)
    max_achievements: int = betterproto.uint32_field(3)
    appids: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CPlayerGetTopAchievementsForGamesResponse(betterproto.Message):
    games: List[
        "CPlayerGetTopAchievementsForGamesResponseGame"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetTopAchievementsForGamesResponseAchievement(betterproto.Message):
    statid: int = betterproto.uint32_field(1)
    bit: int = betterproto.uint32_field(2)
    name: str = betterproto.string_field(3)
    desc: str = betterproto.string_field(4)
    icon: str = betterproto.string_field(5)
    icon_gray: str = betterproto.string_field(6)
    hidden: bool = betterproto.bool_field(7)
    player_percent_unlocked: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class CPlayerGetTopAchievementsForGamesResponseGame(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    total_achievements: int = betterproto.uint32_field(2)
    achievements: List[
        "CPlayerGetTopAchievementsForGamesResponseAchievement"
    ] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CPlayerGetAchievementsProgressRequest(betterproto.Message):
    steamid: int = betterproto.uint64_field(1)
    language: str = betterproto.string_field(2)
    appids: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CPlayerGetAchievementsProgressResponse(betterproto.Message):
    achievement_progress: List[
        "CPlayerGetAchievementsProgressResponseAchievementProgress"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetAchievementsProgressResponseAchievementProgress(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    unlocked: int = betterproto.uint32_field(2)
    total: int = betterproto.uint32_field(3)
    percentage: float = betterproto.float_field(4)
    all_unlocked: bool = betterproto.bool_field(5)
    cache_time: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CPlayerGetGameAchievementsRequest(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    language: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetGameAchievementsResponse(betterproto.Message):
    achievements: List[
        "CPlayerGetGameAchievementsResponseAchievement"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetGameAchievementsResponseAchievement(betterproto.Message):
    internal_name: str = betterproto.string_field(1)
    localized_name: str = betterproto.string_field(2)
    localized_desc: str = betterproto.string_field(3)
    icon: str = betterproto.string_field(4)
    icon_gray: str = betterproto.string_field(5)
    hidden: bool = betterproto.bool_field(6)
    player_percent_unlocked: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class CPlayerGetFavoriteBadgeRequest(betterproto.Message):
    steamid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetFavoriteBadgeResponse(betterproto.Message):
    has_favorite_badge: bool = betterproto.bool_field(1)
    badgeid: int = betterproto.uint32_field(2)
    communityitemid: int = betterproto.uint64_field(3)
    item_type: int = betterproto.uint32_field(4)
    border_color: int = betterproto.uint32_field(5)
    appid: int = betterproto.uint32_field(6)
    level: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class CPlayerSetFavoriteBadgeRequest(betterproto.Message):
    communityitemid: int = betterproto.uint64_field(1)
    badgeid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CPlayerSetFavoriteBadgeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerGetProfileCustomizationRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    include_inactive_customizations: bool = betterproto.bool_field(2)
    include_purchased_customizations: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ProfileCustomizationSlot(betterproto.Message):
    slot: int = betterproto.uint32_field(1)
    appid: int = betterproto.uint32_field(2)
    publishedfileid: int = betterproto.uint64_field(3)
    item_assetid: int = betterproto.uint64_field(4)
    item_contextid: int = betterproto.uint64_field(5)
    notes: str = betterproto.string_field(6)
    title: str = betterproto.string_field(7)
    accountid: int = betterproto.uint32_field(8)
    badgeid: int = betterproto.uint32_field(9)
    border_color: int = betterproto.uint32_field(10)
    item_classid: int = betterproto.uint64_field(11)
    item_instanceid: int = betterproto.uint64_field(12)
    ban_check_result: "EBanContentCheckResult" = betterproto.enum_field(13)
    replay_year: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class ProfileCustomization(betterproto.Message):
    customization_type: "EProfileCustomizationType" = betterproto.enum_field(1)
    large: bool = betterproto.bool_field(2)
    slots: List["ProfileCustomizationSlot"] = betterproto.message_field(3)
    active: bool = betterproto.bool_field(4)
    customization_style: "EProfileCustomizationStyle" = betterproto.enum_field(5)
    purchaseid: int = betterproto.uint64_field(6)
    level: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ProfileTheme(betterproto.Message):
    theme_id: str = betterproto.string_field(1)
    title: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ProfilePreferences(betterproto.Message):
    hide_profile_awards: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetProfileCustomizationResponse(betterproto.Message):
    customizations: List["ProfileCustomization"] = betterproto.message_field(1)
    slots_available: int = betterproto.uint32_field(2)
    profile_theme: "ProfileTheme" = betterproto.message_field(3)
    purchased_customizations: List[
        "CPlayerGetProfileCustomizationResponsePurchasedCustomization"
    ] = betterproto.message_field(4)
    profile_preferences: "ProfilePreferences" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class CPlayerGetProfileCustomizationResponsePurchasedCustomization(betterproto.Message):
    purchaseid: int = betterproto.uint64_field(1)
    customization_type: "EProfileCustomizationType" = betterproto.enum_field(2)
    level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CPlayerGetPurchasedProfileCustomizationsRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetPurchasedProfileCustomizationsResponse(betterproto.Message):
    purchased_customizations: List[
        "CPlayerGetPurchasedProfileCustomizationsResponsePurchasedCustomization"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetPurchasedProfileCustomizationsResponsePurchasedCustomization(
    betterproto.Message
):
    purchaseid: int = betterproto.uint64_field(1)
    customization_type: "EProfileCustomizationType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetPurchasedAndUpgradedProfileCustomizationsRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetPurchasedAndUpgradedProfileCustomizationsResponse(betterproto.Message):
    purchased_customizations: List[
        "CPlayerGetPurchasedAndUpgradedProfileCustomizationsResponsePurchasedCustomization"
    ] = betterproto.message_field(1)
    upgraded_customizations: List[
        "CPlayerGetPurchasedAndUpgradedProfileCustomizationsResponseUpgradedCustomization"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetPurchasedAndUpgradedProfileCustomizationsResponsePurchasedCustomization(
    betterproto.Message
):
    customization_type: "EProfileCustomizationType" = betterproto.enum_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetPurchasedAndUpgradedProfileCustomizationsResponseUpgradedCustomization(
    betterproto.Message
):
    customization_type: "EProfileCustomizationType" = betterproto.enum_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetProfileThemesAvailableRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerGetProfileThemesAvailableResponse(betterproto.Message):
    profile_themes: List["ProfileTheme"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerSetProfileThemeRequest(betterproto.Message):
    theme_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CPlayerSetProfileThemeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerSetProfilePreferencesRequest(betterproto.Message):
    profile_preferences: "ProfilePreferences" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerSetProfilePreferencesResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerPostStatusToFriendsRequest(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    status_text: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CPlayerPostStatusToFriendsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerGetPostedStatusRequest(betterproto.Message):
    steamid: int = betterproto.uint64_field(1)
    postid: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetPostedStatusResponse(betterproto.Message):
    accountid: int = betterproto.uint32_field(1)
    postid: int = betterproto.uint64_field(2)
    status_text: str = betterproto.string_field(3)
    deleted: bool = betterproto.bool_field(4)
    appid: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CPlayerDeletePostedStatusRequest(betterproto.Message):
    postid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CPlayerDeletePostedStatusResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerGetLastPlayedTimesRequest(betterproto.Message):
    min_last_played: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetLastPlayedTimesResponse(betterproto.Message):
    games: List["CPlayerGetLastPlayedTimesResponseGame"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetLastPlayedTimesResponseGame(betterproto.Message):
    appid: int = betterproto.int32_field(1)
    last_playtime: int = betterproto.uint32_field(2)
    playtime_2_weeks: int = betterproto.int32_field(3)
    playtime_forever: int = betterproto.int32_field(4)
    first_playtime: int = betterproto.uint32_field(5)
    playtime_windows_forever: int = betterproto.int32_field(6)
    playtime_mac_forever: int = betterproto.int32_field(7)
    playtime_linux_forever: int = betterproto.int32_field(8)
    first_windows_playtime: int = betterproto.uint32_field(9)
    first_mac_playtime: int = betterproto.uint32_field(10)
    first_linux_playtime: int = betterproto.uint32_field(11)
    last_windows_playtime: int = betterproto.uint32_field(12)
    last_mac_playtime: int = betterproto.uint32_field(13)
    last_linux_playtime: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class CPlayerGetTimeSsaAcceptedRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerGetTimeSsaAcceptedResponse(betterproto.Message):
    time_ssa_accepted: int = betterproto.uint32_field(1)
    time_ssa_updated: int = betterproto.uint32_field(2)
    time_chinassa_accepted: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CPlayerAcceptSsaRequest(betterproto.Message):
    agreement_type: "EAgreementType" = betterproto.enum_field(1)
    time_signed_utc: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CPlayerAcceptSsaResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerGetNicknameListRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerGetNicknameListResponse(betterproto.Message):
    nicknames: List[
        "CPlayerGetNicknameListResponsePlayerNickname"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetNicknameListResponsePlayerNickname(betterproto.Message):
    accountid: int = betterproto.fixed32_field(1)
    nickname: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CPlayerGetPerFriendPreferencesRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PerFriendPreferences(betterproto.Message):
    accountid: int = betterproto.fixed32_field(1)
    nickname: str = betterproto.string_field(2)
    notifications_showingame: "ENotificationSetting" = betterproto.enum_field(3)
    notifications_showonline: "ENotificationSetting" = betterproto.enum_field(4)
    notifications_showmessages: "ENotificationSetting" = betterproto.enum_field(5)
    sounds_showingame: "ENotificationSetting" = betterproto.enum_field(6)
    sounds_showonline: "ENotificationSetting" = betterproto.enum_field(7)
    sounds_showmessages: "ENotificationSetting" = betterproto.enum_field(8)
    notifications_sendmobile: "ENotificationSetting" = betterproto.enum_field(9)


@dataclass(eq=False, repr=False)
class CPlayerGetPerFriendPreferencesResponse(betterproto.Message):
    preferences: List["PerFriendPreferences"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerSetPerFriendPreferencesRequest(betterproto.Message):
    preferences: "PerFriendPreferences" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerSetPerFriendPreferencesResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerAddFriendRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CPlayerAddFriendResponse(betterproto.Message):
    invite_sent: bool = betterproto.bool_field(1)
    friend_relationship: int = betterproto.uint32_field(2)
    result: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class CPlayerRemoveFriendRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CPlayerRemoveFriendResponse(betterproto.Message):
    friend_relationship: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CPlayerIgnoreFriendRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    unignore: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CPlayerIgnoreFriendResponse(betterproto.Message):
    friend_relationship: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetCommunityPreferencesRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerCommunityPreferences(betterproto.Message):
    parenthesize_nicknames: bool = betterproto.bool_field(4)
    text_filter_setting: "ETextFilterSetting" = betterproto.enum_field(5)
    text_filter_ignore_friends: bool = betterproto.bool_field(6)
    text_filter_words_revision: int = betterproto.uint32_field(7)
    timestamp_updated: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CPlayerGetCommunityPreferencesResponse(betterproto.Message):
    preferences: "CPlayerCommunityPreferences" = betterproto.message_field(1)
    content_descriptor_preferences: "UserContentDescriptorPreferences" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class CPlayerSetCommunityPreferencesRequest(betterproto.Message):
    preferences: "CPlayerCommunityPreferences" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerSetCommunityPreferencesResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerGetTextFilterWordsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerTextFilterWords(betterproto.Message):
    text_filter_custom_banned_words: List[str] = betterproto.string_field(1)
    text_filter_custom_clean_words: List[str] = betterproto.string_field(2)
    text_filter_words_revision: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CPlayerGetTextFilterWordsResponse(betterproto.Message):
    words: "CPlayerTextFilterWords" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetNewSteamAnnouncementStateRequest(betterproto.Message):
    language: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetNewSteamAnnouncementStateResponse(betterproto.Message):
    state: "ENewSteamAnnouncementState" = betterproto.enum_field(1)
    announcement_headline: str = betterproto.string_field(2)
    announcement_url: str = betterproto.string_field(3)
    time_posted: int = betterproto.uint32_field(4)
    announcement_gid: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class CPlayerUpdateSteamAnnouncementLastReadRequest(betterproto.Message):
    announcement_gid: int = betterproto.uint64_field(1)
    time_posted: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CPlayerUpdateSteamAnnouncementLastReadResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerGetPrivacySettingsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPrivacySettings(betterproto.Message):
    privacy_state: int = betterproto.int32_field(1)
    privacy_state_inventory: int = betterproto.int32_field(2)
    privacy_state_gifts: int = betterproto.int32_field(3)
    privacy_state_ownedgames: int = betterproto.int32_field(4)
    privacy_state_playtime: int = betterproto.int32_field(5)
    privacy_state_friendslist: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class CPlayerGetPrivacySettingsResponse(betterproto.Message):
    privacy_settings: "CPrivacySettings" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetDurationControlRequest(betterproto.Message):
    appid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CPlayerGetDurationControlResponse(betterproto.Message):
    is_enabled: bool = betterproto.bool_field(1)
    seconds: int = betterproto.int32_field(2)
    seconds_today: int = betterproto.int32_field(3)
    is_steamchina_account: bool = betterproto.bool_field(4)
    is_age_verified: bool = betterproto.bool_field(5)
    seconds_allowed_today: int = betterproto.uint32_field(6)
    age_verification_pending: bool = betterproto.bool_field(7)
    block_minors: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class CPlayerRecordDisconnectedPlaytimeRequest(betterproto.Message):
    play_sessions: List[
        "CPlayerRecordDisconnectedPlaytimeRequestPlayHistory"
    ] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CPlayerRecordDisconnectedPlaytimeRequestPlayHistory(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    session_time_start: int = betterproto.uint32_field(2)
    seconds: int = betterproto.uint32_field(3)
    offline: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CPlayerRecordDisconnectedPlaytimeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CPlayerLastPlayedTimesNotification(betterproto.Message):
    games: List["CPlayerGetLastPlayedTimesResponseGame"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerFriendNicknameChangedNotification(betterproto.Message):
    accountid: int = betterproto.fixed32_field(1)
    nickname: str = betterproto.string_field(2)
    is_echo_to_self: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CPlayerFriendEquippedProfileItemsChangedNotification(betterproto.Message):
    accountid: int = betterproto.fixed32_field(1)


@dataclass(eq=False, repr=False)
class CPlayerNewSteamAnnouncementStateNotification(betterproto.Message):
    state: "ENewSteamAnnouncementState" = betterproto.enum_field(1)
    announcement_headline: str = betterproto.string_field(2)
    announcement_url: str = betterproto.string_field(3)
    time_posted: int = betterproto.uint32_field(4)
    announcement_gid: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class CPlayerCommunityPreferencesChangedNotification(betterproto.Message):
    preferences: "CPlayerCommunityPreferences" = betterproto.message_field(1)
    content_descriptor_preferences: "UserContentDescriptorPreferences" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class CPlayerTextFilterWordsChangedNotification(betterproto.Message):
    words: "CPlayerTextFilterWords" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CPlayerPerFriendPreferencesChangedNotification(betterproto.Message):
    accountid: int = betterproto.fixed32_field(1)
    preferences: "PerFriendPreferences" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CPlayerPrivacySettingsChangedNotification(betterproto.Message):
    privacy_settings: "CPrivacySettings" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CHelpRequestLogsUploadUserApplicationLogRequest(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    log_type: str = betterproto.string_field(2)
    version_string: str = betterproto.string_field(3)
    log_contents: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CHelpRequestLogsUploadUserApplicationLogResponse(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientAppMinutesPlayedData(betterproto.Message):
    minutes_played: List[
        "CMsgClientAppMinutesPlayedDataAppMinutesPlayedData"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientAppMinutesPlayedDataAppMinutesPlayedData(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)
    forever: int = betterproto.int32_field(2)
    last_two_weeks: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class CCommunityGetAppsRequest(betterproto.Message):
    appids: List[int] = betterproto.int32_field(1)
    language: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CCommunityGetAppsResponse(betterproto.Message):
    apps: List["CcddbAppDetailCommon"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CCommunityGetAppRichPresenceLocalizationRequest(betterproto.Message):
    appid: int = betterproto.int32_field(1)
    language: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CCommunityGetAppRichPresenceLocalizationResponse(betterproto.Message):
    appid: int = betterproto.int32_field(1)
    token_lists: List[
        "CCommunityGetAppRichPresenceLocalizationResponseTokenList"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CCommunityGetAppRichPresenceLocalizationResponseToken(betterproto.Message):
    name: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CCommunityGetAppRichPresenceLocalizationResponseTokenList(betterproto.Message):
    language: str = betterproto.string_field(1)
    tokens: List[
        "CCommunityGetAppRichPresenceLocalizationResponseToken"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CCommunityGetCommentThreadRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    comment_thread_type: int = betterproto.uint32_field(2)
    gidfeature: int = betterproto.fixed64_field(3)
    gidfeature2: int = betterproto.fixed64_field(4)
    commentthreadid: int = betterproto.fixed64_field(5)
    start: int = betterproto.int32_field(6)
    count: int = betterproto.int32_field(7)
    upvoters: int = betterproto.int32_field(8)
    include_deleted: bool = betterproto.bool_field(9)
    gidcomment: int = betterproto.fixed64_field(10)
    time_oldest: int = betterproto.uint32_field(11)
    oldest_first: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class CCommunityComment(betterproto.Message):
    gidcomment: int = betterproto.fixed64_field(1)
    steamid: int = betterproto.fixed64_field(2)
    timestamp: int = betterproto.uint32_field(3)
    text: str = betterproto.string_field(4)
    upvotes: int = betterproto.int32_field(5)
    hidden: bool = betterproto.bool_field(6)
    hidden_by_user: bool = betterproto.bool_field(7)
    deleted: bool = betterproto.bool_field(8)
    ipaddress: "CMsgIpAddress" = betterproto.message_field(9)
    total_hidden: int = betterproto.int32_field(10)
    upvoted_by_user: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class CCommunityGetCommentThreadResponse(betterproto.Message):
    comments: List["CCommunityComment"] = betterproto.message_field(1)
    deleted_comments: List["CCommunityComment"] = betterproto.message_field(2)
    steamid: int = betterproto.fixed64_field(3)
    commentthreadid: int = betterproto.fixed64_field(4)
    start: int = betterproto.int32_field(5)
    count: int = betterproto.int32_field(6)
    total_count: int = betterproto.int32_field(7)
    upvotes: int = betterproto.int32_field(8)
    upvoters: List[int] = betterproto.uint32_field(9)
    user_subscribed: bool = betterproto.bool_field(10)
    user_upvoted: bool = betterproto.bool_field(11)
    answer_commentid: int = betterproto.fixed64_field(12)
    answer_actor: int = betterproto.uint32_field(13)
    answer_actor_rank: int = betterproto.int32_field(14)
    can_post: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class CCommunityPostCommentToThreadRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    comment_thread_type: int = betterproto.uint32_field(2)
    gidfeature: int = betterproto.fixed64_field(3)
    gidfeature2: int = betterproto.fixed64_field(4)
    text: str = betterproto.string_field(6)
    gidparentcomment: int = betterproto.fixed64_field(7)
    suppress_notifications: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class CCommunityPostCommentToThreadResponse(betterproto.Message):
    gidcomment: int = betterproto.fixed64_field(1)
    commentthreadid: int = betterproto.fixed64_field(2)
    count: int = betterproto.int32_field(3)
    upvotes: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class CCommunityDeleteCommentFromThreadRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    comment_thread_type: int = betterproto.uint32_field(2)
    gidfeature: int = betterproto.fixed64_field(3)
    gidfeature2: int = betterproto.fixed64_field(4)
    gidcomment: int = betterproto.fixed64_field(5)
    undelete: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class CCommunityDeleteCommentFromThreadResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CCommunityRateCommentThreadRequest(betterproto.Message):
    commentthreadtype: str = betterproto.string_field(1)
    steamid: int = betterproto.uint64_field(2)
    gidfeature: int = betterproto.uint64_field(3)
    gidfeature2: int = betterproto.uint64_field(4)
    gidcomment: int = betterproto.uint64_field(5)
    rate_up: bool = betterproto.bool_field(6)
    suppress_notifications: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class CCommunityRateCommentThreadResponse(betterproto.Message):
    gidcomment: int = betterproto.uint64_field(1)
    commentthreadid: int = betterproto.uint64_field(2)
    count: int = betterproto.uint32_field(3)
    upvotes: int = betterproto.uint32_field(4)
    has_upvoted: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class CCommunityGetCommentThreadRatingsRequest(betterproto.Message):
    commentthreadtype: str = betterproto.string_field(1)
    steamid: int = betterproto.uint64_field(2)
    gidfeature: int = betterproto.uint64_field(3)
    gidfeature2: int = betterproto.uint64_field(4)
    gidcomment: int = betterproto.uint64_field(5)
    max_results: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CCommunityGetCommentThreadRatingsResponse(betterproto.Message):
    commentthreadid: int = betterproto.uint64_field(1)
    gidcomment: int = betterproto.uint64_field(2)
    upvotes: int = betterproto.uint32_field(3)
    has_upvoted: bool = betterproto.bool_field(4)
    upvoter_accountids: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CCommunityRateClanAnnouncementRequest(betterproto.Message):
    announcementid: int = betterproto.uint64_field(1)
    vote_up: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CCommunityRateClanAnnouncementResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CCommunityGetClanAnnouncementVoteForUserRequest(betterproto.Message):
    announcementid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CCommunityGetClanAnnouncementVoteForUserResponse(betterproto.Message):
    voted_up: bool = betterproto.bool_field(1)
    voted_down: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CAppPriority(betterproto.Message):
    priority: int = betterproto.uint32_field(1)
    appid: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CCommunityGetUserPartnerEventNewsRequest(betterproto.Message):
    count: int = betterproto.uint32_field(1)
    offset: int = betterproto.uint32_field(2)
    rtime32_start_time: int = betterproto.uint32_field(3)
    rtime32_end_time: int = betterproto.uint32_field(4)
    language_preference: List[int] = betterproto.uint32_field(5)
    filter_event_type: List[int] = betterproto.int32_field(6)
    filter_to_appid: bool = betterproto.bool_field(7)
    app_list: List["CAppPriority"] = betterproto.message_field(8)
    count_after: int = betterproto.uint32_field(9)
    count_before: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class CCommunityGetUserPartnerEventNewsResponse(betterproto.Message):
    results: List["CClanMatchEventByRange"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CCommunityGetBestEventsForUserRequest(betterproto.Message):
    include_steam_blog: bool = betterproto.bool_field(1)
    filter_to_played_within_days: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CCommunityPartnerEventResult(betterproto.Message):
    clanid: int = betterproto.uint32_field(1)
    event_gid: int = betterproto.fixed64_field(2)
    announcement_gid: int = betterproto.fixed64_field(3)
    appid: int = betterproto.uint32_field(4)
    possible_takeover: bool = betterproto.bool_field(5)
    rtime32_last_modified: int = betterproto.uint32_field(6)
    user_app_priority: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class CCommunityGetBestEventsForUserResponse(betterproto.Message):
    results: List["CCommunityPartnerEventResult"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CCommunityClearUserPartnerEventsAppPrioritiesRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CCommunityClearUserPartnerEventsAppPrioritiesResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CCommunityPartnerEventsAppPriority(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    user_app_priority: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CCommunityGetUserPartnerEventsAppPrioritiesRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CCommunityGetUserPartnerEventsAppPrioritiesResponse(betterproto.Message):
    priorities: List["CCommunityPartnerEventsAppPriority"] = betterproto.message_field(
        1
    )


@dataclass(eq=False, repr=False)
class CCommunityClearSinglePartnerEventsAppPriorityRequest(betterproto.Message):
    appid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CCommunityClearSinglePartnerEventsAppPriorityResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CCommunityPartnerEventsShowMoreForAppRequest(betterproto.Message):
    appid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CCommunityPartnerEventsShowMoreForAppResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CCommunityPartnerEventsShowLessForAppRequest(betterproto.Message):
    appid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CCommunityPartnerEventsShowLessForAppResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CCommunityMarkPartnerEventsForUserRequest(betterproto.Message):
    markings: List[
        "CCommunityMarkPartnerEventsForUserRequestPartnerEventMarking"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CCommunityMarkPartnerEventsForUserRequestPartnerEventMarking(betterproto.Message):
    clanid: int = betterproto.uint32_field(1)
    event_gid: int = betterproto.fixed64_field(2)
    display_location: int = betterproto.int32_field(3)
    mark_shown: bool = betterproto.bool_field(4)
    mark_read: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class CCommunityMarkPartnerEventsForUserResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CProductImpressionsFromClientNotification(betterproto.Message):
    impressions: List[
        "CProductImpressionsFromClientNotificationImpression"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CProductImpressionsFromClientNotificationImpression(betterproto.Message):
    type: int = betterproto.int32_field(1)
    appid: int = betterproto.uint32_field(2)
    num_impressions: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CFriendsListCategory(betterproto.Message):
    groupid: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)
    accountid_members: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CFriendsListGetCategoriesRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CFriendsListGetCategoriesResponse(betterproto.Message):
    categories: List["CFriendsListCategory"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CFriendsListFavoriteEntry(betterproto.Message):
    accountid: int = betterproto.uint32_field(1)
    clanid: int = betterproto.uint32_field(2)
    chat_group_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CFriendsListGetFavoritesRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CFriendsListGetFavoritesResponse(betterproto.Message):
    favorites: List["CFriendsListFavoriteEntry"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CFriendsListSetFavoritesRequest(betterproto.Message):
    favorites: List["CFriendsListFavoriteEntry"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CFriendsListSetFavoritesResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CFriendsListFavoritesChangedNotification(betterproto.Message):
    favorites: List["CFriendsListFavoriteEntry"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CFriendsListGetFriendsListRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CFriendsListGetFriendsListResponse(betterproto.Message):
    friendslist: "CMsgClientFriendsList" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientUcmEnumerateUserPublishedFiles(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)
    start_index: int = betterproto.uint32_field(2)
    sort_order: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientUcmEnumerateUserPublishedFilesResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    published_files: List[
        "CMsgClientUcmEnumerateUserPublishedFilesResponsePublishedFileId"
    ] = betterproto.message_field(2)
    total_results: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientUcmEnumerateUserPublishedFilesResponsePublishedFileId(
    betterproto.Message
):
    published_file_id: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientUcmEnumerateUserSubscribedFiles(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)
    start_index: int = betterproto.uint32_field(2)
    list_type: int = betterproto.uint32_field(3)
    matching_file_type: int = betterproto.uint32_field(4)
    count: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgClientUcmEnumerateUserSubscribedFilesResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    subscribed_files: List[
        "CMsgClientUcmEnumerateUserSubscribedFilesResponsePublishedFileId"
    ] = betterproto.message_field(2)
    total_results: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientUcmEnumerateUserSubscribedFilesResponsePublishedFileId(
    betterproto.Message
):
    published_file_id: int = betterproto.fixed64_field(1)
    rtime32_subscribed: int = betterproto.fixed32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientUcmPublishedFileDeleted(betterproto.Message):
    published_file_id: int = betterproto.fixed64_field(1)
    app_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientWorkshopItemInfoRequest(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)
    last_time_updated: int = betterproto.uint32_field(2)
    workshop_items: List[
        "CMsgClientWorkshopItemInfoRequestWorkshopItem"
    ] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientWorkshopItemInfoRequestWorkshopItem(betterproto.Message):
    published_file_id: int = betterproto.fixed64_field(1)
    time_updated: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientWorkshopItemInfoResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    update_time: int = betterproto.uint32_field(2)
    workshop_items: List[
        "CMsgClientWorkshopItemInfoResponseWorkshopItemInfo"
    ] = betterproto.message_field(3)
    private_items: List[int] = betterproto.fixed64_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientWorkshopItemInfoResponseWorkshopItemInfo(betterproto.Message):
    published_file_id: int = betterproto.fixed64_field(1)
    time_updated: int = betterproto.uint32_field(2)
    manifest_id: int = betterproto.fixed64_field(3)
    is_legacy: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientUcmGetPublishedFilesForUser(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)
    creator_steam_id: int = betterproto.fixed64_field(2)
    required_tags: List[str] = betterproto.string_field(3)
    excluded_tags: List[str] = betterproto.string_field(4)
    start_index: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgClientUcmGetPublishedFilesForUserResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    published_files: List[
        "CMsgClientUcmGetPublishedFilesForUserResponsePublishedFileId"
    ] = betterproto.message_field(2)
    total_results: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientUcmGetPublishedFilesForUserResponsePublishedFileId(betterproto.Message):
    published_file_id: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CMsgCreEnumeratePublishedFiles(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)
    query_type: int = betterproto.int32_field(2)
    start_index: int = betterproto.uint32_field(3)
    days: int = betterproto.uint32_field(4)
    count: int = betterproto.uint32_field(5)
    tags: List[str] = betterproto.string_field(6)
    user_tags: List[str] = betterproto.string_field(7)
    matching_file_type: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class CMsgCreEnumeratePublishedFilesResponse(betterproto.Message):
    eresult: int = betterproto.int32_field(1)
    published_files: List[
        "CMsgCreEnumeratePublishedFilesResponsePublishedFileId"
    ] = betterproto.message_field(2)
    total_results: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgCreEnumeratePublishedFilesResponsePublishedFileId(betterproto.Message):
    published_file_id: int = betterproto.fixed64_field(1)
    votes_for: int = betterproto.int32_field(2)
    votes_against: int = betterproto.int32_field(3)
    reports: int = betterproto.int32_field(4)
    score: float = betterproto.float_field(5)


@dataclass(eq=False, repr=False)
class CMsgGameServerPingSample(betterproto.Message):
    my_ip: int = betterproto.fixed32_field(1)
    gs_app_id: int = betterproto.int32_field(2)
    gs_samples: List["CMsgGameServerPingSampleSample"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgGameServerPingSampleSample(betterproto.Message):
    ip: int = betterproto.fixed32_field(1)
    avg_ping_ms: int = betterproto.uint32_field(2)
    stddev_ping_ms_x10: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CClanRespondToClanInviteRequest(betterproto.Message):
    steamid: int = betterproto.fixed64_field(1)
    accept: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CClanRespondToClanInviteResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CVoiceChatRequestOneOnOneChatRequest(betterproto.Message):
    steamid_partner: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CVoiceChatRequestOneOnOneChatResponse(betterproto.Message):
    voice_chatid: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CVoiceChatOneOnOneChatRequestedNotification(betterproto.Message):
    voice_chatid: int = betterproto.fixed64_field(1)
    steamid_partner: int = betterproto.fixed64_field(2)


@dataclass(eq=False, repr=False)
class CVoiceChatAnswerOneOnOneChatRequest(betterproto.Message):
    voice_chatid: int = betterproto.fixed64_field(1)
    steamid_partner: int = betterproto.fixed64_field(2)
    accepted_request: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CVoiceChatAnswerOneOnOneChatResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CVoiceChatOneOnOneChatRequestResponseNotification(betterproto.Message):
    voicechat_id: int = betterproto.fixed64_field(1)
    steamid_partner: int = betterproto.fixed64_field(2)
    accepted_request: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CVoiceChatEndOneOnOneChatRequest(betterproto.Message):
    steamid_partner: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CVoiceChatEndOneOnOneChatResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CVoiceChatLeaveOneOnOneChatRequest(betterproto.Message):
    steamid_partner: int = betterproto.fixed64_field(1)
    voice_chatid: int = betterproto.fixed64_field(2)


@dataclass(eq=False, repr=False)
class CVoiceChatLeaveOneOnOneChatResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CVoiceChatUserJoinedVoiceChatNotification(betterproto.Message):
    voice_chatid: int = betterproto.fixed64_field(1)
    user_steamid: int = betterproto.fixed64_field(2)
    chatid: int = betterproto.uint64_field(3)
    one_on_one_steamid_lower: int = betterproto.fixed64_field(4)
    one_on_one_steamid_higher: int = betterproto.fixed64_field(5)
    chat_group_id: int = betterproto.uint64_field(6)
    user_sessionid: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class CVoiceChatUserVoiceStatusNotification(betterproto.Message):
    voice_chatid: int = betterproto.fixed64_field(1)
    user_steamid: int = betterproto.fixed64_field(2)
    user_muted_mic_locally: bool = betterproto.bool_field(3)
    user_muted_output_locally: bool = betterproto.bool_field(4)
    user_has_no_mic_for_session: bool = betterproto.bool_field(5)
    user_webaudio_sample_rate: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class CVoiceChatAllMembersStatusNotification(betterproto.Message):
    voice_chatid: int = betterproto.fixed64_field(1)
    users: List["CVoiceChatUserVoiceStatusNotification"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CVoiceChatUpdateVoiceChatWebRtcDataRequest(betterproto.Message):
    voice_chatid: int = betterproto.fixed64_field(1)
    ip_webrtc_server: int = betterproto.uint32_field(2)
    port_webrtc_server: int = betterproto.uint32_field(3)
    ip_webrtc_client: int = betterproto.uint32_field(4)
    port_webrtc_client: int = betterproto.uint32_field(5)
    ssrc_my_sending_stream: int = betterproto.uint32_field(6)
    user_agent: str = betterproto.string_field(7)
    has_audio_worklets_support: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class CVoiceChatUpdateVoiceChatWebRtcDataResponse(betterproto.Message):
    send_client_voice_logs: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CVoiceChatUploadClientVoiceChatLogsRequest(betterproto.Message):
    voice_chatid: int = betterproto.fixed64_field(1)
    client_voice_logs_new_lines: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CVoiceChatUploadClientVoiceChatLogsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CVoiceChatLeaveVoiceChatRequest(betterproto.Message):
    voice_chatid: int = betterproto.fixed64_field(1)


@dataclass(eq=False, repr=False)
class CVoiceChatLeaveVoiceChatResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CVoiceChatUserLeftVoiceChatNotification(betterproto.Message):
    voice_chatid: int = betterproto.fixed64_field(1)
    user_steamid: int = betterproto.fixed64_field(2)
    chatid: int = betterproto.uint64_field(3)
    one_on_one_steamid_lower: int = betterproto.fixed64_field(4)
    one_on_one_steamid_higher: int = betterproto.fixed64_field(5)
    chat_group_id: int = betterproto.uint64_field(6)
    user_sessionid: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class CVoiceChatVoiceChatEndedNotification(betterproto.Message):
    voice_chatid: int = betterproto.fixed64_field(1)
    one_on_one_steamid_lower: int = betterproto.fixed64_field(2)
    one_on_one_steamid_higher: int = betterproto.fixed64_field(3)
    chatid: int = betterproto.uint64_field(4)
    chat_group_id: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class CWebRtcClientInitiateWebRtcConnectionRequest(betterproto.Message):
    sdp: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CWebRtcClientInitiateWebRtcConnectionResponse(betterproto.Message):
    remote_description: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CWebRtcWebRtcSessionConnectedNotification(betterproto.Message):
    ssrc: int = betterproto.uint32_field(1)
    client_ip: int = betterproto.uint32_field(2)
    client_port: int = betterproto.uint32_field(3)
    server_ip: int = betterproto.uint32_field(4)
    server_port: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CWebRtcWebRtcUpdateRemoteDescriptionNotification(betterproto.Message):
    remote_description: str = betterproto.string_field(1)
    remote_description_version: int = betterproto.uint64_field(2)
    ssrcs_to_accountids: List[
        "CWebRtcWebRtcUpdateRemoteDescriptionNotificationCssrcToAccountIdMapping"
    ] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CWebRtcWebRtcUpdateRemoteDescriptionNotificationCssrcToAccountIdMapping(
    betterproto.Message
):
    ssrc: int = betterproto.uint32_field(1)
    accountid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CWebRtcClientAcknowledgeUpdatedRemoteDescriptionRequest(betterproto.Message):
    ip_webrtc_server: int = betterproto.uint32_field(1)
    port_webrtc_server: int = betterproto.uint32_field(2)
    ip_webrtc_session_client: int = betterproto.uint32_field(3)
    port_webrtc_session_client: int = betterproto.uint32_field(4)
    remote_description_version: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class CWebRtcClientAcknowledgeUpdatedRemoteDescriptionResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMobilePerAccountGetSettingsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMobilePerAccountGetSettingsResponse(betterproto.Message):
    has_settings: bool = betterproto.bool_field(4)
    allow_sale_push: bool = betterproto.bool_field(2)
    allow_wishlist_push: bool = betterproto.bool_field(3)
    chat_notification_level: int = betterproto.uint32_field(5)
    notify_direct_chat: bool = betterproto.bool_field(6)
    notify_group_chat: bool = betterproto.bool_field(7)
    allow_event_push: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class CMobilePerAccountSetSettingsRequest(betterproto.Message):
    allow_sale_push: bool = betterproto.bool_field(2)
    allow_wishlist_push: bool = betterproto.bool_field(3)
    chat_notification_level: int = betterproto.uint32_field(4)
    notify_direct_chat: bool = betterproto.bool_field(5)
    notify_group_chat: bool = betterproto.bool_field(6)
    allow_event_push: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class CMobilePerAccountSetSettingsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMobileDeviceRegisterMobileDeviceRequest(betterproto.Message):
    deviceid: str = betterproto.string_field(1)
    language: str = betterproto.string_field(2)
    push_enabled: bool = betterproto.bool_field(3)
    app_version: str = betterproto.string_field(4)
    os_version: str = betterproto.string_field(5)
    device_model: str = betterproto.string_field(6)
    twofactor_device_identifier: str = betterproto.string_field(7)
    mobile_app: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class CMobileDeviceRegisterMobileDeviceResponse(betterproto.Message):
    unique_deviceid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMobileDeviceDeregisterMobileDeviceNotification(betterproto.Message):
    deviceid: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UnknownProto(betterproto.Message):
    pass


class CloudConfigStoreStub(betterproto.ServiceStub):
    async def download(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCloudConfigStoreDownloadResponse":
        return await self._unary_unary(
            "/CloudConfigStore/Download",
            CCloudConfigStoreDownloadRequest,
            CCloudConfigStoreDownloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def upload(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCloudConfigStoreUploadResponse":
        return await self._unary_unary(
            "/CloudConfigStore/Upload",
            CCloudConfigStoreUploadRequest,
            CCloudConfigStoreUploadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class CloudConfigStoreClientStub(betterproto.ServiceStub):
    async def notify_change(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/CloudConfigStoreClient/NotifyChange",
            CCloudConfigStoreChangeNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class AuthenticationStub(betterproto.ServiceStub):
    async def get_password_rsa_public_key(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationGetPasswordRsaPublicKeyResponse":
        return await self._unary_unary(
            "/Authentication/GetPasswordRSAPublicKey",
            CAuthenticationGetPasswordRsaPublicKeyRequest,
            CAuthenticationGetPasswordRsaPublicKeyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def begin_auth_session_via_qr(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationBeginAuthSessionViaQrResponse":
        return await self._unary_unary(
            "/Authentication/BeginAuthSessionViaQR",
            CAuthenticationBeginAuthSessionViaQrRequest,
            CAuthenticationBeginAuthSessionViaQrResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def begin_auth_session_via_credentials(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationBeginAuthSessionViaCredentialsResponse":
        return await self._unary_unary(
            "/Authentication/BeginAuthSessionViaCredentials",
            CAuthenticationBeginAuthSessionViaCredentialsRequest,
            CAuthenticationBeginAuthSessionViaCredentialsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def poll_auth_session_status(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationPollAuthSessionStatusResponse":
        return await self._unary_unary(
            "/Authentication/PollAuthSessionStatus",
            CAuthenticationPollAuthSessionStatusRequest,
            CAuthenticationPollAuthSessionStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_auth_session_info(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationGetAuthSessionInfoResponse":
        return await self._unary_unary(
            "/Authentication/GetAuthSessionInfo",
            CAuthenticationGetAuthSessionInfoRequest,
            CAuthenticationGetAuthSessionInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_auth_session_with_mobile_confirmation(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationUpdateAuthSessionWithMobileConfirmationResponse":
        return await self._unary_unary(
            "/Authentication/UpdateAuthSessionWithMobileConfirmation",
            CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest,
            CAuthenticationUpdateAuthSessionWithMobileConfirmationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_auth_session_with_steam_guard_code(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse":
        return await self._unary_unary(
            "/Authentication/UpdateAuthSessionWithSteamGuardCode",
            CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest,
            CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def generate_access_token_for_app(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationAccessTokenGenerateForAppResponse":
        return await self._unary_unary(
            "/Authentication/GenerateAccessTokenForApp",
            CAuthenticationAccessTokenGenerateForAppRequest,
            CAuthenticationAccessTokenGenerateForAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def enumerate_tokens(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationRefreshTokenEnumerateResponse":
        return await self._unary_unary(
            "/Authentication/EnumerateTokens",
            CAuthenticationRefreshTokenEnumerateRequest,
            CAuthenticationRefreshTokenEnumerateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_auth_sessions_for_account(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationGetAuthSessionsForAccountResponse":
        return await self._unary_unary(
            "/Authentication/GetAuthSessionsForAccount",
            CAuthenticationGetAuthSessionsForAccountRequest,
            CAuthenticationGetAuthSessionsForAccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def migrate_mobile_session(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationMigrateMobileSessionResponse":
        return await self._unary_unary(
            "/Authentication/MigrateMobileSession",
            CAuthenticationMigrateMobileSessionRequest,
            CAuthenticationMigrateMobileSessionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def revoke_token(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationTokenRevokeResponse":
        return await self._unary_unary(
            "/Authentication/RevokeToken",
            CAuthenticationTokenRevokeRequest,
            CAuthenticationTokenRevokeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def revoke_refresh_token(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationRefreshTokenRevokeResponse":
        return await self._unary_unary(
            "/Authentication/RevokeRefreshToken",
            CAuthenticationRefreshTokenRevokeRequest,
            CAuthenticationRefreshTokenRevokeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class AuthenticationSupportStub(betterproto.ServiceStub):
    async def query_refresh_tokens_by_account(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationSupportQueryRefreshTokensByAccountResponse":
        return await self._unary_unary(
            "/AuthenticationSupport/QueryRefreshTokensByAccount",
            CAuthenticationSupportQueryRefreshTokensByAccountRequest,
            CAuthenticationSupportQueryRefreshTokensByAccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_refresh_token_by_id(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationSupportQueryRefreshTokenByIdResponse":
        return await self._unary_unary(
            "/AuthenticationSupport/QueryRefreshTokenByID",
            CAuthenticationSupportQueryRefreshTokenByIdRequest,
            CAuthenticationSupportQueryRefreshTokenByIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def revoke_token(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationSupportRevokeTokenResponse":
        return await self._unary_unary(
            "/AuthenticationSupport/RevokeToken",
            CAuthenticationSupportRevokeTokenRequest,
            CAuthenticationSupportRevokeTokenResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_token_history(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CAuthenticationSupportGetTokenHistoryResponse":
        return await self._unary_unary(
            "/AuthenticationSupport/GetTokenHistory",
            CAuthenticationSupportGetTokenHistoryRequest,
            CAuthenticationSupportGetTokenHistoryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class CloudGamingStub(betterproto.ServiceStub):
    async def create_nonce(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCloudGamingCreateNonceResponse":
        return await self._unary_unary(
            "/CloudGaming/CreateNonce",
            CCloudGamingCreateNonceRequest,
            CCloudGamingCreateNonceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_time_remaining(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCloudGamingGetTimeRemainingResponse":
        return await self._unary_unary(
            "/CloudGaming/GetTimeRemaining",
            CCloudGamingGetTimeRemainingRequest,
            CCloudGamingGetTimeRemainingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ChatStub(betterproto.ServiceStub):
    async def request_friend_persona_states(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRequestFriendPersonaStatesResponse":
        return await self._unary_unary(
            "/Chat/RequestFriendPersonaStates",
            CChatRequestFriendPersonaStatesRequest,
            CChatRequestFriendPersonaStatesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ChatRoomStub(betterproto.ServiceStub):
    async def create_chat_room_group(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomCreateChatRoomGroupResponse":
        return await self._unary_unary(
            "/ChatRoom/CreateChatRoomGroup",
            CChatRoomCreateChatRoomGroupRequest,
            CChatRoomCreateChatRoomGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def save_chat_room_group(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomSaveChatRoomGroupResponse":
        return await self._unary_unary(
            "/ChatRoom/SaveChatRoomGroup",
            CChatRoomSaveChatRoomGroupRequest,
            CChatRoomSaveChatRoomGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rename_chat_room_group(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomRenameChatRoomGroupResponse":
        return await self._unary_unary(
            "/ChatRoom/RenameChatRoomGroup",
            CChatRoomRenameChatRoomGroupRequest,
            CChatRoomRenameChatRoomGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_chat_room_group_tagline(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomSetChatRoomGroupTaglineResponse":
        return await self._unary_unary(
            "/ChatRoom/SetChatRoomGroupTagline",
            CChatRoomSetChatRoomGroupTaglineRequest,
            CChatRoomSetChatRoomGroupTaglineResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_chat_room_group_avatar(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomSetChatRoomGroupAvatarResponse":
        return await self._unary_unary(
            "/ChatRoom/SetChatRoomGroupAvatar",
            CChatRoomSetChatRoomGroupAvatarRequest,
            CChatRoomSetChatRoomGroupAvatarResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_chat_room_group_watching_broadcast(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomSetChatRoomGroupWatchingBroadcastResponse":
        return await self._unary_unary(
            "/ChatRoom/SetChatRoomGroupWatchingBroadcast",
            CChatRoomSetChatRoomGroupWatchingBroadcastRequest,
            CChatRoomSetChatRoomGroupWatchingBroadcastResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def join_mini_game_for_chat_room_group(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomJoinMiniGameForChatRoomGroupResponse":
        return await self._unary_unary(
            "/ChatRoom/JoinMiniGameForChatRoomGroup",
            CChatRoomJoinMiniGameForChatRoomGroupRequest,
            CChatRoomJoinMiniGameForChatRoomGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def end_mini_game_for_chat_room_group(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomEndMiniGameForChatRoomGroupResponse":
        return await self._unary_unary(
            "/ChatRoom/EndMiniGameForChatRoomGroup",
            CChatRoomEndMiniGameForChatRoomGroupRequest,
            CChatRoomEndMiniGameForChatRoomGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def mute_user_in_group(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomMuteUserResponse":
        return await self._unary_unary(
            "/ChatRoom/MuteUserInGroup",
            CChatRoomMuteUserRequest,
            CChatRoomMuteUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def kick_user_from_group(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomKickUserResponse":
        return await self._unary_unary(
            "/ChatRoom/KickUserFromGroup",
            CChatRoomKickUserRequest,
            CChatRoomKickUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_user_ban_state(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomSetUserBanStateResponse":
        return await self._unary_unary(
            "/ChatRoom/SetUserBanState",
            CChatRoomSetUserBanStateRequest,
            CChatRoomSetUserBanStateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def revoke_invite_to_group(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomRevokeInviteResponse":
        return await self._unary_unary(
            "/ChatRoom/RevokeInviteToGroup",
            CChatRoomRevokeInviteRequest,
            CChatRoomRevokeInviteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_role(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomCreateRoleResponse":
        return await self._unary_unary(
            "/ChatRoom/CreateRole",
            CChatRoomCreateRoleRequest,
            CChatRoomCreateRoleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_roles(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomGetRolesResponse":
        return await self._unary_unary(
            "/ChatRoom/GetRoles",
            CChatRoomGetRolesRequest,
            CChatRoomGetRolesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rename_role(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomRenameRoleResponse":
        return await self._unary_unary(
            "/ChatRoom/RenameRole",
            CChatRoomRenameRoleRequest,
            CChatRoomRenameRoleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def reorder_role(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomReorderRoleResponse":
        return await self._unary_unary(
            "/ChatRoom/ReorderRole",
            CChatRoomReorderRoleRequest,
            CChatRoomReorderRoleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_role(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomDeleteRoleResponse":
        return await self._unary_unary(
            "/ChatRoom/DeleteRole",
            CChatRoomDeleteRoleRequest,
            CChatRoomDeleteRoleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_role_actions(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomGetRoleActionsResponse":
        return await self._unary_unary(
            "/ChatRoom/GetRoleActions",
            CChatRoomGetRoleActionsRequest,
            CChatRoomGetRoleActionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def replace_role_actions(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomReplaceRoleActionsResponse":
        return await self._unary_unary(
            "/ChatRoom/ReplaceRoleActions",
            CChatRoomReplaceRoleActionsRequest,
            CChatRoomReplaceRoleActionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_role_to_user(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomAddRoleToUserResponse":
        return await self._unary_unary(
            "/ChatRoom/AddRoleToUser",
            CChatRoomAddRoleToUserRequest,
            CChatRoomAddRoleToUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_roles_for_user(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomGetRolesForUserResponse":
        return await self._unary_unary(
            "/ChatRoom/GetRolesForUser",
            CChatRoomGetRolesForUserRequest,
            CChatRoomGetRolesForUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_role_from_user(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomDeleteRoleFromUserResponse":
        return await self._unary_unary(
            "/ChatRoom/DeleteRoleFromUser",
            CChatRoomDeleteRoleFromUserRequest,
            CChatRoomDeleteRoleFromUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def join_chat_room_group(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomJoinChatRoomGroupResponse":
        return await self._unary_unary(
            "/ChatRoom/JoinChatRoomGroup",
            CChatRoomJoinChatRoomGroupRequest,
            CChatRoomJoinChatRoomGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def invite_friend_to_chat_room_group(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomInviteFriendToChatRoomGroupResponse":
        return await self._unary_unary(
            "/ChatRoom/InviteFriendToChatRoomGroup",
            CChatRoomInviteFriendToChatRoomGroupRequest,
            CChatRoomInviteFriendToChatRoomGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def leave_chat_room_group(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomLeaveChatRoomGroupResponse":
        return await self._unary_unary(
            "/ChatRoom/LeaveChatRoomGroup",
            CChatRoomLeaveChatRoomGroupRequest,
            CChatRoomLeaveChatRoomGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_chat_room(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomCreateChatRoomResponse":
        return await self._unary_unary(
            "/ChatRoom/CreateChatRoom",
            CChatRoomCreateChatRoomRequest,
            CChatRoomCreateChatRoomResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_chat_room(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomDeleteChatRoomResponse":
        return await self._unary_unary(
            "/ChatRoom/DeleteChatRoom",
            CChatRoomDeleteChatRoomRequest,
            CChatRoomDeleteChatRoomResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rename_chat_room(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomRenameChatRoomResponse":
        return await self._unary_unary(
            "/ChatRoom/RenameChatRoom",
            CChatRoomRenameChatRoomRequest,
            CChatRoomRenameChatRoomResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def reorder_chat_room(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomReorderChatRoomResponse":
        return await self._unary_unary(
            "/ChatRoom/ReorderChatRoom",
            CChatRoomReorderChatRoomRequest,
            CChatRoomReorderChatRoomResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_chat_message(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomSendChatMessageResponse":
        return await self._unary_unary(
            "/ChatRoom/SendChatMessage",
            CChatRoomSendChatMessageRequest,
            CChatRoomSendChatMessageResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def join_voice_chat(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomJoinVoiceChatResponse":
        return await self._unary_unary(
            "/ChatRoom/JoinVoiceChat",
            CChatRoomJoinVoiceChatRequest,
            CChatRoomJoinVoiceChatResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def leave_voice_chat(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomLeaveVoiceChatResponse":
        return await self._unary_unary(
            "/ChatRoom/LeaveVoiceChat",
            CChatRoomLeaveVoiceChatRequest,
            CChatRoomLeaveVoiceChatResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_message_history(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomGetMessageHistoryResponse":
        return await self._unary_unary(
            "/ChatRoom/GetMessageHistory",
            CChatRoomGetMessageHistoryRequest,
            CChatRoomGetMessageHistoryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_my_chat_room_groups(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomGetMyChatRoomGroupsResponse":
        return await self._unary_unary(
            "/ChatRoom/GetMyChatRoomGroups",
            CChatRoomGetMyChatRoomGroupsRequest,
            CChatRoomGetMyChatRoomGroupsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_chat_room_group_state(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomGetChatRoomGroupStateResponse":
        return await self._unary_unary(
            "/ChatRoom/GetChatRoomGroupState",
            CChatRoomGetChatRoomGroupStateRequest,
            CChatRoomGetChatRoomGroupStateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_chat_room_group_summary(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomGetChatRoomGroupSummaryResponse":
        return await self._unary_unary(
            "/ChatRoom/GetChatRoomGroupSummary",
            CChatRoomGetChatRoomGroupSummaryRequest,
            CChatRoomGetChatRoomGroupSummaryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_app_chat_room_group_force_active(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomSetAppChatRoomGroupForceActiveResponse":
        return await self._unary_unary(
            "/ChatRoom/SetAppChatRoomGroupForceActive",
            CChatRoomSetAppChatRoomGroupForceActiveRequest,
            CChatRoomSetAppChatRoomGroupForceActiveResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_app_chat_room_group_stop_force_active(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ChatRoom/SetAppChatRoomGroupStopForceActive",
            CChatRoomSetAppChatRoomGroupStopForceActiveNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def ack_chat_message(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ChatRoom/AckChatMessage",
            CChatRoomAckChatMessageNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_invite_link(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomCreateInviteLinkResponse":
        return await self._unary_unary(
            "/ChatRoom/CreateInviteLink",
            CChatRoomCreateInviteLinkRequest,
            CChatRoomCreateInviteLinkResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_invite_link_info(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomGetInviteLinkInfoResponse":
        return await self._unary_unary(
            "/ChatRoom/GetInviteLinkInfo",
            CChatRoomGetInviteLinkInfoRequest,
            CChatRoomGetInviteLinkInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_invite_info(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomGetInviteInfoResponse":
        return await self._unary_unary(
            "/ChatRoom/GetInviteInfo",
            CChatRoomGetInviteInfoRequest,
            CChatRoomGetInviteInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_invite_links_for_group(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomGetInviteLinksForGroupResponse":
        return await self._unary_unary(
            "/ChatRoom/GetInviteLinksForGroup",
            CChatRoomGetInviteLinksForGroupRequest,
            CChatRoomGetInviteLinksForGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_ban_list(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomGetBanListResponse":
        return await self._unary_unary(
            "/ChatRoom/GetBanList",
            CChatRoomGetBanListRequest,
            CChatRoomGetBanListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_invite_list(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomGetInviteListResponse":
        return await self._unary_unary(
            "/ChatRoom/GetInviteList",
            CChatRoomGetInviteListRequest,
            CChatRoomGetInviteListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_invite_link(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomDeleteInviteLinkResponse":
        return await self._unary_unary(
            "/ChatRoom/DeleteInviteLink",
            CChatRoomDeleteInviteLinkRequest,
            CChatRoomDeleteInviteLinkResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_session_active_chat_room_groups(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomSetSessionActiveChatRoomGroupsResponse":
        return await self._unary_unary(
            "/ChatRoom/SetSessionActiveChatRoomGroups",
            CChatRoomSetSessionActiveChatRoomGroupsRequest,
            CChatRoomSetSessionActiveChatRoomGroupsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_user_chat_group_preferences(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomSetUserChatGroupPreferencesResponse":
        return await self._unary_unary(
            "/ChatRoom/SetUserChatGroupPreferences",
            CChatRoomSetUserChatGroupPreferencesRequest,
            CChatRoomSetUserChatGroupPreferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_chat_messages(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomDeleteChatMessagesResponse":
        return await self._unary_unary(
            "/ChatRoom/DeleteChatMessages",
            CChatRoomDeleteChatMessagesRequest,
            CChatRoomDeleteChatMessagesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_member_list_view(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ChatRoom/UpdateMemberListView",
            CChatRoomUpdateMemberListViewNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def search_members(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomSearchMembersResponse":
        return await self._unary_unary(
            "/ChatRoom/SearchMembers",
            CChatRoomSearchMembersRequest,
            CChatRoomSearchMembersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_message_reaction(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomUpdateMessageReactionResponse":
        return await self._unary_unary(
            "/ChatRoom/UpdateMessageReaction",
            CChatRoomUpdateMessageReactionRequest,
            CChatRoomUpdateMessageReactionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_message_reaction_reactors(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CChatRoomGetMessageReactionReactorsResponse":
        return await self._unary_unary(
            "/ChatRoom/GetMessageReactionReactors",
            CChatRoomGetMessageReactionReactorsRequest,
            CChatRoomGetMessageReactionReactorsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ClanChatRoomsStub(betterproto.ServiceStub):
    async def get_clan_chat_room_info(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CClanChatRoomsGetClanChatRoomInfoResponse":
        return await self._unary_unary(
            "/ClanChatRooms/GetClanChatRoomInfo",
            CClanChatRoomsGetClanChatRoomInfoRequest,
            CClanChatRoomsGetClanChatRoomInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_clan_chat_room_private(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CClanChatRoomsSetClanChatRoomPrivateResponse":
        return await self._unary_unary(
            "/ClanChatRooms/SetClanChatRoomPrivate",
            CClanChatRoomsSetClanChatRoomPrivateRequest,
            CClanChatRoomsSetClanChatRoomPrivateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ChatRoomClientStub(betterproto.ServiceStub):
    async def notify_incoming_chat_message(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ChatRoomClient/NotifyIncomingChatMessage",
            CChatRoomIncomingChatMessageNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_chat_message_modified(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ChatRoomClient/NotifyChatMessageModified",
            CChatRoomChatMessageModifiedNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_member_state_change(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ChatRoomClient/NotifyMemberStateChange",
            CChatRoomMemberStateChangeNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_chat_room_header_state_change(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ChatRoomClient/NotifyChatRoomHeaderStateChange",
            CChatRoomChatRoomHeaderStateNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_chat_room_group_rooms_change(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ChatRoomClient/NotifyChatRoomGroupRoomsChange",
            CChatRoomChatRoomGroupRoomsChangeNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_should_rejoin_chat_room_voice_chat(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ChatRoomClient/NotifyShouldRejoinChatRoomVoiceChat",
            CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_chat_group_user_state_changed(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ChatRoomClient/NotifyChatGroupUserStateChanged",
            ChatRoomClientNotifyChatGroupUserStateChangedNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_ack_chat_message_echo(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ChatRoomClient/NotifyAckChatMessageEcho",
            CChatRoomAckChatMessageNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_chat_room_disconnect(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ChatRoomClient/NotifyChatRoomDisconnect",
            ChatRoomClientNotifyChatRoomDisconnectNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_member_list_view_updated(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ChatRoomClient/NotifyMemberListViewUpdated",
            CChatRoomClientMemberListViewUpdatedNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_message_reaction(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ChatRoomClient/NotifyMessageReaction",
            CChatRoomMessageReactionNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ChatUsabilityStub(betterproto.ServiceStub):
    async def notify_client_usability_metrics(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ChatUsability/NotifyClientUsabilityMetrics",
            CChatUsabilityClientUsabilityMetricsNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ChatUsabilityClientStub(betterproto.ServiceStub):
    async def notify_request_client_usability_metrics(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ChatUsabilityClient/NotifyRequestClientUsabilityMetrics",
            CChatUsabilityRequestClientUsabilityMetricsNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class PlayerStub(betterproto.ServiceStub):
    async def get_mutual_friends_for_incoming_invites(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetMutualFriendsForIncomingInvitesResponse":
        return await self._unary_unary(
            "/Player/GetMutualFriendsForIncomingInvites",
            CPlayerGetMutualFriendsForIncomingInvitesRequest,
            CPlayerGetMutualFriendsForIncomingInvitesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_owned_games(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetOwnedGamesResponse":
        return await self._unary_unary(
            "/Player/GetOwnedGames",
            CPlayerGetOwnedGamesRequest,
            CPlayerGetOwnedGamesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_play_next(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetPlayNextResponse":
        return await self._unary_unary(
            "/Player/GetPlayNext",
            CPlayerGetPlayNextRequest,
            CPlayerGetPlayNextResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_friends_gameplay_info(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetFriendsGameplayInfoResponse":
        return await self._unary_unary(
            "/Player/GetFriendsGameplayInfo",
            CPlayerGetFriendsGameplayInfoRequest,
            CPlayerGetFriendsGameplayInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_game_badge_levels(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetGameBadgeLevelsResponse":
        return await self._unary_unary(
            "/Player/GetGameBadgeLevels",
            CPlayerGetGameBadgeLevelsRequest,
            CPlayerGetGameBadgeLevelsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_profile_background(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetProfileBackgroundResponse":
        return await self._unary_unary(
            "/Player/GetProfileBackground",
            CPlayerGetProfileBackgroundRequest,
            CPlayerGetProfileBackgroundResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_profile_background(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerSetProfileBackgroundResponse":
        return await self._unary_unary(
            "/Player/SetProfileBackground",
            CPlayerSetProfileBackgroundRequest,
            CPlayerSetProfileBackgroundResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_mini_profile_background(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetMiniProfileBackgroundResponse":
        return await self._unary_unary(
            "/Player/GetMiniProfileBackground",
            CPlayerGetMiniProfileBackgroundRequest,
            CPlayerGetMiniProfileBackgroundResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_mini_profile_background(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerSetMiniProfileBackgroundResponse":
        return await self._unary_unary(
            "/Player/SetMiniProfileBackground",
            CPlayerSetMiniProfileBackgroundRequest,
            CPlayerSetMiniProfileBackgroundResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_avatar_frame(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetAvatarFrameResponse":
        return await self._unary_unary(
            "/Player/GetAvatarFrame",
            CPlayerGetAvatarFrameRequest,
            CPlayerGetAvatarFrameResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_avatar_frame(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerSetAvatarFrameResponse":
        return await self._unary_unary(
            "/Player/SetAvatarFrame",
            CPlayerSetAvatarFrameRequest,
            CPlayerSetAvatarFrameResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_animated_avatar(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetAnimatedAvatarResponse":
        return await self._unary_unary(
            "/Player/GetAnimatedAvatar",
            CPlayerGetAnimatedAvatarRequest,
            CPlayerGetAnimatedAvatarResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_animated_avatar(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerSetAnimatedAvatarResponse":
        return await self._unary_unary(
            "/Player/SetAnimatedAvatar",
            CPlayerSetAnimatedAvatarRequest,
            CPlayerSetAnimatedAvatarResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_steam_deck_keyboard_skin(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetSteamDeckKeyboardSkinResponse":
        return await self._unary_unary(
            "/Player/GetSteamDeckKeyboardSkin",
            CPlayerGetSteamDeckKeyboardSkinRequest,
            CPlayerGetSteamDeckKeyboardSkinResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_steam_deck_keyboard_skin(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerSetSteamDeckKeyboardSkinResponse":
        return await self._unary_unary(
            "/Player/SetSteamDeckKeyboardSkin",
            CPlayerSetSteamDeckKeyboardSkinRequest,
            CPlayerSetSteamDeckKeyboardSkinResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_profile_items_owned(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetProfileItemsOwnedResponse":
        return await self._unary_unary(
            "/Player/GetProfileItemsOwned",
            CPlayerGetProfileItemsOwnedRequest,
            CPlayerGetProfileItemsOwnedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_profile_items_equipped(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetProfileItemsEquippedResponse":
        return await self._unary_unary(
            "/Player/GetProfileItemsEquipped",
            CPlayerGetProfileItemsEquippedRequest,
            CPlayerGetProfileItemsEquippedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_equipped_profile_item_flags(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerSetEquippedProfileItemFlagsResponse":
        return await self._unary_unary(
            "/Player/SetEquippedProfileItemFlags",
            CPlayerSetEquippedProfileItemFlagsRequest,
            CPlayerSetEquippedProfileItemFlagsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_emoticon_list(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetEmoticonListResponse":
        return await self._unary_unary(
            "/Player/GetEmoticonList",
            CPlayerGetEmoticonListRequest,
            CPlayerGetEmoticonListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_top_achievements_for_games(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetTopAchievementsForGamesResponse":
        return await self._unary_unary(
            "/Player/GetTopAchievementsForGames",
            CPlayerGetTopAchievementsForGamesRequest,
            CPlayerGetTopAchievementsForGamesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_achievements_progress(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetAchievementsProgressResponse":
        return await self._unary_unary(
            "/Player/GetAchievementsProgress",
            CPlayerGetAchievementsProgressRequest,
            CPlayerGetAchievementsProgressResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_game_achievements(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetGameAchievementsResponse":
        return await self._unary_unary(
            "/Player/GetGameAchievements",
            CPlayerGetGameAchievementsRequest,
            CPlayerGetGameAchievementsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_favorite_badge(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetFavoriteBadgeResponse":
        return await self._unary_unary(
            "/Player/GetFavoriteBadge",
            CPlayerGetFavoriteBadgeRequest,
            CPlayerGetFavoriteBadgeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_favorite_badge(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerSetFavoriteBadgeResponse":
        return await self._unary_unary(
            "/Player/SetFavoriteBadge",
            CPlayerSetFavoriteBadgeRequest,
            CPlayerSetFavoriteBadgeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_profile_customization(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetProfileCustomizationResponse":
        return await self._unary_unary(
            "/Player/GetProfileCustomization",
            CPlayerGetProfileCustomizationRequest,
            CPlayerGetProfileCustomizationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_purchased_profile_customizations(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetPurchasedProfileCustomizationsResponse":
        return await self._unary_unary(
            "/Player/GetPurchasedProfileCustomizations",
            CPlayerGetPurchasedProfileCustomizationsRequest,
            CPlayerGetPurchasedProfileCustomizationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_purchased_and_upgraded_profile_customizations(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetPurchasedAndUpgradedProfileCustomizationsResponse":
        return await self._unary_unary(
            "/Player/GetPurchasedAndUpgradedProfileCustomizations",
            CPlayerGetPurchasedAndUpgradedProfileCustomizationsRequest,
            CPlayerGetPurchasedAndUpgradedProfileCustomizationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_profile_themes_available(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetProfileThemesAvailableResponse":
        return await self._unary_unary(
            "/Player/GetProfileThemesAvailable",
            CPlayerGetProfileThemesAvailableRequest,
            CPlayerGetProfileThemesAvailableResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_profile_theme(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerSetProfileThemeResponse":
        return await self._unary_unary(
            "/Player/SetProfileTheme",
            CPlayerSetProfileThemeRequest,
            CPlayerSetProfileThemeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_profile_preferences(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerSetProfilePreferencesResponse":
        return await self._unary_unary(
            "/Player/SetProfilePreferences",
            CPlayerSetProfilePreferencesRequest,
            CPlayerSetProfilePreferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_status_to_friends(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerPostStatusToFriendsResponse":
        return await self._unary_unary(
            "/Player/PostStatusToFriends",
            CPlayerPostStatusToFriendsRequest,
            CPlayerPostStatusToFriendsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_posted_status(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetPostedStatusResponse":
        return await self._unary_unary(
            "/Player/GetPostedStatus",
            CPlayerGetPostedStatusRequest,
            CPlayerGetPostedStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_posted_status(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerDeletePostedStatusResponse":
        return await self._unary_unary(
            "/Player/DeletePostedStatus",
            CPlayerDeletePostedStatusRequest,
            CPlayerDeletePostedStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def client_get_last_played_times(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetLastPlayedTimesResponse":
        return await self._unary_unary(
            "/Player/ClientGetLastPlayedTimes",
            CPlayerGetLastPlayedTimesRequest,
            CPlayerGetLastPlayedTimesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_time_ssa_accepted(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetTimeSsaAcceptedResponse":
        return await self._unary_unary(
            "/Player/GetTimeSSAAccepted",
            CPlayerGetTimeSsaAcceptedRequest,
            CPlayerGetTimeSsaAcceptedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def accept_ssa(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerAcceptSsaResponse":
        return await self._unary_unary(
            "/Player/AcceptSSA",
            CPlayerAcceptSsaRequest,
            CPlayerAcceptSsaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_nickname_list(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetNicknameListResponse":
        return await self._unary_unary(
            "/Player/GetNicknameList",
            CPlayerGetNicknameListRequest,
            CPlayerGetNicknameListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_per_friend_preferences(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetPerFriendPreferencesResponse":
        return await self._unary_unary(
            "/Player/GetPerFriendPreferences",
            CPlayerGetPerFriendPreferencesRequest,
            CPlayerGetPerFriendPreferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_per_friend_preferences(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerSetPerFriendPreferencesResponse":
        return await self._unary_unary(
            "/Player/SetPerFriendPreferences",
            CPlayerSetPerFriendPreferencesRequest,
            CPlayerSetPerFriendPreferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_friend(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerAddFriendResponse":
        return await self._unary_unary(
            "/Player/AddFriend",
            CPlayerAddFriendRequest,
            CPlayerAddFriendResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_friend(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerRemoveFriendResponse":
        return await self._unary_unary(
            "/Player/RemoveFriend",
            CPlayerRemoveFriendRequest,
            CPlayerRemoveFriendResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def ignore_friend(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerIgnoreFriendResponse":
        return await self._unary_unary(
            "/Player/IgnoreFriend",
            CPlayerIgnoreFriendRequest,
            CPlayerIgnoreFriendResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_community_preferences(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetCommunityPreferencesResponse":
        return await self._unary_unary(
            "/Player/GetCommunityPreferences",
            CPlayerGetCommunityPreferencesRequest,
            CPlayerGetCommunityPreferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_community_preferences(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerSetCommunityPreferencesResponse":
        return await self._unary_unary(
            "/Player/SetCommunityPreferences",
            CPlayerSetCommunityPreferencesRequest,
            CPlayerSetCommunityPreferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_text_filter_words(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetTextFilterWordsResponse":
        return await self._unary_unary(
            "/Player/GetTextFilterWords",
            CPlayerGetTextFilterWordsRequest,
            CPlayerGetTextFilterWordsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_new_steam_announcement_state(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetNewSteamAnnouncementStateResponse":
        return await self._unary_unary(
            "/Player/GetNewSteamAnnouncementState",
            CPlayerGetNewSteamAnnouncementStateRequest,
            CPlayerGetNewSteamAnnouncementStateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_steam_announcement_last_read(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerUpdateSteamAnnouncementLastReadResponse":
        return await self._unary_unary(
            "/Player/UpdateSteamAnnouncementLastRead",
            CPlayerUpdateSteamAnnouncementLastReadRequest,
            CPlayerUpdateSteamAnnouncementLastReadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_privacy_settings(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetPrivacySettingsResponse":
        return await self._unary_unary(
            "/Player/GetPrivacySettings",
            CPlayerGetPrivacySettingsRequest,
            CPlayerGetPrivacySettingsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_duration_control(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerGetDurationControlResponse":
        return await self._unary_unary(
            "/Player/GetDurationControl",
            CPlayerGetDurationControlRequest,
            CPlayerGetDurationControlResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def record_disconnected_playtime(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CPlayerRecordDisconnectedPlaytimeResponse":
        return await self._unary_unary(
            "/Player/RecordDisconnectedPlaytime",
            CPlayerRecordDisconnectedPlaytimeRequest,
            CPlayerRecordDisconnectedPlaytimeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class PlayerClientStub(betterproto.ServiceStub):
    async def notify_last_played_times(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/PlayerClient/NotifyLastPlayedTimes",
            CPlayerLastPlayedTimesNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_friend_nickname_changed(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/PlayerClient/NotifyFriendNicknameChanged",
            CPlayerFriendNicknameChangedNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_friend_equipped_profile_items_changed(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/PlayerClient/NotifyFriendEquippedProfileItemsChanged",
            CPlayerFriendEquippedProfileItemsChangedNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_new_steam_announcement_state(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/PlayerClient/NotifyNewSteamAnnouncementState",
            CPlayerNewSteamAnnouncementStateNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_community_preferences_changed(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/PlayerClient/NotifyCommunityPreferencesChanged",
            CPlayerCommunityPreferencesChangedNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_text_filter_words_changed(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/PlayerClient/NotifyTextFilterWordsChanged",
            CPlayerTextFilterWordsChangedNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_per_friend_preferences_changed(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/PlayerClient/NotifyPerFriendPreferencesChanged",
            CPlayerPerFriendPreferencesChangedNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_privacy_privacy_settings_changed(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/PlayerClient/NotifyPrivacyPrivacySettingsChanged",
            CPlayerPrivacySettingsChangedNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class HelpRequestLogsStub(betterproto.ServiceStub):
    async def upload_user_application_log(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CHelpRequestLogsUploadUserApplicationLogResponse":
        return await self._unary_unary(
            "/HelpRequestLogs/UploadUserApplicationLog",
            CHelpRequestLogsUploadUserApplicationLogRequest,
            CHelpRequestLogsUploadUserApplicationLogResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class CommunityStub(betterproto.ServiceStub):
    async def get_apps(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityGetAppsResponse":
        return await self._unary_unary(
            "/Community/GetApps",
            CCommunityGetAppsRequest,
            CCommunityGetAppsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_app_rich_presence_localization(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityGetAppRichPresenceLocalizationResponse":
        return await self._unary_unary(
            "/Community/GetAppRichPresenceLocalization",
            CCommunityGetAppRichPresenceLocalizationRequest,
            CCommunityGetAppRichPresenceLocalizationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_comment_thread(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityGetCommentThreadResponse":
        return await self._unary_unary(
            "/Community/GetCommentThread",
            CCommunityGetCommentThreadRequest,
            CCommunityGetCommentThreadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_comment_to_thread(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityPostCommentToThreadResponse":
        return await self._unary_unary(
            "/Community/PostCommentToThread",
            CCommunityPostCommentToThreadRequest,
            CCommunityPostCommentToThreadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_comment_from_thread(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityDeleteCommentFromThreadResponse":
        return await self._unary_unary(
            "/Community/DeleteCommentFromThread",
            CCommunityDeleteCommentFromThreadRequest,
            CCommunityDeleteCommentFromThreadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rate_comment_thread(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityRateCommentThreadResponse":
        return await self._unary_unary(
            "/Community/RateCommentThread",
            CCommunityRateCommentThreadRequest,
            CCommunityRateCommentThreadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_comment_thread_ratings(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityGetCommentThreadRatingsResponse":
        return await self._unary_unary(
            "/Community/GetCommentThreadRatings",
            CCommunityGetCommentThreadRatingsRequest,
            CCommunityGetCommentThreadRatingsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rate_clan_announcement(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityRateClanAnnouncementResponse":
        return await self._unary_unary(
            "/Community/RateClanAnnouncement",
            CCommunityRateClanAnnouncementRequest,
            CCommunityRateClanAnnouncementResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_clan_announcement_vote_for_user(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityGetClanAnnouncementVoteForUserResponse":
        return await self._unary_unary(
            "/Community/GetClanAnnouncementVoteForUser",
            CCommunityGetClanAnnouncementVoteForUserRequest,
            CCommunityGetClanAnnouncementVoteForUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_user_partner_event_news(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityGetUserPartnerEventNewsResponse":
        return await self._unary_unary(
            "/Community/GetUserPartnerEventNews",
            CCommunityGetUserPartnerEventNewsRequest,
            CCommunityGetUserPartnerEventNewsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_best_events_for_user(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityGetBestEventsForUserResponse":
        return await self._unary_unary(
            "/Community/GetBestEventsForUser",
            CCommunityGetBestEventsForUserRequest,
            CCommunityGetBestEventsForUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def mark_partner_events_for_user(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityMarkPartnerEventsForUserResponse":
        return await self._unary_unary(
            "/Community/MarkPartnerEventsForUser",
            CCommunityMarkPartnerEventsForUserRequest,
            CCommunityMarkPartnerEventsForUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def partner_events_show_more_for_app(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityPartnerEventsShowMoreForAppResponse":
        return await self._unary_unary(
            "/Community/PartnerEventsShowMoreForApp",
            CCommunityPartnerEventsShowMoreForAppRequest,
            CCommunityPartnerEventsShowMoreForAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def partner_events_show_less_for_app(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityPartnerEventsShowLessForAppResponse":
        return await self._unary_unary(
            "/Community/PartnerEventsShowLessForApp",
            CCommunityPartnerEventsShowLessForAppRequest,
            CCommunityPartnerEventsShowLessForAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def clear_user_partner_events_app_priorities(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityClearUserPartnerEventsAppPrioritiesResponse":
        return await self._unary_unary(
            "/Community/ClearUserPartnerEventsAppPriorities",
            CCommunityClearUserPartnerEventsAppPrioritiesRequest,
            CCommunityClearUserPartnerEventsAppPrioritiesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_user_partner_events_app_priorities(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityGetUserPartnerEventsAppPrioritiesResponse":
        return await self._unary_unary(
            "/Community/GetUserPartnerEventsAppPriorities",
            CCommunityGetUserPartnerEventsAppPrioritiesRequest,
            CCommunityGetUserPartnerEventsAppPrioritiesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def clear_single_partner_events_app_priority(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CCommunityClearSinglePartnerEventsAppPriorityResponse":
        return await self._unary_unary(
            "/Community/ClearSinglePartnerEventsAppPriority",
            CCommunityClearSinglePartnerEventsAppPriorityRequest,
            CCommunityClearSinglePartnerEventsAppPriorityResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ExperimentServiceStub(betterproto.ServiceStub):
    async def report_product_impressions_from_client(
        self,
        unknown_proto: "UnknownProto",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/ExperimentService/ReportProductImpressionsFromClient",
            UnknownProto,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class FriendsListStub(betterproto.ServiceStub):
    async def get_categories(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CFriendsListGetCategoriesResponse":
        return await self._unary_unary(
            "/FriendsList/GetCategories",
            CFriendsListGetCategoriesRequest,
            CFriendsListGetCategoriesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_friends_list(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CFriendsListGetFriendsListResponse":
        return await self._unary_unary(
            "/FriendsList/GetFriendsList",
            CFriendsListGetFriendsListRequest,
            CFriendsListGetFriendsListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_favorites(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CFriendsListGetFavoritesResponse":
        return await self._unary_unary(
            "/FriendsList/GetFavorites",
            CFriendsListGetFavoritesRequest,
            CFriendsListGetFavoritesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_favorites(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CFriendsListSetFavoritesResponse":
        return await self._unary_unary(
            "/FriendsList/SetFavorites",
            CFriendsListSetFavoritesRequest,
            CFriendsListSetFavoritesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class FriendsListClientStub(betterproto.ServiceStub):
    async def favorites_changed(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/FriendsListClient/FavoritesChanged",
            CFriendsListFavoritesChangedNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ClanStub(betterproto.ServiceStub):
    async def respond_to_clan_invite(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CClanRespondToClanInviteResponse":
        return await self._unary_unary(
            "/Clan/RespondToClanInvite",
            CClanRespondToClanInviteRequest,
            CClanRespondToClanInviteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class VoiceChatStub(betterproto.ServiceStub):
    async def update_voice_chat_web_rtc_data(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CVoiceChatUpdateVoiceChatWebRtcDataResponse":
        return await self._unary_unary(
            "/VoiceChat/UpdateVoiceChatWebRTCData",
            CVoiceChatUpdateVoiceChatWebRtcDataRequest,
            CVoiceChatUpdateVoiceChatWebRtcDataResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_user_voice_status(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/VoiceChat/NotifyUserVoiceStatus",
            CVoiceChatUserVoiceStatusNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def upload_client_voice_chat_logs(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CVoiceChatUploadClientVoiceChatLogsResponse":
        return await self._unary_unary(
            "/VoiceChat/UploadClientVoiceChatLogs",
            CVoiceChatUploadClientVoiceChatLogsRequest,
            CVoiceChatUploadClientVoiceChatLogsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def leave_voice_chat(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CVoiceChatLeaveVoiceChatResponse":
        return await self._unary_unary(
            "/VoiceChat/LeaveVoiceChat",
            CVoiceChatLeaveVoiceChatRequest,
            CVoiceChatLeaveVoiceChatResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def request_one_on_one_chat(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CVoiceChatRequestOneOnOneChatResponse":
        return await self._unary_unary(
            "/VoiceChat/RequestOneOnOneChat",
            CVoiceChatRequestOneOnOneChatRequest,
            CVoiceChatRequestOneOnOneChatResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def answer_one_on_one_chat(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CVoiceChatAnswerOneOnOneChatResponse":
        return await self._unary_unary(
            "/VoiceChat/AnswerOneOnOneChat",
            CVoiceChatAnswerOneOnOneChatRequest,
            CVoiceChatAnswerOneOnOneChatResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def end_one_on_one_chat(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CVoiceChatEndOneOnOneChatResponse":
        return await self._unary_unary(
            "/VoiceChat/EndOneOnOneChat",
            CVoiceChatEndOneOnOneChatRequest,
            CVoiceChatEndOneOnOneChatResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def leave_one_on_one_chat(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CVoiceChatLeaveOneOnOneChatResponse":
        return await self._unary_unary(
            "/VoiceChat/LeaveOneOnOneChat",
            CVoiceChatLeaveOneOnOneChatRequest,
            CVoiceChatLeaveOneOnOneChatResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class VoiceChatClientStub(betterproto.ServiceStub):
    async def notify_user_joined_voice_chat(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/VoiceChatClient/NotifyUserJoinedVoiceChat",
            CVoiceChatUserJoinedVoiceChatNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_user_left_voice_chat(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/VoiceChatClient/NotifyUserLeftVoiceChat",
            CVoiceChatUserLeftVoiceChatNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_voice_chat_ended(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/VoiceChatClient/NotifyVoiceChatEnded",
            CVoiceChatVoiceChatEndedNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_user_voice_status(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/VoiceChatClient/NotifyUserVoiceStatus",
            CVoiceChatUserVoiceStatusNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_all_users_voice_status(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/VoiceChatClient/NotifyAllUsersVoiceStatus",
            CVoiceChatAllMembersStatusNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_one_on_one_chat_requested(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/VoiceChatClient/NotifyOneOnOneChatRequested",
            CVoiceChatOneOnOneChatRequestedNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_one_on_one_chat_response(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/VoiceChatClient/NotifyOneOnOneChatResponse",
            CVoiceChatOneOnOneChatRequestResponseNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class WebRtcClientStub(betterproto.ServiceStub):
    async def initiate_web_rtc_connection(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CWebRtcClientInitiateWebRtcConnectionResponse":
        return await self._unary_unary(
            "/WebRTCClient/InitiateWebRTCConnection",
            CWebRtcClientInitiateWebRtcConnectionRequest,
            CWebRtcClientInitiateWebRtcConnectionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def acknowledge_updated_remote_description(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CWebRtcClientAcknowledgeUpdatedRemoteDescriptionResponse":
        return await self._unary_unary(
            "/WebRTCClient/AcknowledgeUpdatedRemoteDescription",
            CWebRtcClientAcknowledgeUpdatedRemoteDescriptionRequest,
            CWebRtcClientAcknowledgeUpdatedRemoteDescriptionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class WebRtcClientNotificationsStub(betterproto.ServiceStub):
    async def notify_web_rtc_session_connected(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/WebRTCClientNotifications/NotifyWebRTCSessionConnected",
            CWebRtcWebRtcSessionConnectedNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_web_rtc_update_remote_description(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/WebRTCClientNotifications/NotifyWebRTCUpdateRemoteDescription",
            CWebRtcWebRtcUpdateRemoteDescriptionNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MobilePerAccountStub(betterproto.ServiceStub):
    async def get_settings(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CMobilePerAccountGetSettingsResponse":
        return await self._unary_unary(
            "/MobilePerAccount/GetSettings",
            CMobilePerAccountGetSettingsRequest,
            CMobilePerAccountGetSettingsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_settings(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CMobilePerAccountSetSettingsResponse":
        return await self._unary_unary(
            "/MobilePerAccount/SetSettings",
            CMobilePerAccountSetSettingsRequest,
            CMobilePerAccountSetSettingsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MobileDeviceStub(betterproto.ServiceStub):
    async def register_mobile_device(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CMobileDeviceRegisterMobileDeviceResponse":
        return await self._unary_unary(
            "/MobileDevice/RegisterMobileDevice",
            CMobileDeviceRegisterMobileDeviceRequest,
            CMobileDeviceRegisterMobileDeviceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deregister_mobile_device(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NoResponse":
        return await self._unary_unary(
            "/MobileDevice/DeregisterMobileDevice",
            CMobileDeviceDeregisterMobileDeviceNotification,
            NoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class CloudConfigStoreBase(ServiceBase):
    async def download(self) -> "CCloudConfigStoreDownloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def upload(self) -> "CCloudConfigStoreUploadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_download(
        self,
        stream: "grpclib.server.Stream[CCloudConfigStoreDownloadRequest, CCloudConfigStoreDownloadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.download(request)
        await stream.send_message(response)

    async def __rpc_upload(
        self,
        stream: "grpclib.server.Stream[CCloudConfigStoreUploadRequest, CCloudConfigStoreUploadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.upload(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/CloudConfigStore/Download": grpclib.const.Handler(
                self.__rpc_download,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCloudConfigStoreDownloadRequest,
                CCloudConfigStoreDownloadResponse,
            ),
            "/CloudConfigStore/Upload": grpclib.const.Handler(
                self.__rpc_upload,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCloudConfigStoreUploadRequest,
                CCloudConfigStoreUploadResponse,
            ),
        }


class CloudConfigStoreClientBase(ServiceBase):
    async def notify_change(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_notify_change(
        self,
        stream: "grpclib.server.Stream[CCloudConfigStoreChangeNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_change(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/CloudConfigStoreClient/NotifyChange": grpclib.const.Handler(
                self.__rpc_notify_change,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCloudConfigStoreChangeNotification,
                NoResponse,
            ),
        }


class AuthenticationBase(ServiceBase):
    async def get_password_rsa_public_key(
        self,
    ) -> "CAuthenticationGetPasswordRsaPublicKeyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def begin_auth_session_via_qr(
        self,
    ) -> "CAuthenticationBeginAuthSessionViaQrResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def begin_auth_session_via_credentials(
        self,
    ) -> "CAuthenticationBeginAuthSessionViaCredentialsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def poll_auth_session_status(
        self,
    ) -> "CAuthenticationPollAuthSessionStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_auth_session_info(
        self,
    ) -> "CAuthenticationGetAuthSessionInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_auth_session_with_mobile_confirmation(
        self,
    ) -> "CAuthenticationUpdateAuthSessionWithMobileConfirmationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_auth_session_with_steam_guard_code(
        self,
    ) -> "CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def generate_access_token_for_app(
        self,
    ) -> "CAuthenticationAccessTokenGenerateForAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def enumerate_tokens(self) -> "CAuthenticationRefreshTokenEnumerateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_auth_sessions_for_account(
        self,
    ) -> "CAuthenticationGetAuthSessionsForAccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def migrate_mobile_session(
        self,
    ) -> "CAuthenticationMigrateMobileSessionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def revoke_token(self) -> "CAuthenticationTokenRevokeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def revoke_refresh_token(self) -> "CAuthenticationRefreshTokenRevokeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_password_rsa_public_key(
        self,
        stream: "grpclib.server.Stream[CAuthenticationGetPasswordRsaPublicKeyRequest, CAuthenticationGetPasswordRsaPublicKeyResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_password_rsa_public_key(request)
        await stream.send_message(response)

    async def __rpc_begin_auth_session_via_qr(
        self,
        stream: "grpclib.server.Stream[CAuthenticationBeginAuthSessionViaQrRequest, CAuthenticationBeginAuthSessionViaQrResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.begin_auth_session_via_qr(request)
        await stream.send_message(response)

    async def __rpc_begin_auth_session_via_credentials(
        self,
        stream: "grpclib.server.Stream[CAuthenticationBeginAuthSessionViaCredentialsRequest, CAuthenticationBeginAuthSessionViaCredentialsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.begin_auth_session_via_credentials(request)
        await stream.send_message(response)

    async def __rpc_poll_auth_session_status(
        self,
        stream: "grpclib.server.Stream[CAuthenticationPollAuthSessionStatusRequest, CAuthenticationPollAuthSessionStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.poll_auth_session_status(request)
        await stream.send_message(response)

    async def __rpc_get_auth_session_info(
        self,
        stream: "grpclib.server.Stream[CAuthenticationGetAuthSessionInfoRequest, CAuthenticationGetAuthSessionInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_auth_session_info(request)
        await stream.send_message(response)

    async def __rpc_update_auth_session_with_mobile_confirmation(
        self,
        stream: "grpclib.server.Stream[CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest, CAuthenticationUpdateAuthSessionWithMobileConfirmationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_auth_session_with_mobile_confirmation(request)
        await stream.send_message(response)

    async def __rpc_update_auth_session_with_steam_guard_code(
        self,
        stream: "grpclib.server.Stream[CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest, CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_auth_session_with_steam_guard_code(request)
        await stream.send_message(response)

    async def __rpc_generate_access_token_for_app(
        self,
        stream: "grpclib.server.Stream[CAuthenticationAccessTokenGenerateForAppRequest, CAuthenticationAccessTokenGenerateForAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.generate_access_token_for_app(request)
        await stream.send_message(response)

    async def __rpc_enumerate_tokens(
        self,
        stream: "grpclib.server.Stream[CAuthenticationRefreshTokenEnumerateRequest, CAuthenticationRefreshTokenEnumerateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.enumerate_tokens(request)
        await stream.send_message(response)

    async def __rpc_get_auth_sessions_for_account(
        self,
        stream: "grpclib.server.Stream[CAuthenticationGetAuthSessionsForAccountRequest, CAuthenticationGetAuthSessionsForAccountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_auth_sessions_for_account(request)
        await stream.send_message(response)

    async def __rpc_migrate_mobile_session(
        self,
        stream: "grpclib.server.Stream[CAuthenticationMigrateMobileSessionRequest, CAuthenticationMigrateMobileSessionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.migrate_mobile_session(request)
        await stream.send_message(response)

    async def __rpc_revoke_token(
        self,
        stream: "grpclib.server.Stream[CAuthenticationTokenRevokeRequest, CAuthenticationTokenRevokeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.revoke_token(request)
        await stream.send_message(response)

    async def __rpc_revoke_refresh_token(
        self,
        stream: "grpclib.server.Stream[CAuthenticationRefreshTokenRevokeRequest, CAuthenticationRefreshTokenRevokeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.revoke_refresh_token(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/Authentication/GetPasswordRSAPublicKey": grpclib.const.Handler(
                self.__rpc_get_password_rsa_public_key,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationGetPasswordRsaPublicKeyRequest,
                CAuthenticationGetPasswordRsaPublicKeyResponse,
            ),
            "/Authentication/BeginAuthSessionViaQR": grpclib.const.Handler(
                self.__rpc_begin_auth_session_via_qr,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationBeginAuthSessionViaQrRequest,
                CAuthenticationBeginAuthSessionViaQrResponse,
            ),
            "/Authentication/BeginAuthSessionViaCredentials": grpclib.const.Handler(
                self.__rpc_begin_auth_session_via_credentials,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationBeginAuthSessionViaCredentialsRequest,
                CAuthenticationBeginAuthSessionViaCredentialsResponse,
            ),
            "/Authentication/PollAuthSessionStatus": grpclib.const.Handler(
                self.__rpc_poll_auth_session_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationPollAuthSessionStatusRequest,
                CAuthenticationPollAuthSessionStatusResponse,
            ),
            "/Authentication/GetAuthSessionInfo": grpclib.const.Handler(
                self.__rpc_get_auth_session_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationGetAuthSessionInfoRequest,
                CAuthenticationGetAuthSessionInfoResponse,
            ),
            "/Authentication/UpdateAuthSessionWithMobileConfirmation": grpclib.const.Handler(
                self.__rpc_update_auth_session_with_mobile_confirmation,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest,
                CAuthenticationUpdateAuthSessionWithMobileConfirmationResponse,
            ),
            "/Authentication/UpdateAuthSessionWithSteamGuardCode": grpclib.const.Handler(
                self.__rpc_update_auth_session_with_steam_guard_code,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest,
                CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse,
            ),
            "/Authentication/GenerateAccessTokenForApp": grpclib.const.Handler(
                self.__rpc_generate_access_token_for_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationAccessTokenGenerateForAppRequest,
                CAuthenticationAccessTokenGenerateForAppResponse,
            ),
            "/Authentication/EnumerateTokens": grpclib.const.Handler(
                self.__rpc_enumerate_tokens,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationRefreshTokenEnumerateRequest,
                CAuthenticationRefreshTokenEnumerateResponse,
            ),
            "/Authentication/GetAuthSessionsForAccount": grpclib.const.Handler(
                self.__rpc_get_auth_sessions_for_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationGetAuthSessionsForAccountRequest,
                CAuthenticationGetAuthSessionsForAccountResponse,
            ),
            "/Authentication/MigrateMobileSession": grpclib.const.Handler(
                self.__rpc_migrate_mobile_session,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationMigrateMobileSessionRequest,
                CAuthenticationMigrateMobileSessionResponse,
            ),
            "/Authentication/RevokeToken": grpclib.const.Handler(
                self.__rpc_revoke_token,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationTokenRevokeRequest,
                CAuthenticationTokenRevokeResponse,
            ),
            "/Authentication/RevokeRefreshToken": grpclib.const.Handler(
                self.__rpc_revoke_refresh_token,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationRefreshTokenRevokeRequest,
                CAuthenticationRefreshTokenRevokeResponse,
            ),
        }


class AuthenticationSupportBase(ServiceBase):
    async def query_refresh_tokens_by_account(
        self,
    ) -> "CAuthenticationSupportQueryRefreshTokensByAccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_refresh_token_by_id(
        self,
    ) -> "CAuthenticationSupportQueryRefreshTokenByIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def revoke_token(self) -> "CAuthenticationSupportRevokeTokenResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_token_history(
        self,
    ) -> "CAuthenticationSupportGetTokenHistoryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_query_refresh_tokens_by_account(
        self,
        stream: "grpclib.server.Stream[CAuthenticationSupportQueryRefreshTokensByAccountRequest, CAuthenticationSupportQueryRefreshTokensByAccountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_refresh_tokens_by_account(request)
        await stream.send_message(response)

    async def __rpc_query_refresh_token_by_id(
        self,
        stream: "grpclib.server.Stream[CAuthenticationSupportQueryRefreshTokenByIdRequest, CAuthenticationSupportQueryRefreshTokenByIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_refresh_token_by_id(request)
        await stream.send_message(response)

    async def __rpc_revoke_token(
        self,
        stream: "grpclib.server.Stream[CAuthenticationSupportRevokeTokenRequest, CAuthenticationSupportRevokeTokenResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.revoke_token(request)
        await stream.send_message(response)

    async def __rpc_get_token_history(
        self,
        stream: "grpclib.server.Stream[CAuthenticationSupportGetTokenHistoryRequest, CAuthenticationSupportGetTokenHistoryResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_token_history(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/AuthenticationSupport/QueryRefreshTokensByAccount": grpclib.const.Handler(
                self.__rpc_query_refresh_tokens_by_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationSupportQueryRefreshTokensByAccountRequest,
                CAuthenticationSupportQueryRefreshTokensByAccountResponse,
            ),
            "/AuthenticationSupport/QueryRefreshTokenByID": grpclib.const.Handler(
                self.__rpc_query_refresh_token_by_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationSupportQueryRefreshTokenByIdRequest,
                CAuthenticationSupportQueryRefreshTokenByIdResponse,
            ),
            "/AuthenticationSupport/RevokeToken": grpclib.const.Handler(
                self.__rpc_revoke_token,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationSupportRevokeTokenRequest,
                CAuthenticationSupportRevokeTokenResponse,
            ),
            "/AuthenticationSupport/GetTokenHistory": grpclib.const.Handler(
                self.__rpc_get_token_history,
                grpclib.const.Cardinality.UNARY_UNARY,
                CAuthenticationSupportGetTokenHistoryRequest,
                CAuthenticationSupportGetTokenHistoryResponse,
            ),
        }


class CloudGamingBase(ServiceBase):
    async def create_nonce(self) -> "CCloudGamingCreateNonceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_time_remaining(self) -> "CCloudGamingGetTimeRemainingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_nonce(
        self,
        stream: "grpclib.server.Stream[CCloudGamingCreateNonceRequest, CCloudGamingCreateNonceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_nonce(request)
        await stream.send_message(response)

    async def __rpc_get_time_remaining(
        self,
        stream: "grpclib.server.Stream[CCloudGamingGetTimeRemainingRequest, CCloudGamingGetTimeRemainingResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_time_remaining(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/CloudGaming/CreateNonce": grpclib.const.Handler(
                self.__rpc_create_nonce,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCloudGamingCreateNonceRequest,
                CCloudGamingCreateNonceResponse,
            ),
            "/CloudGaming/GetTimeRemaining": grpclib.const.Handler(
                self.__rpc_get_time_remaining,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCloudGamingGetTimeRemainingRequest,
                CCloudGamingGetTimeRemainingResponse,
            ),
        }


class ChatBase(ServiceBase):
    async def request_friend_persona_states(
        self,
    ) -> "CChatRequestFriendPersonaStatesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_request_friend_persona_states(
        self,
        stream: "grpclib.server.Stream[CChatRequestFriendPersonaStatesRequest, CChatRequestFriendPersonaStatesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.request_friend_persona_states(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/Chat/RequestFriendPersonaStates": grpclib.const.Handler(
                self.__rpc_request_friend_persona_states,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRequestFriendPersonaStatesRequest,
                CChatRequestFriendPersonaStatesResponse,
            ),
        }


class ChatRoomBase(ServiceBase):
    async def create_chat_room_group(self) -> "CChatRoomCreateChatRoomGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def save_chat_room_group(self) -> "CChatRoomSaveChatRoomGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rename_chat_room_group(self) -> "CChatRoomRenameChatRoomGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_chat_room_group_tagline(
        self,
    ) -> "CChatRoomSetChatRoomGroupTaglineResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_chat_room_group_avatar(
        self,
    ) -> "CChatRoomSetChatRoomGroupAvatarResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_chat_room_group_watching_broadcast(
        self,
    ) -> "CChatRoomSetChatRoomGroupWatchingBroadcastResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def join_mini_game_for_chat_room_group(
        self,
    ) -> "CChatRoomJoinMiniGameForChatRoomGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def end_mini_game_for_chat_room_group(
        self,
    ) -> "CChatRoomEndMiniGameForChatRoomGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def mute_user_in_group(self) -> "CChatRoomMuteUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def kick_user_from_group(self) -> "CChatRoomKickUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_user_ban_state(self) -> "CChatRoomSetUserBanStateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def revoke_invite_to_group(self) -> "CChatRoomRevokeInviteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_role(self) -> "CChatRoomCreateRoleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_roles(self) -> "CChatRoomGetRolesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rename_role(self) -> "CChatRoomRenameRoleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def reorder_role(self) -> "CChatRoomReorderRoleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_role(self) -> "CChatRoomDeleteRoleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_role_actions(self) -> "CChatRoomGetRoleActionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def replace_role_actions(self) -> "CChatRoomReplaceRoleActionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_role_to_user(self) -> "CChatRoomAddRoleToUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_roles_for_user(self) -> "CChatRoomGetRolesForUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_role_from_user(self) -> "CChatRoomDeleteRoleFromUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def join_chat_room_group(self) -> "CChatRoomJoinChatRoomGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def invite_friend_to_chat_room_group(
        self,
    ) -> "CChatRoomInviteFriendToChatRoomGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def leave_chat_room_group(self) -> "CChatRoomLeaveChatRoomGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_chat_room(self) -> "CChatRoomCreateChatRoomResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_chat_room(self) -> "CChatRoomDeleteChatRoomResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rename_chat_room(self) -> "CChatRoomRenameChatRoomResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def reorder_chat_room(self) -> "CChatRoomReorderChatRoomResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_chat_message(self) -> "CChatRoomSendChatMessageResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def join_voice_chat(self) -> "CChatRoomJoinVoiceChatResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def leave_voice_chat(self) -> "CChatRoomLeaveVoiceChatResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_message_history(self) -> "CChatRoomGetMessageHistoryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_my_chat_room_groups(self) -> "CChatRoomGetMyChatRoomGroupsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_chat_room_group_state(
        self,
    ) -> "CChatRoomGetChatRoomGroupStateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_chat_room_group_summary(
        self,
    ) -> "CChatRoomGetChatRoomGroupSummaryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_app_chat_room_group_force_active(
        self,
    ) -> "CChatRoomSetAppChatRoomGroupForceActiveResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_app_chat_room_group_stop_force_active(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def ack_chat_message(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_invite_link(self) -> "CChatRoomCreateInviteLinkResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_invite_link_info(self) -> "CChatRoomGetInviteLinkInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_invite_info(self) -> "CChatRoomGetInviteInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_invite_links_for_group(
        self,
    ) -> "CChatRoomGetInviteLinksForGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_ban_list(self) -> "CChatRoomGetBanListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_invite_list(self) -> "CChatRoomGetInviteListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_invite_link(self) -> "CChatRoomDeleteInviteLinkResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_session_active_chat_room_groups(
        self,
    ) -> "CChatRoomSetSessionActiveChatRoomGroupsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_user_chat_group_preferences(
        self,
    ) -> "CChatRoomSetUserChatGroupPreferencesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_chat_messages(self) -> "CChatRoomDeleteChatMessagesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_member_list_view(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def search_members(self) -> "CChatRoomSearchMembersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_message_reaction(self) -> "CChatRoomUpdateMessageReactionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_message_reaction_reactors(
        self,
    ) -> "CChatRoomGetMessageReactionReactorsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_chat_room_group(
        self,
        stream: "grpclib.server.Stream[CChatRoomCreateChatRoomGroupRequest, CChatRoomCreateChatRoomGroupResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_chat_room_group(request)
        await stream.send_message(response)

    async def __rpc_save_chat_room_group(
        self,
        stream: "grpclib.server.Stream[CChatRoomSaveChatRoomGroupRequest, CChatRoomSaveChatRoomGroupResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.save_chat_room_group(request)
        await stream.send_message(response)

    async def __rpc_rename_chat_room_group(
        self,
        stream: "grpclib.server.Stream[CChatRoomRenameChatRoomGroupRequest, CChatRoomRenameChatRoomGroupResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.rename_chat_room_group(request)
        await stream.send_message(response)

    async def __rpc_set_chat_room_group_tagline(
        self,
        stream: "grpclib.server.Stream[CChatRoomSetChatRoomGroupTaglineRequest, CChatRoomSetChatRoomGroupTaglineResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_chat_room_group_tagline(request)
        await stream.send_message(response)

    async def __rpc_set_chat_room_group_avatar(
        self,
        stream: "grpclib.server.Stream[CChatRoomSetChatRoomGroupAvatarRequest, CChatRoomSetChatRoomGroupAvatarResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_chat_room_group_avatar(request)
        await stream.send_message(response)

    async def __rpc_set_chat_room_group_watching_broadcast(
        self,
        stream: "grpclib.server.Stream[CChatRoomSetChatRoomGroupWatchingBroadcastRequest, CChatRoomSetChatRoomGroupWatchingBroadcastResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_chat_room_group_watching_broadcast(request)
        await stream.send_message(response)

    async def __rpc_join_mini_game_for_chat_room_group(
        self,
        stream: "grpclib.server.Stream[CChatRoomJoinMiniGameForChatRoomGroupRequest, CChatRoomJoinMiniGameForChatRoomGroupResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.join_mini_game_for_chat_room_group(request)
        await stream.send_message(response)

    async def __rpc_end_mini_game_for_chat_room_group(
        self,
        stream: "grpclib.server.Stream[CChatRoomEndMiniGameForChatRoomGroupRequest, CChatRoomEndMiniGameForChatRoomGroupResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.end_mini_game_for_chat_room_group(request)
        await stream.send_message(response)

    async def __rpc_mute_user_in_group(
        self,
        stream: "grpclib.server.Stream[CChatRoomMuteUserRequest, CChatRoomMuteUserResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.mute_user_in_group(request)
        await stream.send_message(response)

    async def __rpc_kick_user_from_group(
        self,
        stream: "grpclib.server.Stream[CChatRoomKickUserRequest, CChatRoomKickUserResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.kick_user_from_group(request)
        await stream.send_message(response)

    async def __rpc_set_user_ban_state(
        self,
        stream: "grpclib.server.Stream[CChatRoomSetUserBanStateRequest, CChatRoomSetUserBanStateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_user_ban_state(request)
        await stream.send_message(response)

    async def __rpc_revoke_invite_to_group(
        self,
        stream: "grpclib.server.Stream[CChatRoomRevokeInviteRequest, CChatRoomRevokeInviteResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.revoke_invite_to_group(request)
        await stream.send_message(response)

    async def __rpc_create_role(
        self,
        stream: "grpclib.server.Stream[CChatRoomCreateRoleRequest, CChatRoomCreateRoleResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_role(request)
        await stream.send_message(response)

    async def __rpc_get_roles(
        self,
        stream: "grpclib.server.Stream[CChatRoomGetRolesRequest, CChatRoomGetRolesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_roles(request)
        await stream.send_message(response)

    async def __rpc_rename_role(
        self,
        stream: "grpclib.server.Stream[CChatRoomRenameRoleRequest, CChatRoomRenameRoleResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.rename_role(request)
        await stream.send_message(response)

    async def __rpc_reorder_role(
        self,
        stream: "grpclib.server.Stream[CChatRoomReorderRoleRequest, CChatRoomReorderRoleResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.reorder_role(request)
        await stream.send_message(response)

    async def __rpc_delete_role(
        self,
        stream: "grpclib.server.Stream[CChatRoomDeleteRoleRequest, CChatRoomDeleteRoleResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_role(request)
        await stream.send_message(response)

    async def __rpc_get_role_actions(
        self,
        stream: "grpclib.server.Stream[CChatRoomGetRoleActionsRequest, CChatRoomGetRoleActionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_role_actions(request)
        await stream.send_message(response)

    async def __rpc_replace_role_actions(
        self,
        stream: "grpclib.server.Stream[CChatRoomReplaceRoleActionsRequest, CChatRoomReplaceRoleActionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.replace_role_actions(request)
        await stream.send_message(response)

    async def __rpc_add_role_to_user(
        self,
        stream: "grpclib.server.Stream[CChatRoomAddRoleToUserRequest, CChatRoomAddRoleToUserResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_role_to_user(request)
        await stream.send_message(response)

    async def __rpc_get_roles_for_user(
        self,
        stream: "grpclib.server.Stream[CChatRoomGetRolesForUserRequest, CChatRoomGetRolesForUserResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_roles_for_user(request)
        await stream.send_message(response)

    async def __rpc_delete_role_from_user(
        self,
        stream: "grpclib.server.Stream[CChatRoomDeleteRoleFromUserRequest, CChatRoomDeleteRoleFromUserResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_role_from_user(request)
        await stream.send_message(response)

    async def __rpc_join_chat_room_group(
        self,
        stream: "grpclib.server.Stream[CChatRoomJoinChatRoomGroupRequest, CChatRoomJoinChatRoomGroupResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.join_chat_room_group(request)
        await stream.send_message(response)

    async def __rpc_invite_friend_to_chat_room_group(
        self,
        stream: "grpclib.server.Stream[CChatRoomInviteFriendToChatRoomGroupRequest, CChatRoomInviteFriendToChatRoomGroupResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.invite_friend_to_chat_room_group(request)
        await stream.send_message(response)

    async def __rpc_leave_chat_room_group(
        self,
        stream: "grpclib.server.Stream[CChatRoomLeaveChatRoomGroupRequest, CChatRoomLeaveChatRoomGroupResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.leave_chat_room_group(request)
        await stream.send_message(response)

    async def __rpc_create_chat_room(
        self,
        stream: "grpclib.server.Stream[CChatRoomCreateChatRoomRequest, CChatRoomCreateChatRoomResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_chat_room(request)
        await stream.send_message(response)

    async def __rpc_delete_chat_room(
        self,
        stream: "grpclib.server.Stream[CChatRoomDeleteChatRoomRequest, CChatRoomDeleteChatRoomResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_chat_room(request)
        await stream.send_message(response)

    async def __rpc_rename_chat_room(
        self,
        stream: "grpclib.server.Stream[CChatRoomRenameChatRoomRequest, CChatRoomRenameChatRoomResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.rename_chat_room(request)
        await stream.send_message(response)

    async def __rpc_reorder_chat_room(
        self,
        stream: "grpclib.server.Stream[CChatRoomReorderChatRoomRequest, CChatRoomReorderChatRoomResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.reorder_chat_room(request)
        await stream.send_message(response)

    async def __rpc_send_chat_message(
        self,
        stream: "grpclib.server.Stream[CChatRoomSendChatMessageRequest, CChatRoomSendChatMessageResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.send_chat_message(request)
        await stream.send_message(response)

    async def __rpc_join_voice_chat(
        self,
        stream: "grpclib.server.Stream[CChatRoomJoinVoiceChatRequest, CChatRoomJoinVoiceChatResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.join_voice_chat(request)
        await stream.send_message(response)

    async def __rpc_leave_voice_chat(
        self,
        stream: "grpclib.server.Stream[CChatRoomLeaveVoiceChatRequest, CChatRoomLeaveVoiceChatResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.leave_voice_chat(request)
        await stream.send_message(response)

    async def __rpc_get_message_history(
        self,
        stream: "grpclib.server.Stream[CChatRoomGetMessageHistoryRequest, CChatRoomGetMessageHistoryResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_message_history(request)
        await stream.send_message(response)

    async def __rpc_get_my_chat_room_groups(
        self,
        stream: "grpclib.server.Stream[CChatRoomGetMyChatRoomGroupsRequest, CChatRoomGetMyChatRoomGroupsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_my_chat_room_groups(request)
        await stream.send_message(response)

    async def __rpc_get_chat_room_group_state(
        self,
        stream: "grpclib.server.Stream[CChatRoomGetChatRoomGroupStateRequest, CChatRoomGetChatRoomGroupStateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_chat_room_group_state(request)
        await stream.send_message(response)

    async def __rpc_get_chat_room_group_summary(
        self,
        stream: "grpclib.server.Stream[CChatRoomGetChatRoomGroupSummaryRequest, CChatRoomGetChatRoomGroupSummaryResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_chat_room_group_summary(request)
        await stream.send_message(response)

    async def __rpc_set_app_chat_room_group_force_active(
        self,
        stream: "grpclib.server.Stream[CChatRoomSetAppChatRoomGroupForceActiveRequest, CChatRoomSetAppChatRoomGroupForceActiveResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_app_chat_room_group_force_active(request)
        await stream.send_message(response)

    async def __rpc_set_app_chat_room_group_stop_force_active(
        self,
        stream: "grpclib.server.Stream[CChatRoomSetAppChatRoomGroupStopForceActiveNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_app_chat_room_group_stop_force_active(request)
        await stream.send_message(response)

    async def __rpc_ack_chat_message(
        self,
        stream: "grpclib.server.Stream[CChatRoomAckChatMessageNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.ack_chat_message(request)
        await stream.send_message(response)

    async def __rpc_create_invite_link(
        self,
        stream: "grpclib.server.Stream[CChatRoomCreateInviteLinkRequest, CChatRoomCreateInviteLinkResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_invite_link(request)
        await stream.send_message(response)

    async def __rpc_get_invite_link_info(
        self,
        stream: "grpclib.server.Stream[CChatRoomGetInviteLinkInfoRequest, CChatRoomGetInviteLinkInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_invite_link_info(request)
        await stream.send_message(response)

    async def __rpc_get_invite_info(
        self,
        stream: "grpclib.server.Stream[CChatRoomGetInviteInfoRequest, CChatRoomGetInviteInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_invite_info(request)
        await stream.send_message(response)

    async def __rpc_get_invite_links_for_group(
        self,
        stream: "grpclib.server.Stream[CChatRoomGetInviteLinksForGroupRequest, CChatRoomGetInviteLinksForGroupResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_invite_links_for_group(request)
        await stream.send_message(response)

    async def __rpc_get_ban_list(
        self,
        stream: "grpclib.server.Stream[CChatRoomGetBanListRequest, CChatRoomGetBanListResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_ban_list(request)
        await stream.send_message(response)

    async def __rpc_get_invite_list(
        self,
        stream: "grpclib.server.Stream[CChatRoomGetInviteListRequest, CChatRoomGetInviteListResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_invite_list(request)
        await stream.send_message(response)

    async def __rpc_delete_invite_link(
        self,
        stream: "grpclib.server.Stream[CChatRoomDeleteInviteLinkRequest, CChatRoomDeleteInviteLinkResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_invite_link(request)
        await stream.send_message(response)

    async def __rpc_set_session_active_chat_room_groups(
        self,
        stream: "grpclib.server.Stream[CChatRoomSetSessionActiveChatRoomGroupsRequest, CChatRoomSetSessionActiveChatRoomGroupsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_session_active_chat_room_groups(request)
        await stream.send_message(response)

    async def __rpc_set_user_chat_group_preferences(
        self,
        stream: "grpclib.server.Stream[CChatRoomSetUserChatGroupPreferencesRequest, CChatRoomSetUserChatGroupPreferencesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_user_chat_group_preferences(request)
        await stream.send_message(response)

    async def __rpc_delete_chat_messages(
        self,
        stream: "grpclib.server.Stream[CChatRoomDeleteChatMessagesRequest, CChatRoomDeleteChatMessagesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_chat_messages(request)
        await stream.send_message(response)

    async def __rpc_update_member_list_view(
        self,
        stream: "grpclib.server.Stream[CChatRoomUpdateMemberListViewNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_member_list_view(request)
        await stream.send_message(response)

    async def __rpc_search_members(
        self,
        stream: "grpclib.server.Stream[CChatRoomSearchMembersRequest, CChatRoomSearchMembersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.search_members(request)
        await stream.send_message(response)

    async def __rpc_update_message_reaction(
        self,
        stream: "grpclib.server.Stream[CChatRoomUpdateMessageReactionRequest, CChatRoomUpdateMessageReactionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_message_reaction(request)
        await stream.send_message(response)

    async def __rpc_get_message_reaction_reactors(
        self,
        stream: "grpclib.server.Stream[CChatRoomGetMessageReactionReactorsRequest, CChatRoomGetMessageReactionReactorsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_message_reaction_reactors(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/ChatRoom/CreateChatRoomGroup": grpclib.const.Handler(
                self.__rpc_create_chat_room_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomCreateChatRoomGroupRequest,
                CChatRoomCreateChatRoomGroupResponse,
            ),
            "/ChatRoom/SaveChatRoomGroup": grpclib.const.Handler(
                self.__rpc_save_chat_room_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomSaveChatRoomGroupRequest,
                CChatRoomSaveChatRoomGroupResponse,
            ),
            "/ChatRoom/RenameChatRoomGroup": grpclib.const.Handler(
                self.__rpc_rename_chat_room_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomRenameChatRoomGroupRequest,
                CChatRoomRenameChatRoomGroupResponse,
            ),
            "/ChatRoom/SetChatRoomGroupTagline": grpclib.const.Handler(
                self.__rpc_set_chat_room_group_tagline,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomSetChatRoomGroupTaglineRequest,
                CChatRoomSetChatRoomGroupTaglineResponse,
            ),
            "/ChatRoom/SetChatRoomGroupAvatar": grpclib.const.Handler(
                self.__rpc_set_chat_room_group_avatar,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomSetChatRoomGroupAvatarRequest,
                CChatRoomSetChatRoomGroupAvatarResponse,
            ),
            "/ChatRoom/SetChatRoomGroupWatchingBroadcast": grpclib.const.Handler(
                self.__rpc_set_chat_room_group_watching_broadcast,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomSetChatRoomGroupWatchingBroadcastRequest,
                CChatRoomSetChatRoomGroupWatchingBroadcastResponse,
            ),
            "/ChatRoom/JoinMiniGameForChatRoomGroup": grpclib.const.Handler(
                self.__rpc_join_mini_game_for_chat_room_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomJoinMiniGameForChatRoomGroupRequest,
                CChatRoomJoinMiniGameForChatRoomGroupResponse,
            ),
            "/ChatRoom/EndMiniGameForChatRoomGroup": grpclib.const.Handler(
                self.__rpc_end_mini_game_for_chat_room_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomEndMiniGameForChatRoomGroupRequest,
                CChatRoomEndMiniGameForChatRoomGroupResponse,
            ),
            "/ChatRoom/MuteUserInGroup": grpclib.const.Handler(
                self.__rpc_mute_user_in_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomMuteUserRequest,
                CChatRoomMuteUserResponse,
            ),
            "/ChatRoom/KickUserFromGroup": grpclib.const.Handler(
                self.__rpc_kick_user_from_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomKickUserRequest,
                CChatRoomKickUserResponse,
            ),
            "/ChatRoom/SetUserBanState": grpclib.const.Handler(
                self.__rpc_set_user_ban_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomSetUserBanStateRequest,
                CChatRoomSetUserBanStateResponse,
            ),
            "/ChatRoom/RevokeInviteToGroup": grpclib.const.Handler(
                self.__rpc_revoke_invite_to_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomRevokeInviteRequest,
                CChatRoomRevokeInviteResponse,
            ),
            "/ChatRoom/CreateRole": grpclib.const.Handler(
                self.__rpc_create_role,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomCreateRoleRequest,
                CChatRoomCreateRoleResponse,
            ),
            "/ChatRoom/GetRoles": grpclib.const.Handler(
                self.__rpc_get_roles,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomGetRolesRequest,
                CChatRoomGetRolesResponse,
            ),
            "/ChatRoom/RenameRole": grpclib.const.Handler(
                self.__rpc_rename_role,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomRenameRoleRequest,
                CChatRoomRenameRoleResponse,
            ),
            "/ChatRoom/ReorderRole": grpclib.const.Handler(
                self.__rpc_reorder_role,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomReorderRoleRequest,
                CChatRoomReorderRoleResponse,
            ),
            "/ChatRoom/DeleteRole": grpclib.const.Handler(
                self.__rpc_delete_role,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomDeleteRoleRequest,
                CChatRoomDeleteRoleResponse,
            ),
            "/ChatRoom/GetRoleActions": grpclib.const.Handler(
                self.__rpc_get_role_actions,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomGetRoleActionsRequest,
                CChatRoomGetRoleActionsResponse,
            ),
            "/ChatRoom/ReplaceRoleActions": grpclib.const.Handler(
                self.__rpc_replace_role_actions,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomReplaceRoleActionsRequest,
                CChatRoomReplaceRoleActionsResponse,
            ),
            "/ChatRoom/AddRoleToUser": grpclib.const.Handler(
                self.__rpc_add_role_to_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomAddRoleToUserRequest,
                CChatRoomAddRoleToUserResponse,
            ),
            "/ChatRoom/GetRolesForUser": grpclib.const.Handler(
                self.__rpc_get_roles_for_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomGetRolesForUserRequest,
                CChatRoomGetRolesForUserResponse,
            ),
            "/ChatRoom/DeleteRoleFromUser": grpclib.const.Handler(
                self.__rpc_delete_role_from_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomDeleteRoleFromUserRequest,
                CChatRoomDeleteRoleFromUserResponse,
            ),
            "/ChatRoom/JoinChatRoomGroup": grpclib.const.Handler(
                self.__rpc_join_chat_room_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomJoinChatRoomGroupRequest,
                CChatRoomJoinChatRoomGroupResponse,
            ),
            "/ChatRoom/InviteFriendToChatRoomGroup": grpclib.const.Handler(
                self.__rpc_invite_friend_to_chat_room_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomInviteFriendToChatRoomGroupRequest,
                CChatRoomInviteFriendToChatRoomGroupResponse,
            ),
            "/ChatRoom/LeaveChatRoomGroup": grpclib.const.Handler(
                self.__rpc_leave_chat_room_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomLeaveChatRoomGroupRequest,
                CChatRoomLeaveChatRoomGroupResponse,
            ),
            "/ChatRoom/CreateChatRoom": grpclib.const.Handler(
                self.__rpc_create_chat_room,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomCreateChatRoomRequest,
                CChatRoomCreateChatRoomResponse,
            ),
            "/ChatRoom/DeleteChatRoom": grpclib.const.Handler(
                self.__rpc_delete_chat_room,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomDeleteChatRoomRequest,
                CChatRoomDeleteChatRoomResponse,
            ),
            "/ChatRoom/RenameChatRoom": grpclib.const.Handler(
                self.__rpc_rename_chat_room,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomRenameChatRoomRequest,
                CChatRoomRenameChatRoomResponse,
            ),
            "/ChatRoom/ReorderChatRoom": grpclib.const.Handler(
                self.__rpc_reorder_chat_room,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomReorderChatRoomRequest,
                CChatRoomReorderChatRoomResponse,
            ),
            "/ChatRoom/SendChatMessage": grpclib.const.Handler(
                self.__rpc_send_chat_message,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomSendChatMessageRequest,
                CChatRoomSendChatMessageResponse,
            ),
            "/ChatRoom/JoinVoiceChat": grpclib.const.Handler(
                self.__rpc_join_voice_chat,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomJoinVoiceChatRequest,
                CChatRoomJoinVoiceChatResponse,
            ),
            "/ChatRoom/LeaveVoiceChat": grpclib.const.Handler(
                self.__rpc_leave_voice_chat,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomLeaveVoiceChatRequest,
                CChatRoomLeaveVoiceChatResponse,
            ),
            "/ChatRoom/GetMessageHistory": grpclib.const.Handler(
                self.__rpc_get_message_history,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomGetMessageHistoryRequest,
                CChatRoomGetMessageHistoryResponse,
            ),
            "/ChatRoom/GetMyChatRoomGroups": grpclib.const.Handler(
                self.__rpc_get_my_chat_room_groups,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomGetMyChatRoomGroupsRequest,
                CChatRoomGetMyChatRoomGroupsResponse,
            ),
            "/ChatRoom/GetChatRoomGroupState": grpclib.const.Handler(
                self.__rpc_get_chat_room_group_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomGetChatRoomGroupStateRequest,
                CChatRoomGetChatRoomGroupStateResponse,
            ),
            "/ChatRoom/GetChatRoomGroupSummary": grpclib.const.Handler(
                self.__rpc_get_chat_room_group_summary,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomGetChatRoomGroupSummaryRequest,
                CChatRoomGetChatRoomGroupSummaryResponse,
            ),
            "/ChatRoom/SetAppChatRoomGroupForceActive": grpclib.const.Handler(
                self.__rpc_set_app_chat_room_group_force_active,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomSetAppChatRoomGroupForceActiveRequest,
                CChatRoomSetAppChatRoomGroupForceActiveResponse,
            ),
            "/ChatRoom/SetAppChatRoomGroupStopForceActive": grpclib.const.Handler(
                self.__rpc_set_app_chat_room_group_stop_force_active,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomSetAppChatRoomGroupStopForceActiveNotification,
                NoResponse,
            ),
            "/ChatRoom/AckChatMessage": grpclib.const.Handler(
                self.__rpc_ack_chat_message,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomAckChatMessageNotification,
                NoResponse,
            ),
            "/ChatRoom/CreateInviteLink": grpclib.const.Handler(
                self.__rpc_create_invite_link,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomCreateInviteLinkRequest,
                CChatRoomCreateInviteLinkResponse,
            ),
            "/ChatRoom/GetInviteLinkInfo": grpclib.const.Handler(
                self.__rpc_get_invite_link_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomGetInviteLinkInfoRequest,
                CChatRoomGetInviteLinkInfoResponse,
            ),
            "/ChatRoom/GetInviteInfo": grpclib.const.Handler(
                self.__rpc_get_invite_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomGetInviteInfoRequest,
                CChatRoomGetInviteInfoResponse,
            ),
            "/ChatRoom/GetInviteLinksForGroup": grpclib.const.Handler(
                self.__rpc_get_invite_links_for_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomGetInviteLinksForGroupRequest,
                CChatRoomGetInviteLinksForGroupResponse,
            ),
            "/ChatRoom/GetBanList": grpclib.const.Handler(
                self.__rpc_get_ban_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomGetBanListRequest,
                CChatRoomGetBanListResponse,
            ),
            "/ChatRoom/GetInviteList": grpclib.const.Handler(
                self.__rpc_get_invite_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomGetInviteListRequest,
                CChatRoomGetInviteListResponse,
            ),
            "/ChatRoom/DeleteInviteLink": grpclib.const.Handler(
                self.__rpc_delete_invite_link,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomDeleteInviteLinkRequest,
                CChatRoomDeleteInviteLinkResponse,
            ),
            "/ChatRoom/SetSessionActiveChatRoomGroups": grpclib.const.Handler(
                self.__rpc_set_session_active_chat_room_groups,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomSetSessionActiveChatRoomGroupsRequest,
                CChatRoomSetSessionActiveChatRoomGroupsResponse,
            ),
            "/ChatRoom/SetUserChatGroupPreferences": grpclib.const.Handler(
                self.__rpc_set_user_chat_group_preferences,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomSetUserChatGroupPreferencesRequest,
                CChatRoomSetUserChatGroupPreferencesResponse,
            ),
            "/ChatRoom/DeleteChatMessages": grpclib.const.Handler(
                self.__rpc_delete_chat_messages,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomDeleteChatMessagesRequest,
                CChatRoomDeleteChatMessagesResponse,
            ),
            "/ChatRoom/UpdateMemberListView": grpclib.const.Handler(
                self.__rpc_update_member_list_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomUpdateMemberListViewNotification,
                NoResponse,
            ),
            "/ChatRoom/SearchMembers": grpclib.const.Handler(
                self.__rpc_search_members,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomSearchMembersRequest,
                CChatRoomSearchMembersResponse,
            ),
            "/ChatRoom/UpdateMessageReaction": grpclib.const.Handler(
                self.__rpc_update_message_reaction,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomUpdateMessageReactionRequest,
                CChatRoomUpdateMessageReactionResponse,
            ),
            "/ChatRoom/GetMessageReactionReactors": grpclib.const.Handler(
                self.__rpc_get_message_reaction_reactors,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomGetMessageReactionReactorsRequest,
                CChatRoomGetMessageReactionReactorsResponse,
            ),
        }


class ClanChatRoomsBase(ServiceBase):
    async def get_clan_chat_room_info(
        self,
    ) -> "CClanChatRoomsGetClanChatRoomInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_clan_chat_room_private(
        self,
    ) -> "CClanChatRoomsSetClanChatRoomPrivateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_clan_chat_room_info(
        self,
        stream: "grpclib.server.Stream[CClanChatRoomsGetClanChatRoomInfoRequest, CClanChatRoomsGetClanChatRoomInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_clan_chat_room_info(request)
        await stream.send_message(response)

    async def __rpc_set_clan_chat_room_private(
        self,
        stream: "grpclib.server.Stream[CClanChatRoomsSetClanChatRoomPrivateRequest, CClanChatRoomsSetClanChatRoomPrivateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_clan_chat_room_private(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/ClanChatRooms/GetClanChatRoomInfo": grpclib.const.Handler(
                self.__rpc_get_clan_chat_room_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                CClanChatRoomsGetClanChatRoomInfoRequest,
                CClanChatRoomsGetClanChatRoomInfoResponse,
            ),
            "/ClanChatRooms/SetClanChatRoomPrivate": grpclib.const.Handler(
                self.__rpc_set_clan_chat_room_private,
                grpclib.const.Cardinality.UNARY_UNARY,
                CClanChatRoomsSetClanChatRoomPrivateRequest,
                CClanChatRoomsSetClanChatRoomPrivateResponse,
            ),
        }


class ChatRoomClientBase(ServiceBase):
    async def notify_incoming_chat_message(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_chat_message_modified(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_member_state_change(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_chat_room_header_state_change(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_chat_room_group_rooms_change(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_should_rejoin_chat_room_voice_chat(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_chat_group_user_state_changed(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_ack_chat_message_echo(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_chat_room_disconnect(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_member_list_view_updated(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_message_reaction(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_notify_incoming_chat_message(
        self,
        stream: "grpclib.server.Stream[CChatRoomIncomingChatMessageNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_incoming_chat_message(request)
        await stream.send_message(response)

    async def __rpc_notify_chat_message_modified(
        self,
        stream: "grpclib.server.Stream[CChatRoomChatMessageModifiedNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_chat_message_modified(request)
        await stream.send_message(response)

    async def __rpc_notify_member_state_change(
        self,
        stream: "grpclib.server.Stream[CChatRoomMemberStateChangeNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_member_state_change(request)
        await stream.send_message(response)

    async def __rpc_notify_chat_room_header_state_change(
        self,
        stream: "grpclib.server.Stream[CChatRoomChatRoomHeaderStateNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_chat_room_header_state_change(request)
        await stream.send_message(response)

    async def __rpc_notify_chat_room_group_rooms_change(
        self,
        stream: "grpclib.server.Stream[CChatRoomChatRoomGroupRoomsChangeNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_chat_room_group_rooms_change(request)
        await stream.send_message(response)

    async def __rpc_notify_should_rejoin_chat_room_voice_chat(
        self,
        stream: "grpclib.server.Stream[CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_should_rejoin_chat_room_voice_chat(request)
        await stream.send_message(response)

    async def __rpc_notify_chat_group_user_state_changed(
        self,
        stream: "grpclib.server.Stream[ChatRoomClientNotifyChatGroupUserStateChangedNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_chat_group_user_state_changed(request)
        await stream.send_message(response)

    async def __rpc_notify_ack_chat_message_echo(
        self,
        stream: "grpclib.server.Stream[CChatRoomAckChatMessageNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_ack_chat_message_echo(request)
        await stream.send_message(response)

    async def __rpc_notify_chat_room_disconnect(
        self,
        stream: "grpclib.server.Stream[ChatRoomClientNotifyChatRoomDisconnectNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_chat_room_disconnect(request)
        await stream.send_message(response)

    async def __rpc_notify_member_list_view_updated(
        self,
        stream: "grpclib.server.Stream[CChatRoomClientMemberListViewUpdatedNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_member_list_view_updated(request)
        await stream.send_message(response)

    async def __rpc_notify_message_reaction(
        self,
        stream: "grpclib.server.Stream[CChatRoomMessageReactionNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_message_reaction(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/ChatRoomClient/NotifyIncomingChatMessage": grpclib.const.Handler(
                self.__rpc_notify_incoming_chat_message,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomIncomingChatMessageNotification,
                NoResponse,
            ),
            "/ChatRoomClient/NotifyChatMessageModified": grpclib.const.Handler(
                self.__rpc_notify_chat_message_modified,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomChatMessageModifiedNotification,
                NoResponse,
            ),
            "/ChatRoomClient/NotifyMemberStateChange": grpclib.const.Handler(
                self.__rpc_notify_member_state_change,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomMemberStateChangeNotification,
                NoResponse,
            ),
            "/ChatRoomClient/NotifyChatRoomHeaderStateChange": grpclib.const.Handler(
                self.__rpc_notify_chat_room_header_state_change,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomChatRoomHeaderStateNotification,
                NoResponse,
            ),
            "/ChatRoomClient/NotifyChatRoomGroupRoomsChange": grpclib.const.Handler(
                self.__rpc_notify_chat_room_group_rooms_change,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomChatRoomGroupRoomsChangeNotification,
                NoResponse,
            ),
            "/ChatRoomClient/NotifyShouldRejoinChatRoomVoiceChat": grpclib.const.Handler(
                self.__rpc_notify_should_rejoin_chat_room_voice_chat,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification,
                NoResponse,
            ),
            "/ChatRoomClient/NotifyChatGroupUserStateChanged": grpclib.const.Handler(
                self.__rpc_notify_chat_group_user_state_changed,
                grpclib.const.Cardinality.UNARY_UNARY,
                ChatRoomClientNotifyChatGroupUserStateChangedNotification,
                NoResponse,
            ),
            "/ChatRoomClient/NotifyAckChatMessageEcho": grpclib.const.Handler(
                self.__rpc_notify_ack_chat_message_echo,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomAckChatMessageNotification,
                NoResponse,
            ),
            "/ChatRoomClient/NotifyChatRoomDisconnect": grpclib.const.Handler(
                self.__rpc_notify_chat_room_disconnect,
                grpclib.const.Cardinality.UNARY_UNARY,
                ChatRoomClientNotifyChatRoomDisconnectNotification,
                NoResponse,
            ),
            "/ChatRoomClient/NotifyMemberListViewUpdated": grpclib.const.Handler(
                self.__rpc_notify_member_list_view_updated,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomClientMemberListViewUpdatedNotification,
                NoResponse,
            ),
            "/ChatRoomClient/NotifyMessageReaction": grpclib.const.Handler(
                self.__rpc_notify_message_reaction,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatRoomMessageReactionNotification,
                NoResponse,
            ),
        }


class ChatUsabilityBase(ServiceBase):
    async def notify_client_usability_metrics(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_notify_client_usability_metrics(
        self,
        stream: "grpclib.server.Stream[CChatUsabilityClientUsabilityMetricsNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_client_usability_metrics(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/ChatUsability/NotifyClientUsabilityMetrics": grpclib.const.Handler(
                self.__rpc_notify_client_usability_metrics,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatUsabilityClientUsabilityMetricsNotification,
                NoResponse,
            ),
        }


class ChatUsabilityClientBase(ServiceBase):
    async def notify_request_client_usability_metrics(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_notify_request_client_usability_metrics(
        self,
        stream: "grpclib.server.Stream[CChatUsabilityRequestClientUsabilityMetricsNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_request_client_usability_metrics(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/ChatUsabilityClient/NotifyRequestClientUsabilityMetrics": grpclib.const.Handler(
                self.__rpc_notify_request_client_usability_metrics,
                grpclib.const.Cardinality.UNARY_UNARY,
                CChatUsabilityRequestClientUsabilityMetricsNotification,
                NoResponse,
            ),
        }


class PlayerBase(ServiceBase):
    async def get_mutual_friends_for_incoming_invites(
        self,
    ) -> "CPlayerGetMutualFriendsForIncomingInvitesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_owned_games(self) -> "CPlayerGetOwnedGamesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_play_next(self) -> "CPlayerGetPlayNextResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_friends_gameplay_info(
        self,
    ) -> "CPlayerGetFriendsGameplayInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_game_badge_levels(self) -> "CPlayerGetGameBadgeLevelsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_profile_background(self) -> "CPlayerGetProfileBackgroundResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_profile_background(self) -> "CPlayerSetProfileBackgroundResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_mini_profile_background(
        self,
    ) -> "CPlayerGetMiniProfileBackgroundResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_mini_profile_background(
        self,
    ) -> "CPlayerSetMiniProfileBackgroundResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_avatar_frame(self) -> "CPlayerGetAvatarFrameResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_avatar_frame(self) -> "CPlayerSetAvatarFrameResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_animated_avatar(self) -> "CPlayerGetAnimatedAvatarResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_animated_avatar(self) -> "CPlayerSetAnimatedAvatarResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_steam_deck_keyboard_skin(
        self,
    ) -> "CPlayerGetSteamDeckKeyboardSkinResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_steam_deck_keyboard_skin(
        self,
    ) -> "CPlayerSetSteamDeckKeyboardSkinResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_profile_items_owned(self) -> "CPlayerGetProfileItemsOwnedResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_profile_items_equipped(
        self,
    ) -> "CPlayerGetProfileItemsEquippedResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_equipped_profile_item_flags(
        self,
    ) -> "CPlayerSetEquippedProfileItemFlagsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_emoticon_list(self) -> "CPlayerGetEmoticonListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_top_achievements_for_games(
        self,
    ) -> "CPlayerGetTopAchievementsForGamesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_achievements_progress(
        self,
    ) -> "CPlayerGetAchievementsProgressResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_game_achievements(self) -> "CPlayerGetGameAchievementsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_favorite_badge(self) -> "CPlayerGetFavoriteBadgeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_favorite_badge(self) -> "CPlayerSetFavoriteBadgeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_profile_customization(
        self,
    ) -> "CPlayerGetProfileCustomizationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_purchased_profile_customizations(
        self,
    ) -> "CPlayerGetPurchasedProfileCustomizationsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_purchased_and_upgraded_profile_customizations(
        self,
    ) -> "CPlayerGetPurchasedAndUpgradedProfileCustomizationsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_profile_themes_available(
        self,
    ) -> "CPlayerGetProfileThemesAvailableResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_profile_theme(self) -> "CPlayerSetProfileThemeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_profile_preferences(self) -> "CPlayerSetProfilePreferencesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_status_to_friends(self) -> "CPlayerPostStatusToFriendsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_posted_status(self) -> "CPlayerGetPostedStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_posted_status(self) -> "CPlayerDeletePostedStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def client_get_last_played_times(self) -> "CPlayerGetLastPlayedTimesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_time_ssa_accepted(self) -> "CPlayerGetTimeSsaAcceptedResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def accept_ssa(self) -> "CPlayerAcceptSsaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_nickname_list(self) -> "CPlayerGetNicknameListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_per_friend_preferences(
        self,
    ) -> "CPlayerGetPerFriendPreferencesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_per_friend_preferences(
        self,
    ) -> "CPlayerSetPerFriendPreferencesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_friend(self) -> "CPlayerAddFriendResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_friend(self) -> "CPlayerRemoveFriendResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def ignore_friend(self) -> "CPlayerIgnoreFriendResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_community_preferences(
        self,
    ) -> "CPlayerGetCommunityPreferencesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_community_preferences(
        self,
    ) -> "CPlayerSetCommunityPreferencesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_text_filter_words(self) -> "CPlayerGetTextFilterWordsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_new_steam_announcement_state(
        self,
    ) -> "CPlayerGetNewSteamAnnouncementStateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_steam_announcement_last_read(
        self,
    ) -> "CPlayerUpdateSteamAnnouncementLastReadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_privacy_settings(self) -> "CPlayerGetPrivacySettingsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_duration_control(self) -> "CPlayerGetDurationControlResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def record_disconnected_playtime(
        self,
    ) -> "CPlayerRecordDisconnectedPlaytimeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_mutual_friends_for_incoming_invites(
        self,
        stream: "grpclib.server.Stream[CPlayerGetMutualFriendsForIncomingInvitesRequest, CPlayerGetMutualFriendsForIncomingInvitesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_mutual_friends_for_incoming_invites(request)
        await stream.send_message(response)

    async def __rpc_get_owned_games(
        self,
        stream: "grpclib.server.Stream[CPlayerGetOwnedGamesRequest, CPlayerGetOwnedGamesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_owned_games(request)
        await stream.send_message(response)

    async def __rpc_get_play_next(
        self,
        stream: "grpclib.server.Stream[CPlayerGetPlayNextRequest, CPlayerGetPlayNextResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_play_next(request)
        await stream.send_message(response)

    async def __rpc_get_friends_gameplay_info(
        self,
        stream: "grpclib.server.Stream[CPlayerGetFriendsGameplayInfoRequest, CPlayerGetFriendsGameplayInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_friends_gameplay_info(request)
        await stream.send_message(response)

    async def __rpc_get_game_badge_levels(
        self,
        stream: "grpclib.server.Stream[CPlayerGetGameBadgeLevelsRequest, CPlayerGetGameBadgeLevelsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_game_badge_levels(request)
        await stream.send_message(response)

    async def __rpc_get_profile_background(
        self,
        stream: "grpclib.server.Stream[CPlayerGetProfileBackgroundRequest, CPlayerGetProfileBackgroundResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_profile_background(request)
        await stream.send_message(response)

    async def __rpc_set_profile_background(
        self,
        stream: "grpclib.server.Stream[CPlayerSetProfileBackgroundRequest, CPlayerSetProfileBackgroundResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_profile_background(request)
        await stream.send_message(response)

    async def __rpc_get_mini_profile_background(
        self,
        stream: "grpclib.server.Stream[CPlayerGetMiniProfileBackgroundRequest, CPlayerGetMiniProfileBackgroundResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_mini_profile_background(request)
        await stream.send_message(response)

    async def __rpc_set_mini_profile_background(
        self,
        stream: "grpclib.server.Stream[CPlayerSetMiniProfileBackgroundRequest, CPlayerSetMiniProfileBackgroundResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_mini_profile_background(request)
        await stream.send_message(response)

    async def __rpc_get_avatar_frame(
        self,
        stream: "grpclib.server.Stream[CPlayerGetAvatarFrameRequest, CPlayerGetAvatarFrameResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_avatar_frame(request)
        await stream.send_message(response)

    async def __rpc_set_avatar_frame(
        self,
        stream: "grpclib.server.Stream[CPlayerSetAvatarFrameRequest, CPlayerSetAvatarFrameResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_avatar_frame(request)
        await stream.send_message(response)

    async def __rpc_get_animated_avatar(
        self,
        stream: "grpclib.server.Stream[CPlayerGetAnimatedAvatarRequest, CPlayerGetAnimatedAvatarResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_animated_avatar(request)
        await stream.send_message(response)

    async def __rpc_set_animated_avatar(
        self,
        stream: "grpclib.server.Stream[CPlayerSetAnimatedAvatarRequest, CPlayerSetAnimatedAvatarResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_animated_avatar(request)
        await stream.send_message(response)

    async def __rpc_get_steam_deck_keyboard_skin(
        self,
        stream: "grpclib.server.Stream[CPlayerGetSteamDeckKeyboardSkinRequest, CPlayerGetSteamDeckKeyboardSkinResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_steam_deck_keyboard_skin(request)
        await stream.send_message(response)

    async def __rpc_set_steam_deck_keyboard_skin(
        self,
        stream: "grpclib.server.Stream[CPlayerSetSteamDeckKeyboardSkinRequest, CPlayerSetSteamDeckKeyboardSkinResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_steam_deck_keyboard_skin(request)
        await stream.send_message(response)

    async def __rpc_get_profile_items_owned(
        self,
        stream: "grpclib.server.Stream[CPlayerGetProfileItemsOwnedRequest, CPlayerGetProfileItemsOwnedResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_profile_items_owned(request)
        await stream.send_message(response)

    async def __rpc_get_profile_items_equipped(
        self,
        stream: "grpclib.server.Stream[CPlayerGetProfileItemsEquippedRequest, CPlayerGetProfileItemsEquippedResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_profile_items_equipped(request)
        await stream.send_message(response)

    async def __rpc_set_equipped_profile_item_flags(
        self,
        stream: "grpclib.server.Stream[CPlayerSetEquippedProfileItemFlagsRequest, CPlayerSetEquippedProfileItemFlagsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_equipped_profile_item_flags(request)
        await stream.send_message(response)

    async def __rpc_get_emoticon_list(
        self,
        stream: "grpclib.server.Stream[CPlayerGetEmoticonListRequest, CPlayerGetEmoticonListResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_emoticon_list(request)
        await stream.send_message(response)

    async def __rpc_get_top_achievements_for_games(
        self,
        stream: "grpclib.server.Stream[CPlayerGetTopAchievementsForGamesRequest, CPlayerGetTopAchievementsForGamesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_top_achievements_for_games(request)
        await stream.send_message(response)

    async def __rpc_get_achievements_progress(
        self,
        stream: "grpclib.server.Stream[CPlayerGetAchievementsProgressRequest, CPlayerGetAchievementsProgressResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_achievements_progress(request)
        await stream.send_message(response)

    async def __rpc_get_game_achievements(
        self,
        stream: "grpclib.server.Stream[CPlayerGetGameAchievementsRequest, CPlayerGetGameAchievementsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_game_achievements(request)
        await stream.send_message(response)

    async def __rpc_get_favorite_badge(
        self,
        stream: "grpclib.server.Stream[CPlayerGetFavoriteBadgeRequest, CPlayerGetFavoriteBadgeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_favorite_badge(request)
        await stream.send_message(response)

    async def __rpc_set_favorite_badge(
        self,
        stream: "grpclib.server.Stream[CPlayerSetFavoriteBadgeRequest, CPlayerSetFavoriteBadgeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_favorite_badge(request)
        await stream.send_message(response)

    async def __rpc_get_profile_customization(
        self,
        stream: "grpclib.server.Stream[CPlayerGetProfileCustomizationRequest, CPlayerGetProfileCustomizationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_profile_customization(request)
        await stream.send_message(response)

    async def __rpc_get_purchased_profile_customizations(
        self,
        stream: "grpclib.server.Stream[CPlayerGetPurchasedProfileCustomizationsRequest, CPlayerGetPurchasedProfileCustomizationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_purchased_profile_customizations(request)
        await stream.send_message(response)

    async def __rpc_get_purchased_and_upgraded_profile_customizations(
        self,
        stream: "grpclib.server.Stream[CPlayerGetPurchasedAndUpgradedProfileCustomizationsRequest, CPlayerGetPurchasedAndUpgradedProfileCustomizationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_purchased_and_upgraded_profile_customizations(request)
        await stream.send_message(response)

    async def __rpc_get_profile_themes_available(
        self,
        stream: "grpclib.server.Stream[CPlayerGetProfileThemesAvailableRequest, CPlayerGetProfileThemesAvailableResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_profile_themes_available(request)
        await stream.send_message(response)

    async def __rpc_set_profile_theme(
        self,
        stream: "grpclib.server.Stream[CPlayerSetProfileThemeRequest, CPlayerSetProfileThemeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_profile_theme(request)
        await stream.send_message(response)

    async def __rpc_set_profile_preferences(
        self,
        stream: "grpclib.server.Stream[CPlayerSetProfilePreferencesRequest, CPlayerSetProfilePreferencesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_profile_preferences(request)
        await stream.send_message(response)

    async def __rpc_post_status_to_friends(
        self,
        stream: "grpclib.server.Stream[CPlayerPostStatusToFriendsRequest, CPlayerPostStatusToFriendsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_status_to_friends(request)
        await stream.send_message(response)

    async def __rpc_get_posted_status(
        self,
        stream: "grpclib.server.Stream[CPlayerGetPostedStatusRequest, CPlayerGetPostedStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_posted_status(request)
        await stream.send_message(response)

    async def __rpc_delete_posted_status(
        self,
        stream: "grpclib.server.Stream[CPlayerDeletePostedStatusRequest, CPlayerDeletePostedStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_posted_status(request)
        await stream.send_message(response)

    async def __rpc_client_get_last_played_times(
        self,
        stream: "grpclib.server.Stream[CPlayerGetLastPlayedTimesRequest, CPlayerGetLastPlayedTimesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.client_get_last_played_times(request)
        await stream.send_message(response)

    async def __rpc_get_time_ssa_accepted(
        self,
        stream: "grpclib.server.Stream[CPlayerGetTimeSsaAcceptedRequest, CPlayerGetTimeSsaAcceptedResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_time_ssa_accepted(request)
        await stream.send_message(response)

    async def __rpc_accept_ssa(
        self,
        stream: "grpclib.server.Stream[CPlayerAcceptSsaRequest, CPlayerAcceptSsaResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.accept_ssa(request)
        await stream.send_message(response)

    async def __rpc_get_nickname_list(
        self,
        stream: "grpclib.server.Stream[CPlayerGetNicknameListRequest, CPlayerGetNicknameListResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_nickname_list(request)
        await stream.send_message(response)

    async def __rpc_get_per_friend_preferences(
        self,
        stream: "grpclib.server.Stream[CPlayerGetPerFriendPreferencesRequest, CPlayerGetPerFriendPreferencesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_per_friend_preferences(request)
        await stream.send_message(response)

    async def __rpc_set_per_friend_preferences(
        self,
        stream: "grpclib.server.Stream[CPlayerSetPerFriendPreferencesRequest, CPlayerSetPerFriendPreferencesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_per_friend_preferences(request)
        await stream.send_message(response)

    async def __rpc_add_friend(
        self,
        stream: "grpclib.server.Stream[CPlayerAddFriendRequest, CPlayerAddFriendResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_friend(request)
        await stream.send_message(response)

    async def __rpc_remove_friend(
        self,
        stream: "grpclib.server.Stream[CPlayerRemoveFriendRequest, CPlayerRemoveFriendResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_friend(request)
        await stream.send_message(response)

    async def __rpc_ignore_friend(
        self,
        stream: "grpclib.server.Stream[CPlayerIgnoreFriendRequest, CPlayerIgnoreFriendResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.ignore_friend(request)
        await stream.send_message(response)

    async def __rpc_get_community_preferences(
        self,
        stream: "grpclib.server.Stream[CPlayerGetCommunityPreferencesRequest, CPlayerGetCommunityPreferencesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_community_preferences(request)
        await stream.send_message(response)

    async def __rpc_set_community_preferences(
        self,
        stream: "grpclib.server.Stream[CPlayerSetCommunityPreferencesRequest, CPlayerSetCommunityPreferencesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_community_preferences(request)
        await stream.send_message(response)

    async def __rpc_get_text_filter_words(
        self,
        stream: "grpclib.server.Stream[CPlayerGetTextFilterWordsRequest, CPlayerGetTextFilterWordsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_text_filter_words(request)
        await stream.send_message(response)

    async def __rpc_get_new_steam_announcement_state(
        self,
        stream: "grpclib.server.Stream[CPlayerGetNewSteamAnnouncementStateRequest, CPlayerGetNewSteamAnnouncementStateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_new_steam_announcement_state(request)
        await stream.send_message(response)

    async def __rpc_update_steam_announcement_last_read(
        self,
        stream: "grpclib.server.Stream[CPlayerUpdateSteamAnnouncementLastReadRequest, CPlayerUpdateSteamAnnouncementLastReadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_steam_announcement_last_read(request)
        await stream.send_message(response)

    async def __rpc_get_privacy_settings(
        self,
        stream: "grpclib.server.Stream[CPlayerGetPrivacySettingsRequest, CPlayerGetPrivacySettingsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_privacy_settings(request)
        await stream.send_message(response)

    async def __rpc_get_duration_control(
        self,
        stream: "grpclib.server.Stream[CPlayerGetDurationControlRequest, CPlayerGetDurationControlResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_duration_control(request)
        await stream.send_message(response)

    async def __rpc_record_disconnected_playtime(
        self,
        stream: "grpclib.server.Stream[CPlayerRecordDisconnectedPlaytimeRequest, CPlayerRecordDisconnectedPlaytimeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.record_disconnected_playtime(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/Player/GetMutualFriendsForIncomingInvites": grpclib.const.Handler(
                self.__rpc_get_mutual_friends_for_incoming_invites,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetMutualFriendsForIncomingInvitesRequest,
                CPlayerGetMutualFriendsForIncomingInvitesResponse,
            ),
            "/Player/GetOwnedGames": grpclib.const.Handler(
                self.__rpc_get_owned_games,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetOwnedGamesRequest,
                CPlayerGetOwnedGamesResponse,
            ),
            "/Player/GetPlayNext": grpclib.const.Handler(
                self.__rpc_get_play_next,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetPlayNextRequest,
                CPlayerGetPlayNextResponse,
            ),
            "/Player/GetFriendsGameplayInfo": grpclib.const.Handler(
                self.__rpc_get_friends_gameplay_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetFriendsGameplayInfoRequest,
                CPlayerGetFriendsGameplayInfoResponse,
            ),
            "/Player/GetGameBadgeLevels": grpclib.const.Handler(
                self.__rpc_get_game_badge_levels,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetGameBadgeLevelsRequest,
                CPlayerGetGameBadgeLevelsResponse,
            ),
            "/Player/GetProfileBackground": grpclib.const.Handler(
                self.__rpc_get_profile_background,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetProfileBackgroundRequest,
                CPlayerGetProfileBackgroundResponse,
            ),
            "/Player/SetProfileBackground": grpclib.const.Handler(
                self.__rpc_set_profile_background,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerSetProfileBackgroundRequest,
                CPlayerSetProfileBackgroundResponse,
            ),
            "/Player/GetMiniProfileBackground": grpclib.const.Handler(
                self.__rpc_get_mini_profile_background,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetMiniProfileBackgroundRequest,
                CPlayerGetMiniProfileBackgroundResponse,
            ),
            "/Player/SetMiniProfileBackground": grpclib.const.Handler(
                self.__rpc_set_mini_profile_background,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerSetMiniProfileBackgroundRequest,
                CPlayerSetMiniProfileBackgroundResponse,
            ),
            "/Player/GetAvatarFrame": grpclib.const.Handler(
                self.__rpc_get_avatar_frame,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetAvatarFrameRequest,
                CPlayerGetAvatarFrameResponse,
            ),
            "/Player/SetAvatarFrame": grpclib.const.Handler(
                self.__rpc_set_avatar_frame,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerSetAvatarFrameRequest,
                CPlayerSetAvatarFrameResponse,
            ),
            "/Player/GetAnimatedAvatar": grpclib.const.Handler(
                self.__rpc_get_animated_avatar,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetAnimatedAvatarRequest,
                CPlayerGetAnimatedAvatarResponse,
            ),
            "/Player/SetAnimatedAvatar": grpclib.const.Handler(
                self.__rpc_set_animated_avatar,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerSetAnimatedAvatarRequest,
                CPlayerSetAnimatedAvatarResponse,
            ),
            "/Player/GetSteamDeckKeyboardSkin": grpclib.const.Handler(
                self.__rpc_get_steam_deck_keyboard_skin,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetSteamDeckKeyboardSkinRequest,
                CPlayerGetSteamDeckKeyboardSkinResponse,
            ),
            "/Player/SetSteamDeckKeyboardSkin": grpclib.const.Handler(
                self.__rpc_set_steam_deck_keyboard_skin,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerSetSteamDeckKeyboardSkinRequest,
                CPlayerSetSteamDeckKeyboardSkinResponse,
            ),
            "/Player/GetProfileItemsOwned": grpclib.const.Handler(
                self.__rpc_get_profile_items_owned,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetProfileItemsOwnedRequest,
                CPlayerGetProfileItemsOwnedResponse,
            ),
            "/Player/GetProfileItemsEquipped": grpclib.const.Handler(
                self.__rpc_get_profile_items_equipped,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetProfileItemsEquippedRequest,
                CPlayerGetProfileItemsEquippedResponse,
            ),
            "/Player/SetEquippedProfileItemFlags": grpclib.const.Handler(
                self.__rpc_set_equipped_profile_item_flags,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerSetEquippedProfileItemFlagsRequest,
                CPlayerSetEquippedProfileItemFlagsResponse,
            ),
            "/Player/GetEmoticonList": grpclib.const.Handler(
                self.__rpc_get_emoticon_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetEmoticonListRequest,
                CPlayerGetEmoticonListResponse,
            ),
            "/Player/GetTopAchievementsForGames": grpclib.const.Handler(
                self.__rpc_get_top_achievements_for_games,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetTopAchievementsForGamesRequest,
                CPlayerGetTopAchievementsForGamesResponse,
            ),
            "/Player/GetAchievementsProgress": grpclib.const.Handler(
                self.__rpc_get_achievements_progress,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetAchievementsProgressRequest,
                CPlayerGetAchievementsProgressResponse,
            ),
            "/Player/GetGameAchievements": grpclib.const.Handler(
                self.__rpc_get_game_achievements,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetGameAchievementsRequest,
                CPlayerGetGameAchievementsResponse,
            ),
            "/Player/GetFavoriteBadge": grpclib.const.Handler(
                self.__rpc_get_favorite_badge,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetFavoriteBadgeRequest,
                CPlayerGetFavoriteBadgeResponse,
            ),
            "/Player/SetFavoriteBadge": grpclib.const.Handler(
                self.__rpc_set_favorite_badge,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerSetFavoriteBadgeRequest,
                CPlayerSetFavoriteBadgeResponse,
            ),
            "/Player/GetProfileCustomization": grpclib.const.Handler(
                self.__rpc_get_profile_customization,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetProfileCustomizationRequest,
                CPlayerGetProfileCustomizationResponse,
            ),
            "/Player/GetPurchasedProfileCustomizations": grpclib.const.Handler(
                self.__rpc_get_purchased_profile_customizations,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetPurchasedProfileCustomizationsRequest,
                CPlayerGetPurchasedProfileCustomizationsResponse,
            ),
            "/Player/GetPurchasedAndUpgradedProfileCustomizations": grpclib.const.Handler(
                self.__rpc_get_purchased_and_upgraded_profile_customizations,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetPurchasedAndUpgradedProfileCustomizationsRequest,
                CPlayerGetPurchasedAndUpgradedProfileCustomizationsResponse,
            ),
            "/Player/GetProfileThemesAvailable": grpclib.const.Handler(
                self.__rpc_get_profile_themes_available,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetProfileThemesAvailableRequest,
                CPlayerGetProfileThemesAvailableResponse,
            ),
            "/Player/SetProfileTheme": grpclib.const.Handler(
                self.__rpc_set_profile_theme,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerSetProfileThemeRequest,
                CPlayerSetProfileThemeResponse,
            ),
            "/Player/SetProfilePreferences": grpclib.const.Handler(
                self.__rpc_set_profile_preferences,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerSetProfilePreferencesRequest,
                CPlayerSetProfilePreferencesResponse,
            ),
            "/Player/PostStatusToFriends": grpclib.const.Handler(
                self.__rpc_post_status_to_friends,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerPostStatusToFriendsRequest,
                CPlayerPostStatusToFriendsResponse,
            ),
            "/Player/GetPostedStatus": grpclib.const.Handler(
                self.__rpc_get_posted_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetPostedStatusRequest,
                CPlayerGetPostedStatusResponse,
            ),
            "/Player/DeletePostedStatus": grpclib.const.Handler(
                self.__rpc_delete_posted_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerDeletePostedStatusRequest,
                CPlayerDeletePostedStatusResponse,
            ),
            "/Player/ClientGetLastPlayedTimes": grpclib.const.Handler(
                self.__rpc_client_get_last_played_times,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetLastPlayedTimesRequest,
                CPlayerGetLastPlayedTimesResponse,
            ),
            "/Player/GetTimeSSAAccepted": grpclib.const.Handler(
                self.__rpc_get_time_ssa_accepted,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetTimeSsaAcceptedRequest,
                CPlayerGetTimeSsaAcceptedResponse,
            ),
            "/Player/AcceptSSA": grpclib.const.Handler(
                self.__rpc_accept_ssa,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerAcceptSsaRequest,
                CPlayerAcceptSsaResponse,
            ),
            "/Player/GetNicknameList": grpclib.const.Handler(
                self.__rpc_get_nickname_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetNicknameListRequest,
                CPlayerGetNicknameListResponse,
            ),
            "/Player/GetPerFriendPreferences": grpclib.const.Handler(
                self.__rpc_get_per_friend_preferences,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetPerFriendPreferencesRequest,
                CPlayerGetPerFriendPreferencesResponse,
            ),
            "/Player/SetPerFriendPreferences": grpclib.const.Handler(
                self.__rpc_set_per_friend_preferences,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerSetPerFriendPreferencesRequest,
                CPlayerSetPerFriendPreferencesResponse,
            ),
            "/Player/AddFriend": grpclib.const.Handler(
                self.__rpc_add_friend,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerAddFriendRequest,
                CPlayerAddFriendResponse,
            ),
            "/Player/RemoveFriend": grpclib.const.Handler(
                self.__rpc_remove_friend,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerRemoveFriendRequest,
                CPlayerRemoveFriendResponse,
            ),
            "/Player/IgnoreFriend": grpclib.const.Handler(
                self.__rpc_ignore_friend,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerIgnoreFriendRequest,
                CPlayerIgnoreFriendResponse,
            ),
            "/Player/GetCommunityPreferences": grpclib.const.Handler(
                self.__rpc_get_community_preferences,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetCommunityPreferencesRequest,
                CPlayerGetCommunityPreferencesResponse,
            ),
            "/Player/SetCommunityPreferences": grpclib.const.Handler(
                self.__rpc_set_community_preferences,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerSetCommunityPreferencesRequest,
                CPlayerSetCommunityPreferencesResponse,
            ),
            "/Player/GetTextFilterWords": grpclib.const.Handler(
                self.__rpc_get_text_filter_words,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetTextFilterWordsRequest,
                CPlayerGetTextFilterWordsResponse,
            ),
            "/Player/GetNewSteamAnnouncementState": grpclib.const.Handler(
                self.__rpc_get_new_steam_announcement_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetNewSteamAnnouncementStateRequest,
                CPlayerGetNewSteamAnnouncementStateResponse,
            ),
            "/Player/UpdateSteamAnnouncementLastRead": grpclib.const.Handler(
                self.__rpc_update_steam_announcement_last_read,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerUpdateSteamAnnouncementLastReadRequest,
                CPlayerUpdateSteamAnnouncementLastReadResponse,
            ),
            "/Player/GetPrivacySettings": grpclib.const.Handler(
                self.__rpc_get_privacy_settings,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetPrivacySettingsRequest,
                CPlayerGetPrivacySettingsResponse,
            ),
            "/Player/GetDurationControl": grpclib.const.Handler(
                self.__rpc_get_duration_control,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerGetDurationControlRequest,
                CPlayerGetDurationControlResponse,
            ),
            "/Player/RecordDisconnectedPlaytime": grpclib.const.Handler(
                self.__rpc_record_disconnected_playtime,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerRecordDisconnectedPlaytimeRequest,
                CPlayerRecordDisconnectedPlaytimeResponse,
            ),
        }


class PlayerClientBase(ServiceBase):
    async def notify_last_played_times(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_friend_nickname_changed(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_friend_equipped_profile_items_changed(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_new_steam_announcement_state(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_community_preferences_changed(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_text_filter_words_changed(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_per_friend_preferences_changed(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_privacy_privacy_settings_changed(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_notify_last_played_times(
        self,
        stream: "grpclib.server.Stream[CPlayerLastPlayedTimesNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_last_played_times(request)
        await stream.send_message(response)

    async def __rpc_notify_friend_nickname_changed(
        self,
        stream: "grpclib.server.Stream[CPlayerFriendNicknameChangedNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_friend_nickname_changed(request)
        await stream.send_message(response)

    async def __rpc_notify_friend_equipped_profile_items_changed(
        self,
        stream: "grpclib.server.Stream[CPlayerFriendEquippedProfileItemsChangedNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_friend_equipped_profile_items_changed(request)
        await stream.send_message(response)

    async def __rpc_notify_new_steam_announcement_state(
        self,
        stream: "grpclib.server.Stream[CPlayerNewSteamAnnouncementStateNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_new_steam_announcement_state(request)
        await stream.send_message(response)

    async def __rpc_notify_community_preferences_changed(
        self,
        stream: "grpclib.server.Stream[CPlayerCommunityPreferencesChangedNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_community_preferences_changed(request)
        await stream.send_message(response)

    async def __rpc_notify_text_filter_words_changed(
        self,
        stream: "grpclib.server.Stream[CPlayerTextFilterWordsChangedNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_text_filter_words_changed(request)
        await stream.send_message(response)

    async def __rpc_notify_per_friend_preferences_changed(
        self,
        stream: "grpclib.server.Stream[CPlayerPerFriendPreferencesChangedNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_per_friend_preferences_changed(request)
        await stream.send_message(response)

    async def __rpc_notify_privacy_privacy_settings_changed(
        self,
        stream: "grpclib.server.Stream[CPlayerPrivacySettingsChangedNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_privacy_privacy_settings_changed(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/PlayerClient/NotifyLastPlayedTimes": grpclib.const.Handler(
                self.__rpc_notify_last_played_times,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerLastPlayedTimesNotification,
                NoResponse,
            ),
            "/PlayerClient/NotifyFriendNicknameChanged": grpclib.const.Handler(
                self.__rpc_notify_friend_nickname_changed,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerFriendNicknameChangedNotification,
                NoResponse,
            ),
            "/PlayerClient/NotifyFriendEquippedProfileItemsChanged": grpclib.const.Handler(
                self.__rpc_notify_friend_equipped_profile_items_changed,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerFriendEquippedProfileItemsChangedNotification,
                NoResponse,
            ),
            "/PlayerClient/NotifyNewSteamAnnouncementState": grpclib.const.Handler(
                self.__rpc_notify_new_steam_announcement_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerNewSteamAnnouncementStateNotification,
                NoResponse,
            ),
            "/PlayerClient/NotifyCommunityPreferencesChanged": grpclib.const.Handler(
                self.__rpc_notify_community_preferences_changed,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerCommunityPreferencesChangedNotification,
                NoResponse,
            ),
            "/PlayerClient/NotifyTextFilterWordsChanged": grpclib.const.Handler(
                self.__rpc_notify_text_filter_words_changed,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerTextFilterWordsChangedNotification,
                NoResponse,
            ),
            "/PlayerClient/NotifyPerFriendPreferencesChanged": grpclib.const.Handler(
                self.__rpc_notify_per_friend_preferences_changed,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerPerFriendPreferencesChangedNotification,
                NoResponse,
            ),
            "/PlayerClient/NotifyPrivacyPrivacySettingsChanged": grpclib.const.Handler(
                self.__rpc_notify_privacy_privacy_settings_changed,
                grpclib.const.Cardinality.UNARY_UNARY,
                CPlayerPrivacySettingsChangedNotification,
                NoResponse,
            ),
        }


class HelpRequestLogsBase(ServiceBase):
    async def upload_user_application_log(
        self,
    ) -> "CHelpRequestLogsUploadUserApplicationLogResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_upload_user_application_log(
        self,
        stream: "grpclib.server.Stream[CHelpRequestLogsUploadUserApplicationLogRequest, CHelpRequestLogsUploadUserApplicationLogResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.upload_user_application_log(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/HelpRequestLogs/UploadUserApplicationLog": grpclib.const.Handler(
                self.__rpc_upload_user_application_log,
                grpclib.const.Cardinality.UNARY_UNARY,
                CHelpRequestLogsUploadUserApplicationLogRequest,
                CHelpRequestLogsUploadUserApplicationLogResponse,
            ),
        }


class CommunityBase(ServiceBase):
    async def get_apps(self) -> "CCommunityGetAppsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_app_rich_presence_localization(
        self,
    ) -> "CCommunityGetAppRichPresenceLocalizationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_comment_thread(self) -> "CCommunityGetCommentThreadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_comment_to_thread(self) -> "CCommunityPostCommentToThreadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_comment_from_thread(
        self,
    ) -> "CCommunityDeleteCommentFromThreadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rate_comment_thread(self) -> "CCommunityRateCommentThreadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_comment_thread_ratings(
        self,
    ) -> "CCommunityGetCommentThreadRatingsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rate_clan_announcement(self) -> "CCommunityRateClanAnnouncementResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_clan_announcement_vote_for_user(
        self,
    ) -> "CCommunityGetClanAnnouncementVoteForUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_user_partner_event_news(
        self,
    ) -> "CCommunityGetUserPartnerEventNewsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_best_events_for_user(
        self,
    ) -> "CCommunityGetBestEventsForUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def mark_partner_events_for_user(
        self,
    ) -> "CCommunityMarkPartnerEventsForUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def partner_events_show_more_for_app(
        self,
    ) -> "CCommunityPartnerEventsShowMoreForAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def partner_events_show_less_for_app(
        self,
    ) -> "CCommunityPartnerEventsShowLessForAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def clear_user_partner_events_app_priorities(
        self,
    ) -> "CCommunityClearUserPartnerEventsAppPrioritiesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_user_partner_events_app_priorities(
        self,
    ) -> "CCommunityGetUserPartnerEventsAppPrioritiesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def clear_single_partner_events_app_priority(
        self,
    ) -> "CCommunityClearSinglePartnerEventsAppPriorityResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_apps(
        self,
        stream: "grpclib.server.Stream[CCommunityGetAppsRequest, CCommunityGetAppsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_apps(request)
        await stream.send_message(response)

    async def __rpc_get_app_rich_presence_localization(
        self,
        stream: "grpclib.server.Stream[CCommunityGetAppRichPresenceLocalizationRequest, CCommunityGetAppRichPresenceLocalizationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_app_rich_presence_localization(request)
        await stream.send_message(response)

    async def __rpc_get_comment_thread(
        self,
        stream: "grpclib.server.Stream[CCommunityGetCommentThreadRequest, CCommunityGetCommentThreadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_comment_thread(request)
        await stream.send_message(response)

    async def __rpc_post_comment_to_thread(
        self,
        stream: "grpclib.server.Stream[CCommunityPostCommentToThreadRequest, CCommunityPostCommentToThreadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_comment_to_thread(request)
        await stream.send_message(response)

    async def __rpc_delete_comment_from_thread(
        self,
        stream: "grpclib.server.Stream[CCommunityDeleteCommentFromThreadRequest, CCommunityDeleteCommentFromThreadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_comment_from_thread(request)
        await stream.send_message(response)

    async def __rpc_rate_comment_thread(
        self,
        stream: "grpclib.server.Stream[CCommunityRateCommentThreadRequest, CCommunityRateCommentThreadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.rate_comment_thread(request)
        await stream.send_message(response)

    async def __rpc_get_comment_thread_ratings(
        self,
        stream: "grpclib.server.Stream[CCommunityGetCommentThreadRatingsRequest, CCommunityGetCommentThreadRatingsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_comment_thread_ratings(request)
        await stream.send_message(response)

    async def __rpc_rate_clan_announcement(
        self,
        stream: "grpclib.server.Stream[CCommunityRateClanAnnouncementRequest, CCommunityRateClanAnnouncementResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.rate_clan_announcement(request)
        await stream.send_message(response)

    async def __rpc_get_clan_announcement_vote_for_user(
        self,
        stream: "grpclib.server.Stream[CCommunityGetClanAnnouncementVoteForUserRequest, CCommunityGetClanAnnouncementVoteForUserResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_clan_announcement_vote_for_user(request)
        await stream.send_message(response)

    async def __rpc_get_user_partner_event_news(
        self,
        stream: "grpclib.server.Stream[CCommunityGetUserPartnerEventNewsRequest, CCommunityGetUserPartnerEventNewsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_user_partner_event_news(request)
        await stream.send_message(response)

    async def __rpc_get_best_events_for_user(
        self,
        stream: "grpclib.server.Stream[CCommunityGetBestEventsForUserRequest, CCommunityGetBestEventsForUserResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_best_events_for_user(request)
        await stream.send_message(response)

    async def __rpc_mark_partner_events_for_user(
        self,
        stream: "grpclib.server.Stream[CCommunityMarkPartnerEventsForUserRequest, CCommunityMarkPartnerEventsForUserResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.mark_partner_events_for_user(request)
        await stream.send_message(response)

    async def __rpc_partner_events_show_more_for_app(
        self,
        stream: "grpclib.server.Stream[CCommunityPartnerEventsShowMoreForAppRequest, CCommunityPartnerEventsShowMoreForAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.partner_events_show_more_for_app(request)
        await stream.send_message(response)

    async def __rpc_partner_events_show_less_for_app(
        self,
        stream: "grpclib.server.Stream[CCommunityPartnerEventsShowLessForAppRequest, CCommunityPartnerEventsShowLessForAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.partner_events_show_less_for_app(request)
        await stream.send_message(response)

    async def __rpc_clear_user_partner_events_app_priorities(
        self,
        stream: "grpclib.server.Stream[CCommunityClearUserPartnerEventsAppPrioritiesRequest, CCommunityClearUserPartnerEventsAppPrioritiesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.clear_user_partner_events_app_priorities(request)
        await stream.send_message(response)

    async def __rpc_get_user_partner_events_app_priorities(
        self,
        stream: "grpclib.server.Stream[CCommunityGetUserPartnerEventsAppPrioritiesRequest, CCommunityGetUserPartnerEventsAppPrioritiesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_user_partner_events_app_priorities(request)
        await stream.send_message(response)

    async def __rpc_clear_single_partner_events_app_priority(
        self,
        stream: "grpclib.server.Stream[CCommunityClearSinglePartnerEventsAppPriorityRequest, CCommunityClearSinglePartnerEventsAppPriorityResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.clear_single_partner_events_app_priority(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/Community/GetApps": grpclib.const.Handler(
                self.__rpc_get_apps,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityGetAppsRequest,
                CCommunityGetAppsResponse,
            ),
            "/Community/GetAppRichPresenceLocalization": grpclib.const.Handler(
                self.__rpc_get_app_rich_presence_localization,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityGetAppRichPresenceLocalizationRequest,
                CCommunityGetAppRichPresenceLocalizationResponse,
            ),
            "/Community/GetCommentThread": grpclib.const.Handler(
                self.__rpc_get_comment_thread,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityGetCommentThreadRequest,
                CCommunityGetCommentThreadResponse,
            ),
            "/Community/PostCommentToThread": grpclib.const.Handler(
                self.__rpc_post_comment_to_thread,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityPostCommentToThreadRequest,
                CCommunityPostCommentToThreadResponse,
            ),
            "/Community/DeleteCommentFromThread": grpclib.const.Handler(
                self.__rpc_delete_comment_from_thread,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityDeleteCommentFromThreadRequest,
                CCommunityDeleteCommentFromThreadResponse,
            ),
            "/Community/RateCommentThread": grpclib.const.Handler(
                self.__rpc_rate_comment_thread,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityRateCommentThreadRequest,
                CCommunityRateCommentThreadResponse,
            ),
            "/Community/GetCommentThreadRatings": grpclib.const.Handler(
                self.__rpc_get_comment_thread_ratings,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityGetCommentThreadRatingsRequest,
                CCommunityGetCommentThreadRatingsResponse,
            ),
            "/Community/RateClanAnnouncement": grpclib.const.Handler(
                self.__rpc_rate_clan_announcement,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityRateClanAnnouncementRequest,
                CCommunityRateClanAnnouncementResponse,
            ),
            "/Community/GetClanAnnouncementVoteForUser": grpclib.const.Handler(
                self.__rpc_get_clan_announcement_vote_for_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityGetClanAnnouncementVoteForUserRequest,
                CCommunityGetClanAnnouncementVoteForUserResponse,
            ),
            "/Community/GetUserPartnerEventNews": grpclib.const.Handler(
                self.__rpc_get_user_partner_event_news,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityGetUserPartnerEventNewsRequest,
                CCommunityGetUserPartnerEventNewsResponse,
            ),
            "/Community/GetBestEventsForUser": grpclib.const.Handler(
                self.__rpc_get_best_events_for_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityGetBestEventsForUserRequest,
                CCommunityGetBestEventsForUserResponse,
            ),
            "/Community/MarkPartnerEventsForUser": grpclib.const.Handler(
                self.__rpc_mark_partner_events_for_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityMarkPartnerEventsForUserRequest,
                CCommunityMarkPartnerEventsForUserResponse,
            ),
            "/Community/PartnerEventsShowMoreForApp": grpclib.const.Handler(
                self.__rpc_partner_events_show_more_for_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityPartnerEventsShowMoreForAppRequest,
                CCommunityPartnerEventsShowMoreForAppResponse,
            ),
            "/Community/PartnerEventsShowLessForApp": grpclib.const.Handler(
                self.__rpc_partner_events_show_less_for_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityPartnerEventsShowLessForAppRequest,
                CCommunityPartnerEventsShowLessForAppResponse,
            ),
            "/Community/ClearUserPartnerEventsAppPriorities": grpclib.const.Handler(
                self.__rpc_clear_user_partner_events_app_priorities,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityClearUserPartnerEventsAppPrioritiesRequest,
                CCommunityClearUserPartnerEventsAppPrioritiesResponse,
            ),
            "/Community/GetUserPartnerEventsAppPriorities": grpclib.const.Handler(
                self.__rpc_get_user_partner_events_app_priorities,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityGetUserPartnerEventsAppPrioritiesRequest,
                CCommunityGetUserPartnerEventsAppPrioritiesResponse,
            ),
            "/Community/ClearSinglePartnerEventsAppPriority": grpclib.const.Handler(
                self.__rpc_clear_single_partner_events_app_priority,
                grpclib.const.Cardinality.UNARY_UNARY,
                CCommunityClearSinglePartnerEventsAppPriorityRequest,
                CCommunityClearSinglePartnerEventsAppPriorityResponse,
            ),
        }


class ExperimentServiceBase(ServiceBase):
    async def report_product_impressions_from_client(
        self, unknown_proto: "UnknownProto"
    ) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_report_product_impressions_from_client(
        self, stream: "grpclib.server.Stream[UnknownProto, NoResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.report_product_impressions_from_client(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/ExperimentService/ReportProductImpressionsFromClient": grpclib.const.Handler(
                self.__rpc_report_product_impressions_from_client,
                grpclib.const.Cardinality.UNARY_UNARY,
                UnknownProto,
                NoResponse,
            ),
        }


class FriendsListBase(ServiceBase):
    async def get_categories(self) -> "CFriendsListGetCategoriesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_friends_list(self) -> "CFriendsListGetFriendsListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_favorites(self) -> "CFriendsListGetFavoritesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_favorites(self) -> "CFriendsListSetFavoritesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_categories(
        self,
        stream: "grpclib.server.Stream[CFriendsListGetCategoriesRequest, CFriendsListGetCategoriesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_categories(request)
        await stream.send_message(response)

    async def __rpc_get_friends_list(
        self,
        stream: "grpclib.server.Stream[CFriendsListGetFriendsListRequest, CFriendsListGetFriendsListResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_friends_list(request)
        await stream.send_message(response)

    async def __rpc_get_favorites(
        self,
        stream: "grpclib.server.Stream[CFriendsListGetFavoritesRequest, CFriendsListGetFavoritesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_favorites(request)
        await stream.send_message(response)

    async def __rpc_set_favorites(
        self,
        stream: "grpclib.server.Stream[CFriendsListSetFavoritesRequest, CFriendsListSetFavoritesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_favorites(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/FriendsList/GetCategories": grpclib.const.Handler(
                self.__rpc_get_categories,
                grpclib.const.Cardinality.UNARY_UNARY,
                CFriendsListGetCategoriesRequest,
                CFriendsListGetCategoriesResponse,
            ),
            "/FriendsList/GetFriendsList": grpclib.const.Handler(
                self.__rpc_get_friends_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                CFriendsListGetFriendsListRequest,
                CFriendsListGetFriendsListResponse,
            ),
            "/FriendsList/GetFavorites": grpclib.const.Handler(
                self.__rpc_get_favorites,
                grpclib.const.Cardinality.UNARY_UNARY,
                CFriendsListGetFavoritesRequest,
                CFriendsListGetFavoritesResponse,
            ),
            "/FriendsList/SetFavorites": grpclib.const.Handler(
                self.__rpc_set_favorites,
                grpclib.const.Cardinality.UNARY_UNARY,
                CFriendsListSetFavoritesRequest,
                CFriendsListSetFavoritesResponse,
            ),
        }


class FriendsListClientBase(ServiceBase):
    async def favorites_changed(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_favorites_changed(
        self,
        stream: "grpclib.server.Stream[CFriendsListFavoritesChangedNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.favorites_changed(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/FriendsListClient/FavoritesChanged": grpclib.const.Handler(
                self.__rpc_favorites_changed,
                grpclib.const.Cardinality.UNARY_UNARY,
                CFriendsListFavoritesChangedNotification,
                NoResponse,
            ),
        }


class ClanBase(ServiceBase):
    async def respond_to_clan_invite(self) -> "CClanRespondToClanInviteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_respond_to_clan_invite(
        self,
        stream: "grpclib.server.Stream[CClanRespondToClanInviteRequest, CClanRespondToClanInviteResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.respond_to_clan_invite(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/Clan/RespondToClanInvite": grpclib.const.Handler(
                self.__rpc_respond_to_clan_invite,
                grpclib.const.Cardinality.UNARY_UNARY,
                CClanRespondToClanInviteRequest,
                CClanRespondToClanInviteResponse,
            ),
        }


class VoiceChatBase(ServiceBase):
    async def update_voice_chat_web_rtc_data(
        self,
    ) -> "CVoiceChatUpdateVoiceChatWebRtcDataResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_user_voice_status(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def upload_client_voice_chat_logs(
        self,
    ) -> "CVoiceChatUploadClientVoiceChatLogsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def leave_voice_chat(self) -> "CVoiceChatLeaveVoiceChatResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def request_one_on_one_chat(self) -> "CVoiceChatRequestOneOnOneChatResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def answer_one_on_one_chat(self) -> "CVoiceChatAnswerOneOnOneChatResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def end_one_on_one_chat(self) -> "CVoiceChatEndOneOnOneChatResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def leave_one_on_one_chat(self) -> "CVoiceChatLeaveOneOnOneChatResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_update_voice_chat_web_rtc_data(
        self,
        stream: "grpclib.server.Stream[CVoiceChatUpdateVoiceChatWebRtcDataRequest, CVoiceChatUpdateVoiceChatWebRtcDataResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_voice_chat_web_rtc_data(request)
        await stream.send_message(response)

    async def __rpc_notify_user_voice_status(
        self,
        stream: "grpclib.server.Stream[CVoiceChatUserVoiceStatusNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_user_voice_status(request)
        await stream.send_message(response)

    async def __rpc_upload_client_voice_chat_logs(
        self,
        stream: "grpclib.server.Stream[CVoiceChatUploadClientVoiceChatLogsRequest, CVoiceChatUploadClientVoiceChatLogsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.upload_client_voice_chat_logs(request)
        await stream.send_message(response)

    async def __rpc_leave_voice_chat(
        self,
        stream: "grpclib.server.Stream[CVoiceChatLeaveVoiceChatRequest, CVoiceChatLeaveVoiceChatResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.leave_voice_chat(request)
        await stream.send_message(response)

    async def __rpc_request_one_on_one_chat(
        self,
        stream: "grpclib.server.Stream[CVoiceChatRequestOneOnOneChatRequest, CVoiceChatRequestOneOnOneChatResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.request_one_on_one_chat(request)
        await stream.send_message(response)

    async def __rpc_answer_one_on_one_chat(
        self,
        stream: "grpclib.server.Stream[CVoiceChatAnswerOneOnOneChatRequest, CVoiceChatAnswerOneOnOneChatResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.answer_one_on_one_chat(request)
        await stream.send_message(response)

    async def __rpc_end_one_on_one_chat(
        self,
        stream: "grpclib.server.Stream[CVoiceChatEndOneOnOneChatRequest, CVoiceChatEndOneOnOneChatResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.end_one_on_one_chat(request)
        await stream.send_message(response)

    async def __rpc_leave_one_on_one_chat(
        self,
        stream: "grpclib.server.Stream[CVoiceChatLeaveOneOnOneChatRequest, CVoiceChatLeaveOneOnOneChatResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.leave_one_on_one_chat(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/VoiceChat/UpdateVoiceChatWebRTCData": grpclib.const.Handler(
                self.__rpc_update_voice_chat_web_rtc_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                CVoiceChatUpdateVoiceChatWebRtcDataRequest,
                CVoiceChatUpdateVoiceChatWebRtcDataResponse,
            ),
            "/VoiceChat/NotifyUserVoiceStatus": grpclib.const.Handler(
                self.__rpc_notify_user_voice_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                CVoiceChatUserVoiceStatusNotification,
                NoResponse,
            ),
            "/VoiceChat/UploadClientVoiceChatLogs": grpclib.const.Handler(
                self.__rpc_upload_client_voice_chat_logs,
                grpclib.const.Cardinality.UNARY_UNARY,
                CVoiceChatUploadClientVoiceChatLogsRequest,
                CVoiceChatUploadClientVoiceChatLogsResponse,
            ),
            "/VoiceChat/LeaveVoiceChat": grpclib.const.Handler(
                self.__rpc_leave_voice_chat,
                grpclib.const.Cardinality.UNARY_UNARY,
                CVoiceChatLeaveVoiceChatRequest,
                CVoiceChatLeaveVoiceChatResponse,
            ),
            "/VoiceChat/RequestOneOnOneChat": grpclib.const.Handler(
                self.__rpc_request_one_on_one_chat,
                grpclib.const.Cardinality.UNARY_UNARY,
                CVoiceChatRequestOneOnOneChatRequest,
                CVoiceChatRequestOneOnOneChatResponse,
            ),
            "/VoiceChat/AnswerOneOnOneChat": grpclib.const.Handler(
                self.__rpc_answer_one_on_one_chat,
                grpclib.const.Cardinality.UNARY_UNARY,
                CVoiceChatAnswerOneOnOneChatRequest,
                CVoiceChatAnswerOneOnOneChatResponse,
            ),
            "/VoiceChat/EndOneOnOneChat": grpclib.const.Handler(
                self.__rpc_end_one_on_one_chat,
                grpclib.const.Cardinality.UNARY_UNARY,
                CVoiceChatEndOneOnOneChatRequest,
                CVoiceChatEndOneOnOneChatResponse,
            ),
            "/VoiceChat/LeaveOneOnOneChat": grpclib.const.Handler(
                self.__rpc_leave_one_on_one_chat,
                grpclib.const.Cardinality.UNARY_UNARY,
                CVoiceChatLeaveOneOnOneChatRequest,
                CVoiceChatLeaveOneOnOneChatResponse,
            ),
        }


class VoiceChatClientBase(ServiceBase):
    async def notify_user_joined_voice_chat(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_user_left_voice_chat(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_voice_chat_ended(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_user_voice_status(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_all_users_voice_status(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_one_on_one_chat_requested(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_one_on_one_chat_response(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_notify_user_joined_voice_chat(
        self,
        stream: "grpclib.server.Stream[CVoiceChatUserJoinedVoiceChatNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_user_joined_voice_chat(request)
        await stream.send_message(response)

    async def __rpc_notify_user_left_voice_chat(
        self,
        stream: "grpclib.server.Stream[CVoiceChatUserLeftVoiceChatNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_user_left_voice_chat(request)
        await stream.send_message(response)

    async def __rpc_notify_voice_chat_ended(
        self,
        stream: "grpclib.server.Stream[CVoiceChatVoiceChatEndedNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_voice_chat_ended(request)
        await stream.send_message(response)

    async def __rpc_notify_user_voice_status(
        self,
        stream: "grpclib.server.Stream[CVoiceChatUserVoiceStatusNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_user_voice_status(request)
        await stream.send_message(response)

    async def __rpc_notify_all_users_voice_status(
        self,
        stream: "grpclib.server.Stream[CVoiceChatAllMembersStatusNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_all_users_voice_status(request)
        await stream.send_message(response)

    async def __rpc_notify_one_on_one_chat_requested(
        self,
        stream: "grpclib.server.Stream[CVoiceChatOneOnOneChatRequestedNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_one_on_one_chat_requested(request)
        await stream.send_message(response)

    async def __rpc_notify_one_on_one_chat_response(
        self,
        stream: "grpclib.server.Stream[CVoiceChatOneOnOneChatRequestResponseNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_one_on_one_chat_response(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/VoiceChatClient/NotifyUserJoinedVoiceChat": grpclib.const.Handler(
                self.__rpc_notify_user_joined_voice_chat,
                grpclib.const.Cardinality.UNARY_UNARY,
                CVoiceChatUserJoinedVoiceChatNotification,
                NoResponse,
            ),
            "/VoiceChatClient/NotifyUserLeftVoiceChat": grpclib.const.Handler(
                self.__rpc_notify_user_left_voice_chat,
                grpclib.const.Cardinality.UNARY_UNARY,
                CVoiceChatUserLeftVoiceChatNotification,
                NoResponse,
            ),
            "/VoiceChatClient/NotifyVoiceChatEnded": grpclib.const.Handler(
                self.__rpc_notify_voice_chat_ended,
                grpclib.const.Cardinality.UNARY_UNARY,
                CVoiceChatVoiceChatEndedNotification,
                NoResponse,
            ),
            "/VoiceChatClient/NotifyUserVoiceStatus": grpclib.const.Handler(
                self.__rpc_notify_user_voice_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                CVoiceChatUserVoiceStatusNotification,
                NoResponse,
            ),
            "/VoiceChatClient/NotifyAllUsersVoiceStatus": grpclib.const.Handler(
                self.__rpc_notify_all_users_voice_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                CVoiceChatAllMembersStatusNotification,
                NoResponse,
            ),
            "/VoiceChatClient/NotifyOneOnOneChatRequested": grpclib.const.Handler(
                self.__rpc_notify_one_on_one_chat_requested,
                grpclib.const.Cardinality.UNARY_UNARY,
                CVoiceChatOneOnOneChatRequestedNotification,
                NoResponse,
            ),
            "/VoiceChatClient/NotifyOneOnOneChatResponse": grpclib.const.Handler(
                self.__rpc_notify_one_on_one_chat_response,
                grpclib.const.Cardinality.UNARY_UNARY,
                CVoiceChatOneOnOneChatRequestResponseNotification,
                NoResponse,
            ),
        }


class WebRtcClientBase(ServiceBase):
    async def initiate_web_rtc_connection(
        self,
    ) -> "CWebRtcClientInitiateWebRtcConnectionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def acknowledge_updated_remote_description(
        self,
    ) -> "CWebRtcClientAcknowledgeUpdatedRemoteDescriptionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_initiate_web_rtc_connection(
        self,
        stream: "grpclib.server.Stream[CWebRtcClientInitiateWebRtcConnectionRequest, CWebRtcClientInitiateWebRtcConnectionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.initiate_web_rtc_connection(request)
        await stream.send_message(response)

    async def __rpc_acknowledge_updated_remote_description(
        self,
        stream: "grpclib.server.Stream[CWebRtcClientAcknowledgeUpdatedRemoteDescriptionRequest, CWebRtcClientAcknowledgeUpdatedRemoteDescriptionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.acknowledge_updated_remote_description(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/WebRTCClient/InitiateWebRTCConnection": grpclib.const.Handler(
                self.__rpc_initiate_web_rtc_connection,
                grpclib.const.Cardinality.UNARY_UNARY,
                CWebRtcClientInitiateWebRtcConnectionRequest,
                CWebRtcClientInitiateWebRtcConnectionResponse,
            ),
            "/WebRTCClient/AcknowledgeUpdatedRemoteDescription": grpclib.const.Handler(
                self.__rpc_acknowledge_updated_remote_description,
                grpclib.const.Cardinality.UNARY_UNARY,
                CWebRtcClientAcknowledgeUpdatedRemoteDescriptionRequest,
                CWebRtcClientAcknowledgeUpdatedRemoteDescriptionResponse,
            ),
        }


class WebRtcClientNotificationsBase(ServiceBase):
    async def notify_web_rtc_session_connected(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_web_rtc_update_remote_description(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_notify_web_rtc_session_connected(
        self,
        stream: "grpclib.server.Stream[CWebRtcWebRtcSessionConnectedNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_web_rtc_session_connected(request)
        await stream.send_message(response)

    async def __rpc_notify_web_rtc_update_remote_description(
        self,
        stream: "grpclib.server.Stream[CWebRtcWebRtcUpdateRemoteDescriptionNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_web_rtc_update_remote_description(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/WebRTCClientNotifications/NotifyWebRTCSessionConnected": grpclib.const.Handler(
                self.__rpc_notify_web_rtc_session_connected,
                grpclib.const.Cardinality.UNARY_UNARY,
                CWebRtcWebRtcSessionConnectedNotification,
                NoResponse,
            ),
            "/WebRTCClientNotifications/NotifyWebRTCUpdateRemoteDescription": grpclib.const.Handler(
                self.__rpc_notify_web_rtc_update_remote_description,
                grpclib.const.Cardinality.UNARY_UNARY,
                CWebRtcWebRtcUpdateRemoteDescriptionNotification,
                NoResponse,
            ),
        }


class MobilePerAccountBase(ServiceBase):
    async def get_settings(self) -> "CMobilePerAccountGetSettingsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_settings(self) -> "CMobilePerAccountSetSettingsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_settings(
        self,
        stream: "grpclib.server.Stream[CMobilePerAccountGetSettingsRequest, CMobilePerAccountGetSettingsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_settings(request)
        await stream.send_message(response)

    async def __rpc_set_settings(
        self,
        stream: "grpclib.server.Stream[CMobilePerAccountSetSettingsRequest, CMobilePerAccountSetSettingsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_settings(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/MobilePerAccount/GetSettings": grpclib.const.Handler(
                self.__rpc_get_settings,
                grpclib.const.Cardinality.UNARY_UNARY,
                CMobilePerAccountGetSettingsRequest,
                CMobilePerAccountGetSettingsResponse,
            ),
            "/MobilePerAccount/SetSettings": grpclib.const.Handler(
                self.__rpc_set_settings,
                grpclib.const.Cardinality.UNARY_UNARY,
                CMobilePerAccountSetSettingsRequest,
                CMobilePerAccountSetSettingsResponse,
            ),
        }


class MobileDeviceBase(ServiceBase):
    async def register_mobile_device(
        self,
    ) -> "CMobileDeviceRegisterMobileDeviceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deregister_mobile_device(self) -> "NoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_register_mobile_device(
        self,
        stream: "grpclib.server.Stream[CMobileDeviceRegisterMobileDeviceRequest, CMobileDeviceRegisterMobileDeviceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.register_mobile_device(request)
        await stream.send_message(response)

    async def __rpc_deregister_mobile_device(
        self,
        stream: "grpclib.server.Stream[CMobileDeviceDeregisterMobileDeviceNotification, NoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.deregister_mobile_device(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/MobileDevice/RegisterMobileDevice": grpclib.const.Handler(
                self.__rpc_register_mobile_device,
                grpclib.const.Cardinality.UNARY_UNARY,
                CMobileDeviceRegisterMobileDeviceRequest,
                CMobileDeviceRegisterMobileDeviceResponse,
            ),
            "/MobileDevice/DeregisterMobileDevice": grpclib.const.Handler(
                self.__rpc_deregister_mobile_device,
                grpclib.const.Cardinality.UNARY_UNARY,
                CMobileDeviceDeregisterMobileDeviceNotification,
                NoResponse,
            ),
        }
